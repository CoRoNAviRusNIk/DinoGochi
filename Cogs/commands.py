import telebot
from telebot import types
import random
import json
import pymongo
from PIL import Image, ImageFont, ImageDraw, ImageOps, ImageSequence, ImageFilter
import time
import sys
from pprint import pprint
from fuzzywuzzy import fuzz

from classes import Functions, Dungeon

sys.path.append("..")
import config

client = pymongo.MongoClient(config.CLUSTER_TOKEN)
users = client.bot.users
referal_system = client.bot.referal_system
market = client.bot.market
dungeons = client.bot.dungeons

with open('data/items.json', encoding='utf-8') as f: items_f = json.load(f)

with open('data/dino_data.json', encoding='utf-8') as f: json_f = json.load(f)

with open('data/mobs.json', encoding='utf-8') as f: mobs_f = json.load(f)

class commands:

    @staticmethod
    def start_game(bot, message, user, bd_user):

        if bd_user == None:

            try:
                r = bot.get_chat_member(-1001673242031, user.id)
            except:
                return

            if r.status == 'left':

                if user.language_code == 'ru':
                    text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüî¥ | –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"* –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Å–ª–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"*, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!'
                    b1 = "ü¶ñ | –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                    b2 = "üîÑ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
                else:
                    text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüî¥ | Click on the *'Subscribe'* button to go to the channel, and then on the *'Check'*, to continue working!"
                    b1 = "ü¶ñ | Subscribe"
                    b2 = "üîÑ | Check"

                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add( types.InlineKeyboardButton(text= b1, url="https://t.me/DinoGochi"))
                markup_inline.add( types.InlineKeyboardButton(text= b2, callback_data = 'start') )

                bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

            else:

                if user.language_code == 'ru':
                    text = f'üéç | –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –∂–¥—ë—Ç, —Ç—ã –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∏ —Å—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?!\n\n–ï—Å–ª–∏ –¥–∞, —Ç–æ —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!'
                    b1 = "üéã | –ù–∞—á–∞—Ç—å!"
                else:
                    text = f"üéç | An exciting world of adventures awaits, are you ready to become the owner of a dinosaur and compete in the ranking with other users?!\n\nIf yes, then rather press the button from below!"
                    b1 = "üéã | Start!"


                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add( types.InlineKeyboardButton(text= b1, callback_data = 'start') )

                bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

    @staticmethod
    def project_reb(bot, message, user, bd_user):

        if bd_user != None:
            if bd_user != None and len(bd_user['dinos']) == 0 and Functions.inv_egg(bd_user) == False and bd_user['lvl'][0] <= 5:

                if bd_user['language_code'] == 'ru':
                    text =  f"–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –≤ —á—ë—Ä–Ω–æ–º –æ–¥–µ—è–Ω–∏–∏.\n\n"
                    text += f"–í—ã –≤–∏–¥–∏—Ç–µ, —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ —á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã –∏ –∫–∞–∫–æ–π-—Ç–æ —à—Ä–∞–º –Ω–∞ —â–µ–∫–µ, –Ω–æ –µ–≥–æ –≥–ª–∞–∑–∞ –Ω–µ –≤–∏–¥–Ω—ã –≤ —Ç–µ–Ω–∏ —à–ª—è–ø—ã.\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç { random.choice( ['–º–∏—Å—Ç–µ—Ä', '–¥–æ–∫—Ç–æ—Ä'] ) } { random.choice( ['–î–∂–µ–π–º—Å', '–†–æ–±–µ—Ä—Ç', '–í–∏–Ω—Å–µ–Ω—Ç', '–ê–ª—å–±–µ—Ä—Ç'] ) }, –∞ –≤–∞—Å...\n\n"
                    text += f"*–í—ã:* - ... {user.first_name}, {user.first_name} {user.last_name}, —Ç–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ {user.first_name}, –¥–∞–≤–Ω–æ –≤—ã –≤ –Ω–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ? _—É–ª—ã–±–∞–µ—Ç—Å—è_\n\n"
                    text += f"*–í—ã:* - ...–ß—Ç–æ? –ë–∏–∑–Ω–µ—Å? –û —á–µ–º, –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?!\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü–æ–Ω—è—Ç–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ... –¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º. _–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤ –±–ª–æ–∫–Ω–æ—Ç_\n\n"
                    text += f"*–í—ã:* - ...\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –î–∞–≤–∞–π—Ç–µ –±–ª–∏–∂–µ –∫ –¥–µ–ª—É, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫–ª—é—á–∏—Ç—å —Å –Ω–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –º—ã –ø–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º.\n\n"
                    text += f"*–í—ã:* - –Ø—è—è, —è –Ω–µ –∑–Ω–∞—é...\n\n"
                    text += f"*–í—ã:* - \n\n"
                    text += f"‚ùì | –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
                    b1 = ['‚ùì | –ö—Ç–æ –≤—ã —Ç–∞–∫–æ–π?', '‚ùì | –≠—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ?', '‚ùì | –ö—Ç–æ "–º—ã"?', 'üß© | –£ –º–µ–Ω—è –∂–µ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞, —Ç–∞–∫?']
                else:
                    text = f"A man in a black robe approaches you.\n\n"
                    text += f"You can see that the man has black hair and some kind of scar on his cheek, but his eyes are not visible in the shadow of the hat.\n\n"
                    text += f"*Personality:* - Hello, my name is { random.choice(['mister', 'doctor'] ) } { random.choice( ['James', 'Robert', 'Vincent', 'Albert'] ) }, and you...\n\n"
                    text += f"*You are:* - ... {user.first_name}, {user.first_name} {user.last_name}, that's my name\n\n"
                    text += f"*Personality:* - Fine {user.first_name}, how long have you been in our business? _ulybaet_\n\n"
                    text += f"*You are:* - ...What? Business? What are you talking about?!\n\n"
                    text += f"*Personality:* - I see, I see... So we'll write it down. _ Writes something in notepad_\n\n"
                    text += f"*You are:* - ...\n\n"
                    text += f"*Personality:* - Let's get down to business, we offer you to sign a contract with us, we get your coins and resources, you get an egg with a dinosaur.\n\n"
                    text += f"*You:* - I know, I don't know...\n\n"
                    text += f"*You:* - \n\n"
                    text += f"‚ùì | Choose the answer option'"
                    b1 = ['‚ùì | Who are you?', '‚ùì | Is it legal?', '‚ùì | Who are "we"?', "üß© | I don't have a choice, right?"]

                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add( types.InlineKeyboardButton(text= b1[0], callback_data = 'dead_answer1') )
                markup_inline.add( types.InlineKeyboardButton(text= b1[1], callback_data = 'dead_answer2') )
                markup_inline.add( types.InlineKeyboardButton(text= b1[2], callback_data = 'dead_answer3') )
                markup_inline.add( types.InlineKeyboardButton(text= b1[3], callback_data = 'dead_answer4') )

                bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

    @staticmethod
    def faq(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text2  = '*‚ùó FAQ*\n\n'
                text2 += "*‚îå* *–†–µ–¥–∫–æ—Å—Ç–∏ üéà*\n\n"
                text2 += "*‚îú* –°–æ–±—ã—Ç–∏—è –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏.\n–ß–µ–º –±–æ–ª—å—à–µ —Ä–µ–¥–∫–æ—Å—Ç—å, —Ç–µ–º —Å–ª–∞—â–µ –Ω–∞–≥—Ä–∞–¥–∞.\n\n"
                text2 += "*‚îú*  1. –û–±—ã—á–Ω–∞—è - 50%\n*‚îú*  2. –ù–µ–æ–±—ã—á–Ω–∞—è - 25%\n*‚îú*  3. –†–µ–¥–∫–∞—è - 15%\n*‚îú*  4. –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è - 9%\n*‚îî*  5. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è - 1%\n\n"
                text2 += "*‚îå* *–í–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏—è üïπ*\n\n"
                text2 += "*‚îú* –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∏–Ω–æ–∑–∞—Ä–≤–æ–º –ø–µ—Ä–µ–¥–∏—Ç–µ –≤ `üïπ –î–µ–π—Å—Ç–≤–∏—è`.\n\n"
                text2 += "*‚îú*  1. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±—ã—Ç—å –ø–∏—â—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üçï –°–±–æ—Ä –ø–∏—â–∏` –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
                text2 += "*‚îú*  2. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å` –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∏—â—É.\n\n"
                text2 += "*‚îú*  3. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è` –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
                text2 += "*‚îú*  4. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ —Å–ø–∞—Ç—å, `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å`\n\n"
                text2 += "*‚îî*  5. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ, –∏–≥—Ä—ã, —Å–Ω–∞ –≤ –Ω–æ—Ä–º–µ.\n\n"
                text2 += "*‚îå* *–ü—Ä–æ—Ñ–∏–ª—å üéÆ*\n\n"
                text2 += "*‚îî*  –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ `üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å`\n\n"
                text2 += "*‚îå* *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß*\n\n"
                text2 += "*‚îî*  –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫.\n\n"
                text2 += "*‚îå* *–ï–¥–∞ üçï*\n\n"
                text2 += "*‚îî*  –ö–∞–∫–æ–π –≤–∏–¥ –ø–∏—â–∏ –ø–æ–¥–æ–π–¥—ë—Ç –≤–∞—à–µ–º—É –¥–∏–Ω–æ–∑–∞–≤—Ä—É, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ –∑–∞–¥–Ω–µ–º—É —Ñ–æ–Ω—É –ø—Ä–æ—Ñ–∏–ª—è.\n\n"
                text2 += "*‚îå* *–†—ã–Ω–æ–∫ üõí*\n\n"
                text2 += "*‚îî*  –ù–∞ —Ä—ã–Ω–∫–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω—É–∂–Ω—ã–µ –≤–∞–º –≤–µ—â–∏.\n\n"
                text2 += "*‚îå* *–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã üèì*\n\n"
                text2 += "*‚îî*  –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ —É—Å–∫–æ—Ä—è—é—Ç –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∫–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –≤ –º–µ–Ω—é `üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å`\n\n"
                text2 += "*‚îå* *–î—Ä—É–∑—å—è üë•*\n\n"
                text2 += "*‚îî*  –í –º–µ–Ω—é –¥—Ä—É–∑–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π. –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —Ç–µ–º –±–æ–ª—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫–∏–µ —Ç–æ –±–æ–Ω—É—Å—ã. –¢–∞–∫ –∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤ –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –≤—ã –∏ –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã.\n\n"
                text2 += "*‚îå* *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ ü¶ï*\n\n"
                text2 += "*‚îú*  –ö–∞–∂–¥—ã–π 20-—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1.\n*‚îú*  20—ã–π —É—Ä–æ–≤–µ–Ω—å - 2 –¥–∏–Ω–æ–∑–∞–≤—Ä–∞.\n*‚îî*  40–æ–π —É—Ä–æ–≤–µ–Ω—å - 3 –¥–∏–Ω–æ–∑–∞–≤—Ä–∞...\n\n"
                text2 += "*‚îå* *–î–∏–Ω–æ-—Ç–∞–≤–µ—Ä–Ω–∞ ‚Äçüç∫*\n\n"
                text2 += "*‚îî* –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ `‚Äçüç∫ –î–∏–Ω–æ-—Ç–∞–≤–µ—Ä–Ω–∞`, —Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π, –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤. –ê —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç—ã!\n\n"
                text2 += "*‚îå* *–ö–≤–µ—Å—Ç—ã üìú*\n\n"
                text2 += "*‚îî* –í —Ç–∞–≤–µ—Ä–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç (–ø—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ –≤ –Ω–µ–π), –∫–≤–µ—Å—Ç—ã –¥–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ —Å–∞–º—ã–µ –æ–±—ã—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!\n\n"
                text2 += "*‚îå* *–ü–æ–¥–∑–µ–º–µ–ª—å—è üóª*\n\n"
                text2 += "*‚îî* –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏! –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –±–æ—Å—Å—ã, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!\n\n"
            else:
                text2  = '*‚ùó FAQ*\n\n'
                text2 += "*‚îå* *Rarities üéà*\n\n"
                text2 += "*‚îú* Events and dinosaurs are divided into rarities.The greater the rarity, the sweeter the reward.\n\n"
                text2 += "*‚îú* 1. Normal - 50%\n*‚îú* 2. Unusual - 25%\n*‚îú* 3. Rare - 15%\n*‚îú* 4. Mystical - 9%\n*‚îî* 5. Legendary - 1%\n\n"
                text2 += "*‚îå* *Interaction üïπ*\n\n"
                text2 += "*‚îú* To interact with dinozarv, pass in `üïπ Actions`.\n\n"
                text2 += "*‚îú* 1. In order to feed the dinosaur, you need to get food, click on `üïπ Actions` > `üçï Food Collection` and follow the instructions.\n\n"
                text2 += "*‚îú*  2. To feed the dinosaur, click on `üïπ Actions` > `üç£ Feed` and choose the appropriate food.\n\n"
                text2 += "*‚îú* 3. To improve the mood of the dinosaur, it is necessary to entertain the dinosaur from time to time. Go to `üïπ Actions` > `üéÆ Entertainment` and follow the instructions.\n\n"
                text2 += "*‚îú* 4. To renew the dinosaur's powers, send it to sleep, `üïπ Action` > `üåô Put to bed`\n\n"
                text2 += "*‚îî* 5. To improve mood, it is required to keep the need for iodine, games, sleep normal.\n\n"
                text2 += "*‚îå* *Profile üéÆ*\n\n"
                text2+= "*‚îî* To view inventory or find out your stats, go to `üëÅüó® Profile`\n\n"
                text2 += "*‚îå**Settings üîß*\n\n"
                text2 += "*‚îî*  In the settings, you can rename the dinosaur, disable notifications, or switch the language.\n\n"
                text2 += "*‚îå* *Food üçï*\n\n"
                text2 += "*‚îî* What kind of food will suit your dinosaur, you can find out by the background of the profile.\n\n"
                text2 += "*‚îå* *Market üõí*\n\n"
                text2 += "*‚îî* You can sell or buy the things you need on the market.\n\n"
                text2 += "*‚îå* *Accessories üèì*\n\n"
                text2 += "*‚îî* Accessories open up additional opportunities or accelerate the type of activity. Accessories can be installed while the dinosaur does nothing in the menu `üëÅ‚Äç Profile'`\n\n"
                text2 += "*‚îå**Friends üë•*\n\n"
                text2+= "*‚îî* In the friends menu, you can manage your friends and referral system. The more friends there are, the more opportunities there are to get some bonuses. Also, by inviting a friend through the referral system, you and your friend will receive pleasant bonuses.\n\n"
                text2 += "*‚îå* *Number of dinosaurs ü¶ï*\n\n"
                text2 += "*‚îú* Every 20th level the number of dinosaurs increases by 1.\n*‚îú* 20th level - 2 dinosaurs.\n*‚îî* 40th level - 3 dinosaurs...\n\n"
                text2 += "*‚îå* *Dino-tavern ‚Äçüç∫*\n\n"
                text2 += "*‚îî*Take a look at the `Dino-tavern`, there you can find out information from visitors, find other players. And also get quests!\n\n"
                text2 += "*‚îå* *Quests üìú*\n\n"
                text2 += "*‚îî* In the tavern you can get a quest (just wait in it), quests give interesting bonuses for the most ordinary actions!\n\n"
                text2 += "*‚îå* *Dungeons üóª*\n\n"
                text2 += "*‚îî* Embark on an exciting adventure with your friends! Adventures, bosses, unique items!\n\n"

            bot.send_message(message.chat.id, text2, parse_mode = 'Markdown')

    @staticmethod
    def not_set(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                ans = ['‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']
                text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π >'
            else:
                ans = ['‚úÖ Enable', '‚ùå Disable', '‚Ü™ Back']
                text = '‚ùó Interaction with notification settings, select notification activity >'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
            rmk.add(ans[0], ans[1])
            rmk.add(ans[2])

            def ret(message, ans, bd_user):

                if message.text not in ans or message.text == ans[2]:
                    res = None
                else:
                    res = message.text

                if res == None:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))
                    return

                if res in ['‚úÖ Enable', '‚úÖ –í–∫–ª—é—á–∏—Ç—å']:

                    bd_user['settings']['notifications'] = True
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!'
                    else:
                        text = 'üîß Notifications have been activated!'

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))

                if res in ['‚ùå Disable', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å']:

                    bd_user['settings']['notifications'] = False
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã!'
                    else:
                        text = 'üîß Notifications have been disabled!'

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))

                else:
                    return

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, ans, bd_user)

    @staticmethod
    def lang_set(bot, message, user, bd_user):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                ans = ['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', '‚Ü™ –ù–∞–∑–∞–¥']
                text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —è–∑—ã–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ >'
            else:
                ans = ['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', '‚Ü™ Back']
                text = '‚ùó Interaction with the language setting, select the language >'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
            rmk.add(ans[0], ans[1])
            rmk.add(ans[2])

            def ret(message, ans, bd_user):

                if message.text not in ans or message.text == ans[2]:
                    res = None
                else:
                    res = message.text

                if res == None:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))
                    return

                if res == ans[0]:
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'language_code': 'en' }} )
                if res == ans[1]:
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'language_code': 'ru' }} )
                bd_user = users.find_one({"userid": user.id})

                if bd_user['language_code'] == 'ru':
                    text = 'üîß –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ üá∑üá∫ –†—É—Å—Å–∫–∏–π!'
                else:
                    text = 'üîß The language is set to üá¨üáß English!'

                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, ans, bd_user)

    @staticmethod
    def dino_prof(bot, message, user):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            if len(bd_user['dinos']) > 1:
                for i in bd_user['dinos'].keys():
                    if i not in bd_user['activ_items'].keys():

                        users.update_one( {"userid": bd_user["userid"] }, {"$set": {f'activ_items.{i}': {'game': None, 'hunt': None, 'journey': None, 'unv': None} }} )
                        bd_user = users.find_one({"userid": user.id})

            if len(bd_user['dinos'].keys()) == 0:

                if bd_user['language_code'] == 'ru':
                    text = f'ü•ö | –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç—É –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —è–π—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω–∫—É–±–∏—Ä–æ–≤–∞—Ç—å!'
                else:
                    text = f"ü•ö | You don't have any dinosaurs at the moment, please check your inventory. You must have an egg in your inventory that you can incubate!"

                bot.send_message(message.chat.id, text)

            elif len(bd_user['dinos'].keys()) > 0:

                n_dp, dp_a = Functions.dino_pre_answer(bot, message)
                if n_dp == 1:

                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 1, user))
                    return

                if n_dp == 2:
                    bd_dino = dp_a
                    try:
                        Functions.p_profile(bot, message, bd_dino, user, bd_user, list(bd_user['dinos'].keys())[0])

                    except Exception as error:
                        print('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ2\n', error)

                        Functions.p_profile(bot, message, bd_dino, user, bd_user, list(bd_user['dinos'].keys())[0])

                if n_dp == 3:
                    rmk = dp_a[0]
                    text = dp_a[1]
                    dino_dict = dp_a[2]

                    def ret(message, dino_dict, user, bd_user):
                        if message.text in dino_dict.keys():
                            try:
                                Functions.p_profile(bot, message, dino_dict[message.text][0], user, bd_user, dino_dict[message.text][1])

                            except Exception as error:
                                print('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ1\n', error)

                                Functions.p_profile(bot, message, dino_dict[message.text][0], user, bd_user, dino_dict[message.text][1])

                        else:
                            bot.send_message(message.chat.id, '‚ùå', reply_markup = Functions.markup(bot, Functions.last_markup(bd_user), bd_user ))

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)

    @staticmethod
    def open_settings(bot, message, user, bd_user):

        if bd_user != None:
            settings = bd_user['settings']

            if 'vis.faq' not in settings.keys():
                settings['vis.faq'] = True

            if 'inv_view' not in settings.keys():
                settings['inv_view'] = [2, 3]

            if bd_user['language_code'] == 'ru':
                text = f'üîß –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {settings["notifications"]}\n–í–∏–¥–∏–º–æ—Å—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞: {settings["vis.faq"]}'.replace("True", '‚úî').replace("False", '‚ùå')

            else:
                text = f'üîß The settings menu is activated\n\nNotifications: {settings["notifications"]}\nFAQ: {settings["vis.faq"]}'.replace("True", '‚úî').replace("False", '‚ùå')

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'settings', user))

    @staticmethod
    def back_open(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = '‚Ü™ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            else:
                text = '‚Ü™ Return to the main menu'

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 1, user))

    @staticmethod
    def friends_open(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = 'üë• | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!'
            else:
                text = 'üë• | Redirecting to the friends menu!'

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "friends-menu", user))

    @staticmethod
    def settings_faq(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                ans = ['‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']
                text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ FAQ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å >'
            else:
                ans = ['‚úÖ Enable', '‚ùå Disable', '‚Ü™ Back']
                text = '‚ùó Interaction with the FAQ visibility setting, select visibility >'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
            rmk.add(ans[0], ans[1])
            rmk.add(ans[2])

            def ret(message, ans, bd_user):

                if message.text not in ans or message.text == ans[2]:
                    res = None
                else:
                    res = message.text

                if res == None:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))
                    return

                if res in ['‚úÖ Enable', '‚úÖ –í–∫–ª—é—á–∏—Ç—å']:

                    bd_user['settings']['vis.faq'] = True
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß FAQ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!'
                    else:
                        text = 'üîß The FAQ has been activated!'

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))

                if res in ['‚ùå Disable', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å']:

                    bd_user['settings']['vis.faq'] = False
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß FAQ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω!'
                    else:
                        text = 'üîß The FAQ has been disabled!'

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))

                else:
                    return

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, ans, bd_user)

    @staticmethod
    def inv_set_pages(bot, message, user, bd_user):

        if bd_user != None:

            gr, vr = bd_user['settings']['inv_view']

            if bd_user['language_code'] == 'ru':
                ans = ['2 | 3', '3 | 3', '2 | 2', '2 | 4', '‚Ü™ –ù–∞–∑–∞–¥']
                text = f'üéû –†–µ–∂–∏–º –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n‚ô† –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏: {gr}\n‚ô£ –ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: {vr}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–°—Ç–∞–Ω–¥–∞—Ä—Ç 2 | 3)'
            else:
                ans = ['2 | 3', '3 | 3', '2 | 2', '2 | 4', '‚Ü™ Back']
                text = f'üéû Current mode:\n‚ô† Horizontally: {gr}\n‚ô£ Vertically: {vr}\n\n Select the inventory display mode (Standard 2 | 3)'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
            rmk.add( *[ i for i in ans] )

            def ret(message, ans, bd_user):

                if message.text not in ans or message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                    res = None
                else:
                    res = message.text

                if res == None:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))
                    return

                vviw = res.split(' | ')
                v_list = []
                for i in vviw:
                    v_list.append(int(i))

                gr, vr = v_list

                if bd_user['language_code'] == 'ru':
                    text = f'‚ô† –ü–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏: {gr}\n‚ô£ –ü–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: {vr}'
                else:
                    text = f'‚ô† Horizontally: {gr}\n‚ô£ Vertically: {vr}'

                bd_user['settings']['inv_view'] = v_list
                users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))

                #
                #     bd_user['settings']['vis.faq'] = True
                #     users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                #
                #     if bd_user['language_code'] == 'ru':
                #         text = 'üîß FAQ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!'
                #     else:
                #         text = 'üîß The FAQ has been activated!'
                #
                #     bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))
                #
                # if res in ['‚ùå Disable', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å']:
                #
                #     bd_user['settings']['vis.faq'] = False
                #     users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                #
                #     if bd_user['language_code'] == 'ru':
                #         text = 'üîß FAQ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω!'
                #     else:
                #         text = 'üîß The FAQ has been disabled!'
                #
                #     bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "settings", user))
                #
                # else:
                #     return

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, ans, bd_user)

    @staticmethod
    def add_friend(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                text = '‚û° | –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ (–≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å > –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ), —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ –µ–≥–æ id (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ —É –±–æ—Ç–∞).\n–í–∞–∂–Ω–æ! –í–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ!'
            else:
                ans = ['‚Ü™ Back']
                text = '‚û° | Forward me any message from the person (in the privacy section > message forwarding - there must be permission) with whom you want to become friends or send me his id (you can find out in your bot profile).\nImportant! Your friend must be registered in the bot!'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
            rmk.add(ans[0])

            def ret(message, ans, bd_user):
                res = message

                if message.text in ans:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'friends-menu', user))
                    return

                try:
                    fr_id = int(res.text)
                except:

                    if res.text == ans[0] or res.forward_from == None:
                        bot.send_message(message.chat.id, f'‚ùå user forward not found', reply_markup = Functions.markup(bot, 'friends-menu', user))
                        fr_id = None

                    else:
                        fr_id = res.forward_from.id


                two_user = users.find_one({"userid": fr_id})

                if two_user == None:
                    bot.send_message(message.chat.id, f'‚ùå user not found in base', reply_markup = Functions.markup(bot, 'friends-menu', user))
                    return

                if two_user == bd_user:
                    bot.send_message(message.chat.id, f'‚ùå user == friend', reply_markup = Functions.markup(bot, 'friends-menu', user))

                else:

                    if 'friends_list' not in bd_user['friends']:
                        bd_user['friends']['friends_list'] = []
                        bd_user['friends']['requests'] = []
                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                    if 'friends_list' not in two_user['friends']:
                        two_user['friends']['friends_list'] = []
                        two_user['friends']['requests'] = []
                        users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                    if bd_user['userid'] not in two_user['friends']['requests'] and bd_user['userid'] not in two_user['friends']['friends_list'] and two_user['userid'] not in bd_user['friends']['requests']:

                        two_user['friends']['requests'].append(bd_user['userid'])
                        users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                        bot.send_message(message.chat.id, f'‚úî', reply_markup = Functions.markup(bot, 'friends-menu', user))
                        Functions.notifications_manager(bot, 'friend_request', two_user)

                    else:

                        if bd_user['language_code'] == 'ru':
                            text = f"üìú | –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö / –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –æ—Ç –≤–∞—Å!"

                        else:
                            text = f"üìú | This user is already a friend / has received a request from you!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'friends-menu', user))

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, ans, bd_user)

    @staticmethod
    def friends_list(bot, message, user, bd_user):

        if bd_user != None:

            friends_id = bd_user['friends']['friends_list']
            page = 1

            friends_name = []
            friends_id_d = {}

            if bd_user['language_code'] == 'ru':
                text = "üë• | –û–∂–∏–¥–∞–π—Ç–µ..."
            else:
                text = "üë• | Wait..."

            bot.send_message(message.chat.id, text)

            for i in friends_id:
                try:
                    if users.find_one({"userid": int(i)}) != None:
                        fr_name = bot.get_chat(int(i)).first_name
                        friends_name.append(fr_name)
                        friends_id_d[fr_name] = i
                except:
                    pass

            friends_chunks = list(Functions.chunks(list(Functions.chunks(friends_name, 2)), 3))

            def work_pr(message, friends_id, page, friends_chunks, friends_id_d, mms = None):
                global pages

                if bd_user['language_code'] == 'ru':
                    text = "üìú | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                else:
                    text = "üìú | Update..."

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                if friends_chunks == []:

                    if bd_user['language_code'] == 'ru':
                        text = "üë• | –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                    else:
                        text = "üë• | The list is empty!"

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'friends-menu', user))

                else:

                    for el in friends_chunks[page-1]:
                        if len(el) == 2:
                            rmk.add(el[0], el[1])
                        else:
                            rmk.add(el[0], ' ')

                    if 3 - len(friends_chunks[page-1]) != 0:
                        for i in list(range(3 - len(friends_chunks[page-1]))):
                            rmk.add(' ', ' ')

                    if len(friends_chunks) > 1:
                        if bd_user['language_code'] == 'ru':
                            com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                        else:
                            com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                        rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])
                    else:
                        if bd_user['language_code'] == 'ru':
                            com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                        else:
                            com_buttons = '‚Ü™ Back'

                        rmk.add(com_buttons)

                    def ret(message, bd_user, page, friends_chunks, friends_id, friends_id_d):
                        if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                            res = None
                        else:
                            res = message.text

                        if res == None:
                            if bd_user['language_code'] == 'ru':
                                text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                            else:
                                text = "üë• | Return to the friends menu!"

                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'friends-menu', user))

                        else:
                            mms = None
                            if res == '‚óÄ':
                                if page - 1 == 0:
                                    page = 1
                                else:
                                    page -= 1

                            if res == '‚ñ∂':
                                if page + 1 > len(friends_chunks):
                                    page = len(friends_chunks)
                                else:
                                    page += 1

                            else:
                                if res in list(friends_id_d.keys()):
                                    fr_id = friends_id_d[res]


                                    text = Functions.member_profile(bot, fr_id, bd_user['language_code'])

                                    try:
                                        mms = bot.send_message(message.chat.id, text, parse_mode = 'Markdown')
                                    except Exception as error:
                                        print(message.chat.id, 'ERROR –ü—Ä–æ—Ñ–∏–ª—å', '\n', error)
                                        mms = bot.send_message(message.chat.id, text)

                            work_pr(message, friends_id, page, friends_chunks, friends_id_d, mms = mms)

                    if mms == None:
                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    else:
                        msg = mms
                    bot.register_next_step_handler(msg, ret, bd_user, page, friends_chunks, friends_id, friends_id_d)

            work_pr(message, friends_id, page, friends_chunks, friends_id_d)

    @staticmethod
    def delete_friend(bot, message, user, bd_user):

        if bd_user != None:

            friends_id = bd_user['friends']['friends_list']
            page = 1
            friends_name = []
            id_names = {}

            for i in friends_id:
                try:
                    fr_name = bot.get_chat(int(i)).first_name
                    friends_name.append(fr_name)
                    id_names[bot.get_chat(int(i)).first_name] = i
                except:
                    pass

            friends_chunks = list(Functions.chunks(list(Functions.chunks(friends_name, 2)), 3))

            if friends_chunks == []:

                if bd_user['language_code'] == 'ru':
                    text = "üë• | –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                else:
                    text = "üë• | The list is empty!"

                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'friends-menu', user))
                return

            else:
                if bd_user['language_code'] == 'ru':
                    text = "‚ûñ | –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π > "
                else:
                    text = "‚ûñ | Select the user to remove from friends >"
                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'friends-menu', user))

            def work_pr(message, friends_id, page):

                if bd_user['language_code'] == 'ru':
                    text = "üíå | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                else:
                    text = "üíå | Update..."

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                for el in friends_chunks[page-1]:
                    if len(el) == 2:
                        rmk.add(el[0], el[1])
                    else:
                        rmk.add(el[0], ' ')

                if 3 - len(friends_chunks[page-1]) != 0:
                    for i in list(range(3 - len(friends_chunks[page-1]))):
                        rmk.add(' ', ' ')

                if len(friends_chunks) > 1:
                    if bd_user['language_code'] == 'ru':
                        com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                    else:
                        com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                    rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])
                else:
                    if bd_user['language_code'] == 'ru':
                        com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                    else:
                        com_buttons = '‚Ü™ Back'

                    rmk.add(com_buttons)

                def ret(message, friends_id, page, bd_user):
                    if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                        res = None
                    else:
                        res = message.text

                    if res == None:
                        if bd_user['language_code'] == 'ru':
                            text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                        else:
                            text = "üë• | Return to the friends menu!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'friends-menu', user))
                        return None
                    else:
                        if res == '‚óÄ':
                            if page - 1 == 0:
                                page = 1
                            else:
                                page -= 1

                        elif res == '‚ñ∂':
                            if page + 1 > len(friends_chunks):
                                page = len(friends_chunks)
                            else:
                                page += 1

                        else:
                            uid = id_names[res]

                            if bd_user['language_code'] == 'ru':
                                text = "üë• | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π!"
                            else:
                                text = "üë• | The user has been removed from friends!"

                            try:
                                bd_user['friends']['friends_list'].remove(uid)
                                users.update_one( {"userid": bd_user['userid']}, {"$pull": {'friends.friends_list': uid }} )

                            except:
                                pass

                            try:
                                users.update_one( {"userid": uid}, {"$pull": {'friends.friends_list': bd_user['userid'] }} )
                            except:
                                pass

                            if bd_user['friends']['friends_list'] == []:
                                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'friends-menu', user))
                                return
                            else:
                                bot.send_message(message.chat.id, text)

                    work_pr(message, friends_id, page)

                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                bot.register_next_step_handler(msg, ret, friends_id, page, bd_user)

            work_pr(message, friends_id, page)

    @staticmethod
    def open_profile_menu(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = 'üëÅ‚Äçüó® | –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–∫—Ä—ã—Ç–∞!'
            else:
                text = 'üëÅ‚Äçüó® | The profile panel is open!'

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "profile", user))

    @staticmethod
    def rayting(bot, message, user, bd_user):
        markup_inline = types.InlineKeyboardMarkup(row_width = 3)

        if bd_user['language_code'] == 'ru':
            text = 'üëÅ‚Äçüó® | –ö–∞–∫–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'

            inl_l = { 'üé¢ –£—Ä–æ–≤–µ–Ω—å': 'rayt_lvl', 'üóù –ú–æ–Ω–µ—Ç—ã': 'rayt_money', 'üóª –ü–æ–¥–∑–µ–º–µ–ª—å–µ': 'rayt_dungeon'
                    }

        else:
            text = 'üëÅ‚Äçüó® | What rating are you interested in?'

            inl_l = { 'üé¢ Level': 'rayt_lvl', 'üóù Coins': 'rayt_money', 'üóª Dungeon': 'rayt_dungeon'
                    }

        markup_inline.add( *[ types.InlineKeyboardButton( text = inl, callback_data = inl_l[inl]) for inl in inl_l.keys() ])

        bot.send_message(message.chat.id, text, reply_markup = markup_inline)

    @staticmethod
    def open_information(bot, message, user, bd_user):

        if bd_user != None:
            text = Functions.member_profile(bot, user.id, lang = bd_user['language_code'])

            try:
                bot.send_message(message.chat.id, text, parse_mode = 'Markdown')
            except Exception as error:
                print(message.chat.id, 'ERROR –ü—Ä–æ—Ñ–∏–ª—å', '\n', error)
                bot.send_message(message.chat.id, text)

    @staticmethod
    def open_action_menu(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = 'üïπ –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∞!'
            else:
                text = 'üïπ The action panel is open!'

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "actions", user))

    @staticmethod
    def open_dino_tavern(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = 'üç∫ –í—ã –≤–æ—à–ª–∏ –≤ –¥–∏–Ω–æ-—Ç–∞–≤–µ—Ä–Ω—É!\n\nüìú –í–æ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–∞–≤–µ—Ä–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–≤–µ—Å—Ç –∏–ª–∏ —É—Å–ª—ã—à–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!'
                text2 = 'üç∫ –î—Ä—É–∑—å—è –≤ —Ç–∞–≤–µ—Ä–Ω–µ: –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ —Ç–æ–ª–ø—ã...'
            else:
                text = 'üç∫ You have entered the dino-tavern!\n\nüìú While staying in the tavern, you can get a quest or hear useful information!'
                text2 = 'üç∫ Friends in the tavern: Search among the crowd...'

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "dino-tavern", user))
            msg = bot.send_message(message.chat.id, text2)

            if bd_user['language_code'] == 'ru':
                text = 'üç∫ –î—Ä—É–∑—å—è –≤ —Ç–∞–≤–µ—Ä–Ω–µ: '
            else:
                text = 'üç∫ Friends in the tavern: '

            fr_in_tav = []

            for fr_id in bd_user['friends']['friends_list']:
                fr_user = users.find_one({"userid": fr_id})
                if fr_user != None:

                    if 'last_markup' in fr_user['settings'].keys() and fr_user['settings']['last_markup'] == 'dino-tavern':

                        fr_in_tav.append(fr_user)

            if fr_in_tav == []:

                text += '‚ùå'

            else:
                text += '\n'
                for fr_user in fr_in_tav:
                    fr_tel = bot.get_chat(fr_user['userid'])
                    if fr_tel != None:
                        text += f' ‚óè {fr_tel.first_name}\n'

            bot.edit_message_text(text = text, chat_id = msg.chat.id, message_id = msg.message_id)

            for fr_user in fr_in_tav:

                if fr_user['language_code'] == 'ru':
                    text = f'üç∫ {user.first_name} –∑–∞—à—ë–ª –≤ —Ç–∞–≤–µ—Ä–Ω—É...'
                else:
                    text = f'üç∫ {user.first_name} went into the tavern...'

                time.sleep(0.5)
                bot.send_message(fr_user['userid'], text)

    @staticmethod
    def dino_action_ans(bot, message, user, bd_user):

        if bd_user != None:
            if bd_user['language_code'] == 'ru':
                did = int(message.text[12:])
            else:
                did = int(message.text[8:])

            if did == int(bd_user['settings']['dino_id']):
                ll = list(bd_user['dinos'].keys())
                ind = list(bd_user['dinos'].keys()).index(str(did))

                if ind + 1 != len(ll):
                    bd_user['settings']['dino_id'] = ll[ind + 1]

                else:
                    bd_user['settings']['dino_id'] = ll[0]

                users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                if bd_user['language_code'] == 'ru':
                    if bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['status'] == 'incubation':
                        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ ü•ö"
                    else:
                        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ {bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['name']}"
                else:
                    if bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['status'] == 'incubation':
                        text = f"You have chosen ü•ö"
                    else:
                        text = f"You have chosen a dinosaur {bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['name']}"

                bot.send_message(message.chat.id, text , reply_markup = Functions.markup(bot, 'actions', user))

    @staticmethod
    def action_back(bot, message, user, bd_user):

        if bd_user['language_code'] == 'ru':
            text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
        else:
            text = '‚Ü© Return to the activity menu'

        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))

    @staticmethod
    def rename_dino(bot, message, user, bd_user):

        if bd_user != None:
            n_dp, dp_a = Functions.dino_pre_answer(bot, message)

            if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['status'] == 'dino':

                def rename(message, bd_user, user, dino_user_id, dino):
                    if bd_user['language_code'] == 'ru':
                        text = f"ü¶ñ | –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è {dino['name']}\n–†–∞–∑–º–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤\n>"
                        ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                    else:
                        text = f"ü¶ñ | Enter a new name for {dino['name']}\nSize: no more than 20 characters\n>"
                        ans = ['‚Ü™ Back']

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0])

                    def ret(message, ans, bd_user):
                        if message.text == ans[0]:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))
                            return

                        dino_name = message.text.replace('*', '').replace('`', '')

                        if len(dino_name) > 20:

                            if bd_user['language_code'] == 'ru':
                                text = f"ü¶ñ | –ù–æ–≤–æ–µ –∏–º—è –±–æ–ª—å—à–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!"
                            else:
                                text = f"ü¶ñ | The new name is more than 20 characters!"

                            msg = bot.send_message(message.chat.id, text)

                        else:
                            if bd_user['language_code'] == 'ru':
                                text = f"ü¶ñ | –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å {dino['name']} > {dino_name}?"
                                ans2 = ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '‚Ü™ –ù–∞–∑–∞–¥']
                            else:
                                text = f"ü¶ñ | Rename {dino['name']} > {dino_name}?"
                                ans2 = ['‚úÖ Confirm', '‚Ü™ Back']

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                            rmk.add(ans2[0])
                            rmk.add(ans2[1])

                            def ret2(message, ans2, bd_user):
                                if message.text == ans2[1]:
                                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))
                                    return
                                else:
                                    res = message.text

                                if res in ['‚úÖ Confirm', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é']:

                                    bd_user['dinos'][str(dino_user_id)]['name'] = dino_name
                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{dino_user_id}': bd_user['dinos'][str(dino_user_id)] }} )

                                    bot.send_message(message.chat.id, f'‚úÖ', reply_markup = Functions.markup(bot, 'settings', user))

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret2, ans2, bd_user)

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, ans, bd_user)

                if n_dp == 1:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))
                    return

                if n_dp == 2:
                    bd_dino = dp_a
                    rename(message, bd_user, user, list(bd_user['dinos'].keys())[0], dp_a)

                if n_dp == 3:
                    rmk = dp_a[0]
                    text = dp_a[1]
                    dino_dict = dp_a[2]

                    def ret(message, dino_dict, user, bd_user):
                        if message.text not in dino_dict.keys():
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'settings', user))

                        else:
                            rename(message, bd_user, user, dino_dict[message.text][1], dino_dict[message.text][0])

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)

    @staticmethod
    def dino_sleep_ac(bot, message, user, bd_user):

        if bd_user != None:
            dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

            if dino != None:
                if dino['activ_status'] == 'pass_active':
                    if dino['stats']['unv'] >= 90:

                        if bd_user['language_code'] == 'ru':
                            text = 'üåô –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å!'
                        else:
                            text = "üåô The dinosaur doesn't want to sleep!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "actions", user))

                    else:
                        def dl_sleep(bd_user, message):
                            d_id = bd_user['settings']['dino_id']
                            bd_user['dinos'][ d_id ]['activ_status'] = 'sleep'
                            bd_user['dinos'][ d_id ]['sleep_start'] = int(time.time())
                            bd_user['dinos'][ d_id ]['sleep_type'] = 'long'
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

                            if bd_user['language_code'] == 'ru':
                                text = 'üåô –í—ã —É–ª–æ–∂–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Å–ø–∞—Ç—å!'
                            else:
                                text = "üåô You put the dinosaur to sleep!"

                            bot.send_message(message.chat.id, text , reply_markup = Functions.markup(bot, 'actions', user))

                        if Functions.acc_check(bot, bd_user, '16', bd_user['settings']['dino_id'], True) == False:
                            dl_sleep(bd_user, message)

                        else:

                            if bd_user['language_code'] == 'ru':
                                ans = ['üõå –î–ª–∏–Ω–Ω—ã–π —Å–æ–Ω', 'üõå –ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω', '‚Ü™ –ù–∞–∑–∞–¥']
                                text = 'üåô | –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–Ω–∞ –¥–ª—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ >'
                            else:
                                ans = ['üõå Long Sleep', 'üõå Short Sleep', '‚Ü™ Back']
                                text = 'üåô | Choose the type of sleep for the dinosaur >'

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                            rmk.add(ans[0], ans[1])
                            rmk.add(ans[2])

                            def ret(message, ans, bd_user):

                                if message.text not in ans or message.text == ans[2]:
                                    res = None
                                else:
                                    res = message.text

                                if res == None:
                                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'actions', user))
                                    return

                                if res in ['üõå –î–ª–∏–Ω–Ω—ã–π —Å–æ–Ω', 'üõå Long Sleep']:

                                    dl_sleep(bd_user, message)

                                if res in ['üõå –ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω', 'üõå Short Sleep']:

                                    def ret2(message, ans, bd_user):

                                        if message.text == ans[0]:
                                            number = None
                                        else:

                                            try:
                                                number = int(message.text)
                                            except:
                                                number = None


                                        if number == None:
                                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'actions', user))
                                            return

                                        if number <= 5 or number > 480:

                                            if bd_user['language_code'] == 'ru':
                                                text = '‚ùå | –¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –±–æ–ª—å—à–µ 5-—Ç–∏ –º–∏–Ω—É—Ç –∏ –º–µ–Ω—å—à–µ 8-–º–∏ —á–∞—Å–æ–≤ (480)!'
                                            else:
                                                text = '‚ùå | It was required to specify the time in minutes more than 5 minutes and less than 8 hours (480)!'

                                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))

                                        else:
                                            d_id = bd_user['settings']['dino_id']
                                            bd_user['dinos'][ d_id ]['activ_status'] = 'sleep'
                                            bd_user['dinos'][ d_id ]['sleep_time'] = int(time.time()) + number * 60
                                            bd_user['dinos'][ d_id ]['sleep_type'] = 'short'
                                            users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

                                            if bd_user['language_code'] == 'ru':
                                                text = 'üåô –í—ã —É–ª–æ–∂–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Å–ø–∞—Ç—å!'
                                            else:
                                                text = "üåô You put the dinosaur to sleep!"

                                            bot.send_message(message.chat.id, text , reply_markup = Functions.markup(bot, 'actions', user))



                                    if bd_user['language_code'] == 'ru':
                                        ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                                        text = 'üåô | –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–Ω–∞ (—Å–æ–Ω –∏–¥—ë—Ç –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ –¥–ª–∏–Ω–Ω–æ–≥–æ) –≤ –º–∏–Ω—É—Ç–∞—Ö > '
                                    else:
                                        ans = ['‚Ü™ Back']
                                        text = 'üåô | Specify the REM sleep time (sleep is 2 times faster than long sleep) in minutes >'

                                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                    rmk.add(ans[0])

                                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                    bot.register_next_step_handler(msg, ret2, ans, bd_user)


                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, ans, bd_user)



                else:

                    if bd_user['language_code'] == 'ru':
                        text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

                    else:
                        text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

                    bot.send_message(message.chat.id, text, reply_markup = Functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))

    @staticmethod
    def dino_unsleep_ac(bot, message, user, bd_user):

        if bd_user != None:
            d_id = str(bd_user['settings']['dino_id'])
            dino = bd_user['dinos'][ str(d_id) ]

            if dino['activ_status'] == 'sleep' and dino != None:
                r_n = random.randint(0, 20)
                bd_user['dinos'][ d_id ]['activ_status'] = 'pass_active'

                if 'sleep_type' in bd_user['dinos'][ d_id ] and bd_user['dinos'][ d_id ]['sleep_type'] == 'short':

                    del bd_user['dinos'][ d_id ]['sleep_time']

                    if bd_user['language_code'] == 'ru':
                        text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è.'
                    else:
                        text = f"üåô Your dinosaur has awakened."

                    bot.send_message(message.chat.id, text , reply_markup = Functions.markup(bot, 'actions', user))

                    try:
                        del bd_user['dinos'][ d_id ]['sleep_type']
                    except:
                        pass

                    try:
                        del bd_user['dinos'][ d_id ]['sleep_start']
                    except:
                        pass

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

                elif 'sleep_type' not in bd_user['dinos'][ d_id ] or bd_user['dinos'][ d_id ]['sleep_type'] == 'long':

                    if 'sleep_start' in bd_user['dinos'][ d_id ].keys() and int(time.time()) - bd_user['dinos'][ d_id ]['sleep_start'] >= 8 * 3600:

                        if bd_user['language_code'] == 'ru':
                            text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è.'
                        else:
                            text = f"üåô Your dinosaur has awakened."

                        bot.send_message(message.chat.id, text , reply_markup = Functions.markup(bot, 'actions', user))

                    else:

                        bd_user['dinos'][ d_id ]['stats']['mood'] -= r_n

                        if bd_user['dinos'][ d_id ]['stats']['mood'] < 0:
                            bd_user['dinos'][ d_id ]['stats']['mood'] = 0

                        if bd_user['language_code'] == 'ru':
                            text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è. –û–Ω —Å–∏–ª—å–Ω–æ –Ω–µ –¥–æ–≤–æ–ª–µ–Ω —á—Ç–æ –≤—ã –µ–≥–æ —Ä–∞–∑–±—É–¥–∏–ª–∏!\n–î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ—Ç–µ—Ä—è–ª {r_n}% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.'
                        else:
                            text = f"üåô Your dinosaur has awakened. He is very unhappy that you woke him up!\nDinosaur lost {r_n}% of mood."

                        bot.send_message(message.chat.id, text , reply_markup = Functions.markup(bot, 'actions', user))

                    try:
                        del bd_user['dinos'][ d_id ]['sleep_type']
                    except:
                        pass

                    try:
                        del bd_user['dinos'][ d_id ]['sleep_start']
                    except:
                        pass

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

            else:
                bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'actions', user))

    @staticmethod
    def dino_journey(bot, message, user, bd_user):

        if bd_user != None:
            dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

            if dino['activ_status'] == 'pass_active' and dino != None:
                markup_inline = types.InlineKeyboardMarkup()

                if bd_user['language_code'] == 'ru':
                    text = 'üå≥ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?'

                    item_0 = types.InlineKeyboardButton( text = '10 –º–∏–Ω.', callback_data = f"10min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_1 = types.InlineKeyboardButton( text = '30 –º–∏–Ω.', callback_data = f"30min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_2 = types.InlineKeyboardButton( text = '60 –º–∏–Ω.', callback_data = f"60min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_3 = types.InlineKeyboardButton( text = '90 –º–∏–Ω.', callback_data = f"90min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_4 = types.InlineKeyboardButton( text = '120 –º–∏–Ω.', callback_data = f"12min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_5 = types.InlineKeyboardButton( text = '240 –º–∏–Ω.', callback_data = f"24min_journey_{str(bd_user['settings']['dino_id'])}")

                else:
                    text = "üå≥ How long to send a dinosaur on a journey?"

                    item_0 = types.InlineKeyboardButton( text = '10 min.', callback_data = f"10min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_1 = types.InlineKeyboardButton( text = '30 min.', callback_data = f"30min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_2 = types.InlineKeyboardButton( text = '60 min.', callback_data = f"60min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_3 = types.InlineKeyboardButton( text = '90 min.', callback_data = f"90min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_4 = types.InlineKeyboardButton( text = '120 min.', callback_data = f"12min_journey_{str(bd_user['settings']['dino_id'])}")

                    item_5 = types.InlineKeyboardButton( text = '240 min.', callback_data = f"24min_journey_{str(bd_user['settings']['dino_id'])}")

                markup_inline.add(item_0, item_1, item_2, item_3, item_4)
                markup_inline.add(item_5)

                bot.send_message(message.chat.id, text, reply_markup = markup_inline)

            else:

                if bd_user['language_code'] == 'ru':
                    text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

                else:
                    text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

                bot.send_message(message.chat.id, text, reply_markup = Functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))

    @staticmethod
    def dino_unjourney(bot, message, user, bd_user):

        if bd_user != None:
            dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

            if dino['activ_status'] == 'journey' and dino != None:
                if random.randint(1,2) == 1:

                    dino_id = bd_user['settings']['dino_id']

                    Functions.journey_end_log(bot, bd_user['userid'], dino_id)

                    bd_user['dinos'][ dino_id ]['activ_status'] = 'pass_active'

                    del bd_user['dinos'][ dino_id ]['journey_time']
                    del bd_user['dinos'][ dino_id ]['journey_log']

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {f"dinos.{dino_id}": bd_user['dinos'][dino_id] }} )


                else:
                    if bd_user['language_code'] == 'ru':
                        text = f'üîá | –í—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'
                    else:
                        text = f"üîá | You tried to bring the dinosaur back, but something went wrong..."

                    bot.send_message(message.chat.id, text , reply_markup = Functions.markup(bot, 'actions', user))
            else:
                bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'actions', user))

    @staticmethod
    def dino_entert(bot, message, user, bd_user):

        if bd_user != None:
            dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

            if dino['activ_status'] in ['pass_active', 'game']:

                if bd_user['language_code'] == 'ru':
                    text = f"üéÆ | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!"

                else:
                    text = f"üéÆ | Redirecting to the entertainment menu!"

                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'games', user))

            else:

                if bd_user['language_code'] == 'ru':
                    text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

                else:
                    text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

                bot.send_message(message.chat.id, text, reply_markup = Functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))

    @staticmethod
    def dino_entert_games(bot, message, user, bd_user):

        if bd_user != None:
            dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]
            if dino['activ_status'] == 'pass_active':

                markup_inline = types.InlineKeyboardMarkup(row_width=2)

                if bd_user['language_code'] == 'ru':
                    text = ['15 - 30 –º–∏–Ω.', '30 - 60 –º–∏–Ω.', '60 - 90 –º–∏–Ω.']
                    m_text = 'üéÆ –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã > '
                else:
                    text = ['15 - 30 min.', '30 - 60 min.', '60 - 90 min.']
                    m_text = 'üéÆ Specify the allowed game time >'

                if message.text in ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'üéÆ Console']:
                    g = 'con'
                elif message.text in ['ü™Å –ó–º–µ–π', 'ü™Å Snake']:
                    g = 'sna'
                elif message.text in ['üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèì Ping Pong']:
                    g = 'pin'
                elif message.text in ['üèê –ú—è—á', 'üèê Ball']:
                    g = 'bal'

                else:
                    if Functions.acc_check(bot, bd_user, '44', str(bd_user['settings']['dino_id']), True):

                        if message.text in ['üß© –ü–∞–∑–ª—ã', 'üß© Puzzles']:
                            g = 'puz'
                        elif message.text in ['‚ôü –®–∞—Ö–º–∞—Ç—ã', '‚ôü Chess']:
                            g = 'che'
                        elif message.text in ['üß± Jenga', 'üß± –î–∂–µ–Ω–≥–∞']:
                            g = 'jen'
                        elif message.text in ['üé≤ D&D']:
                            g = 'ddd'

                    else:
                        return

                item_1 = types.InlineKeyboardButton( text = text[0], callback_data = f"1_{g}_game_{str(bd_user['settings']['dino_id'])}")
                item_2 = types.InlineKeyboardButton( text = text[1], callback_data = f"2_{g}_game_{str(bd_user['settings']['dino_id'])}")
                item_3 = types.InlineKeyboardButton( text = text[2], callback_data = f"3_{g}_game_{str(bd_user['settings']['dino_id'])}")
                markup_inline.add(item_1, item_2, item_3)

                bot.send_message(message.chat.id, m_text, reply_markup = markup_inline)

    @staticmethod
    def dino_stop_games(bot, message, user, bd_user):

        if bd_user != None:
            dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]
            if dino['activ_status'] == 'game':

                if dino['game_%'] == 1:
                    rt = random.randint(1,3)

                if dino['game_%'] == 0.5:
                    rt = 1

                if dino['game_%'] == 0.9:
                    rt = random.randint(1,2)

                if rt == 1:

                    if dino['game_%'] == 1:
                        bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['stats']['mood'] -= 20

                        if bd_user['language_code'] == 'ru':
                            text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å, –Ω–æ –≤—ã –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏, –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–æ –Ω–∞ 20%!"

                        else:
                            text = f"üéÆ | The dinosaur liked to play, but you stopped him, his mood is reduced by 20%!"

                    if dino['game_%'] == 0.5:

                        if bd_user['language_code'] == 'ru':
                            text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ –æ—Å–æ–±–æ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å, –æ–Ω –Ω–µ —Ç–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ..."

                        else:
                            text = f"üéÆ | The dinosaur didn't really like playing, he doesn't lose his mood..."

                    if dino['game_%'] == 0.9:
                        bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['stats']['mood'] -= 5

                        if bd_user['language_code'] == 'ru':
                            text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω —á—Ç–æ –≤—ã –µ–≥–æ –æ—Ç–≤–ª–µ–∫–ª–∏, –æ–Ω —Ç–µ—Ä—è–µ—Ç 5% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è..."

                        else:
                            text = f"üéÆ | The dinosaur is a little upset that you distracted him, he loses 5% of his mood..."

                    dino_id = str(bd_user['settings']['dino_id'])

                    game_time = (int(time.time()) - bd_user['dinos'][ dino_id ]['game_start']) // 60

                    Dungeon.check_quest(bot, bd_user, met = 'check', quests_type = 'do', kwargs = {'dp_type': 'game', 'act': game_time } )

                    bd_user['dinos'][ dino_id ]['activ_status'] = 'pass_active'

                    try:
                        del bd_user['dinos'][ dino_id ]['game_time']
                        del bd_user['dinos'][ dino_id ]['game_%']
                        del bd_user['dinos'][ dino_id ]['game_start']
                    except:
                        pass

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{dino_id}': bd_user['dinos'][dino_id] }} )

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'games', user))

                else:

                    if bd_user['language_code'] == 'ru':
                        text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ—Ä–≤–∞—Ç—å –æ—Ç –∏–≥—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, –¥–∏–Ω–æ–∑–∞–≤—Ä –±—É–¥–µ—Ç —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω."

                    else:
                        text = f"üéÆ | It is impossible to tear the dinosaur away from the game, try again. Keep in mind, the dinosaur will be upset."

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'games', user))

    @staticmethod
    def dino_feed(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'sleep':

                if bd_user['language_code'] == 'ru':
                    text = '–í–æ –≤—Ä–µ–º—è —Å–Ω–∞ –Ω–µ–ª—å–∑—è –∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞.'
                else:
                    text = 'During sleep, you can not feed the dinosaur.'

                bot.send_message(message.chat.id, text)
                return

            nitems = bd_user['inventory']

            if nitems == []:

                if bd_user['language_code'] == 'ru':
                    text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                else:
                    text = 'Inventory is empty.'

                bot.send_message(message.chat.id, text)
                return

            data_items = items_f['items']
            items = []
            items_id = {}
            page = 1
            items_names = []

            for i in nitems:
                if data_items[str(i['item_id'])]['type'] == "+eat":
                    items.append(i)

            if items == []:

                if bd_user['language_code'] == 'ru':
                    text = 'ü•û | –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.'
                else:
                    text = 'ü•û | There are no food items in the inventory.'

                bot.send_message(message.chat.id, text)
                return


            if bd_user['language_code'] == 'ru':
                lg = "nameru"
            else:
                lg = "nameen"

            for i in items:
                if Functions.item_authenticity(i) == True:
                    items_id[ items_f['items'][ i['item_id'] ][lg] ] = i
                    items_names.append( items_f['items'][ i['item_id'] ][lg] )

                else:

                    items_id[ items_f['items'][ i['item_id'] ][lg] + f" ({Functions.qr_item_code(i, False)})" ] = i
                    items_names.append( items_f['items'][ i['item_id'] ][lg] + f" ({Functions.qr_item_code(i, False)})" )

            items_names.sort()

            items_sort = []
            d_it_sort = {}
            ind_sort_it = {}

            for i in items_names:
                if i in list(d_it_sort.keys()):
                    d_it_sort[i] += 1
                else:
                    d_it_sort[i] = 1

            for n in list(d_it_sort.keys()):
                col = d_it_sort[n]
                name = n

                items_sort.append(f'{n} x{col}')
                ind_sort_it[f'{n} x{col}'] = n

            pages = list(Functions.chunks(list(Functions.chunks(items_sort, 2)), 3))

            for i in pages:
                for ii in i:
                    if len(ii) == 1:
                        ii.append(' ')

                if len(i) != 3:
                    for iii in range(3 - len(i)):
                        i.append([' ', ' '])

            def work_pr(message, pages, page, items_id, ind_sort_it):
                global l_pages, l_page, l_ind_sort_it

                l_pages = pages
                l_page = page
                l_ind_sort_it = ind_sort_it

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                for i in pages[page-1]:
                    rmk.add(i[0], i[1])

                if len(pages) > 1:
                    if bd_user['language_code'] == 'ru':
                        com_buttons = ['‚óÄ', '‚Ü© –ù–∞–∑–∞–¥', '‚ñ∂']
                        textt = 'üçï | –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
                    else:
                        com_buttons = ['‚óÄ', '‚Ü© Back', '‚ñ∂']
                        textt = 'üçï | Choose what you want to feed the dinosaur >'

                    rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                else:
                    if bd_user['language_code'] == 'ru':
                        com_buttons = '‚Ü© –ù–∞–∑–∞–¥'
                        textt = 'üçï | –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
                    else:
                        textt = 'üçï | Choose what you want to feed the dinosaur >'
                        com_buttons = '‚Ü© Back'

                    rmk.add(com_buttons)

                def ret(message, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it):
                    if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                        res = None

                    else:
                        if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂']:
                            res = message.text
                        else:
                            res = None


                    if res == None:
                        if bd_user['language_code'] == 'ru':
                            text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
                        else:
                            text = "üë• | Return to the friends menu!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))
                        return '12'
                    else:
                        if res == '‚óÄ':
                            if page - 1 == 0:
                                page = 1
                            else:
                                page -= 1

                            work_pr(message, pages, page, items_id, ind_sort_it)

                        elif res == '‚ñ∂':
                            if page + 1 > len(l_pages):
                                page = len(l_pages)
                            else:
                                page += 1

                            work_pr(message, pages, page, items_id, ind_sort_it)

                        else:
                            item_id = items_id[ l_ind_sort_it[res] ]['item_id']
                            user_item = items_id[ l_ind_sort_it[res] ]
                            item = items_f['items'][item_id]

                            bd_dino = bd_user['dinos'][ bd_user['settings']['dino_id'] ]
                            d_dino = json_f['elements'][ str(bd_dino['dino_id']) ]
                            col = 1
                            mx_col = 0
                            for item_c in bd_user['inventory']:
                                if item_c == user_item:
                                    mx_col += 1

                            if bd_user['language_code'] == 'ru':
                                text_col = f"üßÄ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ >"
                            else:
                                text_col = f"üßÄ | Enter the number of uses or select it from the list >"

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                            col_to_full = int( (100 - bd_dino['stats']['eat']) / item['act'])
                            bt_3 = None

                            if col_to_full > mx_col:
                                col_to_full = mx_col

                            bt_1 = f"{bd_dino['stats']['eat'] + item['act']}% = {item['nameru'][:1]} x1"
                            bt_2 = f"{bd_dino['stats']['eat'] + item['act'] * col_to_full}% = {item['nameru'][:1]} x{col_to_full}"

                            col_l = [[], [1, col_to_full]]

                            col_l[0].append(bt_1), col_l[0].append(bt_2)

                            if bd_dino['stats']['eat'] + item['act'] * col_to_full < 100:

                                bt_3 = f"{100}% = {item['nameru'][:1]} x{col_to_full+1}"

                                col_l[0].append(bt_3)
                                col_l[1].append(col_to_full+1)

                            if col_to_full == 1:

                                if bt_3 != None:
                                    rmk.add(bt_1, bt_3)

                                else:
                                    rmk.add(bt_1)

                            elif col_to_full != 1 and col_to_full != 0:

                                if bt_3 != None:
                                    rmk.add(bt_1, bt_2, bt_3)

                                else:
                                    rmk.add(bt_1, bt_2)

                            if bd_user['language_code'] == 'ru':
                                rmk.add('‚Ü© –ù–∞–∑–∞–¥')
                            else:
                                rmk.add('‚Ü© Back')


                            def corm(message, bd_user, user_item, item, d_dino, mx_col, col_l):

                                if message.text in ['‚Ü© Back', '‚Ü© –ù–∞–∑–∞–¥']:

                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
                                    else:
                                        text = "üë• | Return to the friends menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))
                                    return '12'

                                try:
                                    col = int(message.text)
                                except:
                                    if message.text in col_l[0]:
                                        col = col_l[1][ col_l[0].index(message.text) ]

                                    else:

                                        if bd_user['language_code'] == 'ru':
                                            text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
                                        else:
                                            text = f"Enter the correct number!"

                                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))
                                        return

                                if col < 1:

                                    if bd_user['language_code'] == 'ru':
                                        text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
                                    else:
                                        text = f"Enter the correct number!"

                                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))
                                    return

                                if 'abilities' in user_item.keys():
                                    if 'uses' in user_item['abilities'].keys():
                                        if col > user_item['abilities']['uses']:

                                            if bd_user['language_code'] == 'ru':
                                                text = f"–î–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑!"
                                            else:
                                                text = f"This item cannot be used so many times!"

                                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))
                                            return

                                if 'abilities' not in user_item.keys() or 'uses' not in user_item['abilities'].keys():

                                    if col > mx_col:

                                        if bd_user['language_code'] == 'ru':
                                            text = f"–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
                                        else:
                                            text = f"You don't have that many items in your inventory!"

                                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))

                                        return


                                if bd_user['language_code'] == 'ru':
                                    if item['class'] == 'ALL':

                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                        text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {item['nameru']}!\n–î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç –Ω–∞ {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"


                                    elif item['class'] == d_dino['class']:
                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                        text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {item['nameru']}!\n–î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç –Ω–∞ {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"


                                    else:
                                        eatr = random.randint( 0, int(item['act'] / 2) )
                                        moodr = random.randint( 1, 10 )
                                        text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ –ø–æ –≤–∫—É—Å—É {item['nameru']}, –æ–Ω —Ç–µ—Ä—è–µ—Ç {eatr}% —Å—ã—Ç–æ—Å—Ç–∏ –∏ {moodr}% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!"

                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] -= eatr
                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= moodr

                                else:
                                    if item['class'] == 'ALL':

                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                        text = f"üçï | The dinosaur ate it with pleasure {item['nameen']}!\nThe dinosaur is fed up on {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"

                                    elif item['class'] == d_dino['class']:

                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                        text = f"üçï | The dinosaur ate it with pleasure {item['nameen']}!\nThe dinosaur is fed up on {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"

                                    else:
                                        eatr = random.randint( 0, int(item['act'] / 2) )
                                        moodr = random.randint( 1, 10 )
                                        text = f"üçï | The dinosaur doesn't like {item['nameen']}, it loses {eatr}% satiety and {mood}% mood!"

                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] -= eatr
                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= moodr

                                if '+mood' in item.keys():
                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] += item['+mood'] * col

                                if '-mood' in item.keys():
                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= item['-mood'] * col

                                users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{bd_user["settings"]["dino_id"]}': bd_user['dinos'][ bd_user['settings']['dino_id'] ] }} )

                                if 'abilities' in user_item.keys():
                                    if 'uses' in user_item['abilities'].keys():

                                        if user_item['abilities']['uses'] != -100:

                                            s_col = user_item['abilities']['uses'] - col

                                            if s_col > 0:
                                                users.update_one( {"userid": user.id}, {"$set": {f'inventory.{bd_user["inventory"].index(user_item)}.abilities.uses': user_item['abilities']['uses'] - col}} )

                                            else:
                                                bd_user['inventory'].remove(user_item)
                                                users.update_one( {"userid": user.id}, {"$set": {'inventory': bd_user['inventory'] }} )

                                else:

                                    for i in range(col):
                                        bd_user['inventory'].remove(user_item)

                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))

                                Dungeon.check_quest(bot, bd_user, met = 'check', quests_type = 'do', kwargs = {'dp_type': 'feed', 'act': col, 'item': str(item_id) } )

                            msg = bot.send_message(message.chat.id, text_col, reply_markup = rmk)
                            bot.register_next_step_handler(msg, corm, bd_user, user_item, item, d_dino, mx_col, col_l)

                msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it)

            work_pr(message, pages, page, items_id, ind_sort_it)

    @staticmethod
    def collecting_food(bot, message, user, bd_user):

        eat_c = Functions.items_counting(bd_user, '+eat')
        if eat_c >= 300:

            if bd_user['language_code'] == 'ru':
                text = f'üå¥ | –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ª–æ–º–∏—Ç—Å—è –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥—ã! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å {eat_c} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å!'
            else:
                text = f'üå¥ | Your inventory is bursting with the amount of food! At the moment you have {eat_c} items that can be eaten!'

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))
            return

        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'pass_active':

            if bd_user['language_code'] == 'ru':
                bbt = ['üåø | –°–æ–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–æ', 'üçñ | –û—Ö–æ—Ç–∞', 'üç§ | –†—ã–±–∞–ª–∫–∞', 'ü•ó | –í—Å–µ –≤–º–µ—Å—Ç–µ', '‚Ü© –ù–∞–∑–∞–¥']
                text = 'üå¥ | –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±—ã—á–∏ –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è >'
            else:
                bbt = ['üåø | Collecting', 'üçñ | Hunting', 'üç§ | Fishing', 'ü•ó | All together', '‚Ü© Back']
                text = 'üå¥ | Choose a way to get food >'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
            rmk.add(bbt[0], bbt[1])
            rmk.add(bbt[2], bbt[3])
            rmk.add(bbt[4])

            def ret(message, ans, bd_user):

                if message.text not in ans or message.text == ans[4]:
                    res = None
                else:
                    res = message.text

                if res == None:
                    if bd_user['language_code'] == 'ru':
                        text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                    else:
                        text = '‚Ü© Return to the activity menu'

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))

                else:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚Ü© –ù–∞–∑–∞–¥']
                        text = 'üçΩ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä >'
                    else:
                        ans = ['‚Ü© Back']
                        text = 'üçΩ | Enter the number of products that the dinosaur must collect >'

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0])

                    def ret2(message, ans, bd_user):
                        number = message.text
                        try:
                            number = int(number)
                            if number <= 0 or number >= 101:
                                if bd_user['language_code'] == 'ru':
                                    text = '0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!'
                                else:
                                    text = '0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | Enter a number from 1 to 100!'

                                bot.send_message(message.chat.id, text)
                                number = None
                        except:
                            number = None

                        if number == None:
                            if bd_user['language_code'] == 'ru':
                                text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                            else:
                                text = '‚Ü© Return to the activity menu'

                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))

                        else:
                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] = 'hunting'
                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'] = [0, number]

                            if res == bbt[0]:
                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'collecting'

                                if bd_user['language_code'] == 'ru':
                                    text = f'üåø | –°–±–æ—Ä —è–≥–æ–¥ –∏ —Ç—Ä–∞–≤ –Ω–∞—á–∞—Ç!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                else:
                                    text = f'üåø | The gathering of berries and herbs has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                            if res == bbt[1]:
                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'hunting'

                                if bd_user['language_code'] == 'ru':
                                    text = f'üçñ | –û—Ö–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                else:
                                    text = f'üçñ | The hunt has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                            if res == bbt[2]:
                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'fishing'

                                if bd_user['language_code'] == 'ru':
                                    text = f'üç£ | –†—ã–±–∞–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                else:
                                    text = f'üç£ | Fishing has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                            if res == bbt[3]:
                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'all'

                                if bd_user['language_code'] == 'ru':
                                    text = f'üç± | –û–±—â–∏–π —Å–±–æ—Ä –ø–∏—â–∏ –Ω–∞—á–∞—Ç!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                else:
                                    text = f'üç± | The general food collection has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )
                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'actions', user))

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret2, ans, bd_user)

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, bbt, bd_user)

        else:

            if bd_user['language_code'] == 'ru':
                text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

            else:
                text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

            bot.send_message(message.chat.id, text, reply_markup = Functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))

    @staticmethod
    def coll_progress(bot, message, user, bd_user):
        markup_inline = types.InlineKeyboardMarkup()

        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'hunting':
            number = bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'][0]
            tnumber = bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'][1]
            prog = number / (tnumber / 100)

            if bd_user['language_code'] == 'ru':
                text = f'üç± | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {int( prog )}%\nüé≤ | –¶–µ–ª—å: {tnumber}'
                inl_l = {'‚ùå –û—Ç–º–µ–Ω–∏—Ç—å': f"cancel_progress {bd_user['settings']['dino_id']}" }

            else:
                text = f'üç± | Current progress: {int( prog )}%\nüé≤ | Goal: {tnumber}'
                inl_l = {'‚ùå Cancel': f"cancel_progress {bd_user['settings']['dino_id']}" }

            markup_inline.add( *[ types.InlineKeyboardButton( text = inl, callback_data = f"{inl_l[inl]}") for inl in inl_l.keys() ])
            bot.send_message(message.chat.id, text, reply_markup = markup_inline)

    @staticmethod
    def invite_friend(bot, message, user, bd_user):

        if bd_user != None:
            coins = 200

            if bd_user['language_code'] == 'ru':
                text = f"ü§ç | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!\n\nüíú | –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 5-–≥–æ —É—Ä–æ–≤–Ω—è –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ü•ö –ù–µ–æ–±—ã—á–Ω–æ–µ/–†–µ–¥–∫–æ–µ —è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞!\n\n‚ù§ | –î—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ: {coins} –º–æ–Ω–µ—Ç, üçØ –ë–∞–Ω–æ—á–∫–∞ –º—ë–¥–∞ —Ö2, üß∏ –ú–∏—à–∫–∞, üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ x2, üçí –Ø–≥–æ–¥—ã x2, ü¶™ –ú–µ–ª–∫–∞—è —Ä—ã–±–∞ x2, üç™ –ü–µ—á–µ–Ω—å–µ x2"

            else:
                text = f"ü§ç | Redirection to the referral system menu!\n\nüíú | When your friend reaches the 5th level, you will receive an Unusual/Rare dinosaur egg!\n\n‚ù§ | Friend will receive a bonus: {coins} coins, üçØ Jar of honey x2, üß∏ Bear, üçó Chicken leg x2, üçí Berries x2, ü¶™ Small fish x2, üç™ Cookies x2"

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "referal-system", user))

    @staticmethod
    def friends_menu(bot, message, user, bd_user):

        if bd_user != None:
            dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

            if bd_user['language_code'] == 'ru':
                text = f"üë• | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"

            else:
                text = f"üë• | Redirecting to the friends menu!"

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "friends-menu", user))

    @staticmethod
    def generate_fr_code(bot, message, user, bd_user):

        if bd_user != None:
            if 'referal_system' not in bd_user.keys():
                rf = referal_system.find_one({"id": 1})
                def r_cod():
                    code_rf = ''
                    for i in range(6):
                        code_rf += str(random.randint(0,9))
                    return code_rf

                rf_code = r_cod()
                while rf_code in rf['codes']:
                    rf_code = r_cod()

                rf['codes'].append(rf_code)
                referal_system.update_one( {"id": 1}, {"$set": {'codes': rf['codes'] }} )

                bd_user['referal_system'] = {'my_cod': rf_code, 'friend_cod': None}
                users.update_one( {"userid": bd_user['userid']}, {"$set": {'referal_system': bd_user['referal_system'] }} )

                if bd_user['language_code'] == 'ru':
                    text = f"üé≤ | –í–∞—à –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n–ö–æ–¥: `{rf_code}`"

                else:
                    text = f"üé≤ | Your code is generated!\n–°ode: `{rf_code}`"

                bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = Functions.markup(bot, "referal-system", user))

    @staticmethod
    def enter_fr_code(bot, message, user, bd_user):

        rf = referal_system.find_one({"id": 1})

        def ret(message, bd_user):
            if message.text in rf['codes']:
                if str(bd_user['referal_system']['my_cod']) != message.text:
                    items = ['1', '1', '2', '2', '16', '12', '12', '11', '11', '13', '13']
                    coins = 200
                    bd_user['coins'] += coins
                    for i in items:
                        Functions.add_item_to_user(bd_user, i)

                    members = users.find({ })
                    fr_member = None

                    for i in members:
                        if fr_member != None:
                            break
                        else:
                            if 'referal_system' in i.keys():
                                if i['referal_system']['my_cod'] == message.text:
                                    fr_member = i


                    if fr_member['userid'] not in bd_user['friends']['friends_list']:
                        bd_user['friends']['friends_list'].append(i['userid'])
                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                    if bd_user['userid'] not in fr_member['friends']['friends_list']:
                        fr_member['friends']['friends_list'].append(bd_user['userid'])
                        users.update_one( {"userid": fr_member['userid']}, {"$set": {'friends': fr_member['friends'] }} )

                    bd_user['referal_system']['friend_cod'] = message.text
                    bd_user['referal_system']['friend'] = fr_member['userid']

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'coins': bd_user['coins'] }} )

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'referal_system': bd_user['referal_system'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = f"‚ù§ü§çüíú | –ö–æ–¥ –¥—Ä—É–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n‚ù§ | –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!\n\nü§ç | –ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 5-–≥–æ —É—Ä–æ–≤–Ω—è, –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç ü•ö –ù–µ–æ–±—ã—á–Ω–æ–µ/–†–µ–¥–∫–æ–µ —è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞!\n\nüíú | –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ: {coins} –º–æ–Ω–µ—Ç, üçØ –ë–∞–Ω–æ—á–∫–∞ –º—ë–¥–∞ —Ö2, üß∏ –ú–∏—à–∫–∞, üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ x2, üçí –Ø–≥–æ–¥—ã x2, ü¶™ –ú–µ–ª–∫–∞—è —Ä—ã–±–∞ x2, üç™ –ü–µ—á–µ–Ω—å–µ x2"

                    else:
                        text = f"‚ù§ü§çüíú | The friend's code is activated!\n\n‚ù§ | Thank you for supporting and helping to develop our bot by inviting friends!\n\nü§ç | Upon reaching level 5, your friend will receive an ü•ö Unusual/Rare Dinosaur Egg!\n\nüíú | You get a bonus: {coins} coins, üçØ Jar of honey x2, üß∏ Bear, üçó Chicken leg x2, üçí Berries x2, ü¶™ Small fish x2, üç™ Cookies x2"

                else:
                    if bd_user['language_code'] == 'ru':
                        text = f"‚ùó | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥ –¥—Ä—É–≥–∞!"

                    else:
                        text = f"‚ùó | You can't activate your friend code!"
            else:
                if bd_user['language_code'] == 'ru':
                    text = f"‚ùó | –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!"

                else:
                    text = f"‚ùó | Code not found!"

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "referal-system", user))


        if bd_user != None:
            if 'referal_system' not in bd_user.keys():
                rf = referal_system.find_one({"id": 1})
                def r_cod():
                    code_rf = ''
                    for i in range(6):
                        code_rf += str(random.randint(0,9))
                    return code_rf

                rf_code = r_cod()
                while rf_code in rf['codes']:
                    rf_code = r_cod()

                rf['codes'].append(rf_code)
                referal_system.update_one( {"id": 1}, {"$set": {'codes': rf['codes'] }} )

                bd_user['referal_system'] = {'my_cod': rf_code, 'friend_cod': None}
                users.update_one( {"userid": bd_user['userid']}, {"$set": {'referal_system': bd_user['referal_system'] }} )

                if bd_user['language_code'] == 'ru':
                    text = f"üé≤ | –í–∞—à –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n–ö–æ–¥: `{rf_code}`"

                else:
                    text = f"üé≤ | Your code is generated!\n–°ode: `{rf_code}`"

                bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = Functions.markup(bot, "referal-system", user))

                if bd_user['language_code'] == 'ru':
                    ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                    text = 'üë• | –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ > '
                else:
                    ans = ['‚Ü™ Back']
                    text = "üë• | Enter a friend's invitation code >"

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                rmk.add(ans[0])


                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                bot.register_next_step_handler(msg, ret, bd_user)

            else:
                if bd_user['referal_system']['friend_cod'] == None:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                        text = 'üë• | –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ > '
                    else:
                        ans = ['‚Ü™ Back']
                        text = "üë• | Enter a friend's invitation code >"

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0])


                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, bd_user)

                else:
                    if bd_user['language_code'] == 'ru':
                        text = 'üë• | –í—ã —É–∂–µ –≤–≤–µ–ª–∏ –∫–æ–¥ –¥—Ä—É–≥–∞!'
                    else:
                        text = "üë• | You have already entered a friend's code!"

                    msg = bot.send_message(message.chat.id, text)

    @staticmethod
    def acss(bot, message, user, bd_user):

        if bd_user != None:

            if len(bd_user['dinos']) > 1:
                for i in bd_user['dinos'].keys():
                    if i not in bd_user['activ_items'].keys():

                        users.update_one( {"userid": bd_user["userid"] }, {"$set": {f'activ_items.{i}': {'game': None, 'hunt': None, 'journey': None, 'unv': None} }} )

            def acss(message, dino_id, user, bd_user):

                if bd_user['dinos'][dino_id]['status'] != 'dino':

                    if bd_user['language_code'] == 'ru':
                        text = 'üéç | –î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∫—É–±–∏—Ä–æ–≤–∞–Ω!'
                    else:
                        text = 'üéç | The dinosaur must be incubated!'

                    bot.send_message(message.chat.id, text)
                    return

                if bd_user['dinos'][dino_id]['activ_status'] != 'pass_active':

                    if bd_user['language_code'] == 'ru':
                        text = 'üéç | –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã / —Å–Ω–∞ / –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç–¥. - –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä!'
                    else:
                        text = 'üéç | While playing / sleeping / traveling, etc. - you can not change the accessory!'

                    bot.send_message(message.chat.id, text)
                    return


                if bd_user['language_code'] == 'ru':
                    ans = ['üïπ –ò–≥—Ä–∞', 'üåô –°–æ–Ω', 'üåø –°–±–æ—Ä –ø–∏—â–∏', 'üèÆ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '‚Ü™ –ù–∞–∑–∞–¥']
                    text = 'üéç | –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä >'
                else:
                    ans = ['üïπ Game', 'üåô Dream', 'üåø Collecting food', 'üèÆ Journey', '‚Ü™ Back']
                    text = 'üéç | Choose which aspect the accessory should be >'

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                rmk.add(ans[0], ans[1])
                rmk.add(ans[2], ans[3])
                rmk.add(ans[4])

                def ret_zero(message, ans, bd_user):

                    if message.text not in ans or message.text == ans[4]:
                        res = None
                    else:
                        res = message.text

                    if res == None:
                        bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 'profile', user))
                        return

                    if message.text in ['üïπ Game', 'üïπ –ò–≥—Ä–∞']:
                        ac_type = 'game'
                    if message.text in ['üåô –°–æ–Ω', 'üåô Dream']:
                        ac_type = 'unv'
                    if message.text in ['üåø –°–±–æ—Ä –ø–∏—â–∏', 'üåø Collecting food']:
                        ac_type = 'hunt'
                    if message.text in ['üèÆ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üèÆ Journey']:
                        ac_type = 'journey'

                    if bd_user['language_code'] == 'ru':
                        text = 'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–≥–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç >'
                    else:
                        text = 'üé¥ | Select an item from the inventory to install it in the active slot >'

                    nitems = bd_user['inventory']

                    if nitems == []:

                        if bd_user['language_code'] == 'ru':
                            text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                        else:
                            text = 'Inventory is empty.'

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'profile', user))
                        return

                    data_items = items_f['items']
                    items = []
                    items_id = {}
                    page = 1
                    items_names = []

                    for i in nitems:
                        if data_items[str(i['item_id'])]['type'] == f"{ac_type}_ac":
                            items.append(i)

                    if bd_user['language_code'] == 'ru':
                        lg = "nameru"
                    else:
                        lg = "nameen"

                    for i in items:
                        items_id[ items_f['items'][str(i['item_id'])][lg] ] = i
                        items_names.append( items_f['items'][str(i['item_id'])][lg] )

                    items_sort = []
                    d_it_sort = {}
                    ind_sort_it = {}

                    for i in items_names:
                        if i in list(d_it_sort.keys()):
                            d_it_sort[i] += 1
                        else:
                            d_it_sort[i] = 1

                    for n in list(d_it_sort.keys()):
                        col = d_it_sort[n]
                        name = n
                        items_sort.append(f'{n} x{col}')
                        ind_sort_it[f'{n} x{col}'] = n

                    pages = list(Functions.chunks(list(Functions.chunks(items_sort, 2)), 2))

                    if len(pages) == 0:
                        pages = [ [ ] ]

                    for i in pages:
                        for ii in i:
                            if len(ii) == 1:
                                ii.append(' ')

                        if len(i) != 2:
                            for iii in range(2 - len(i)):
                                i.append([' ', ' '])

                    def work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type):

                        l_pages = pages
                        l_page = page
                        l_ind_sort_it = ind_sort_it

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                        for i in pages[page-1]:
                            rmk.add(i[0], i[1])

                        act_item = []
                        if bd_user['activ_items'][ dino_id ][ac_type] == None:
                            act_item = ['–Ω–µ—Ç', 'no']
                        else:
                            act_item = [ items_f['items'][ bd_user['activ_items'][ dino_id ][ac_type]['item_id'] ] ['nameru'], items_f['items'][ bd_user['activ_items'][ dino_id ][ac_type]['item_id'] ]['nameen'] ]

                        if len(pages) > 1:
                            if bd_user['language_code'] == 'ru':
                                com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂', 'üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä']
                                textt = f'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä >\n–ê–∫—Ç–∏–≤–Ω—ã–π: {act_item[0]}'
                            else:
                                com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂', 'üîª Remove the accessory']
                                textt = f'üé¥ | Choose an accessory >\nActive: {act_item[1]}'

                            rmk.add(com_buttons[3])
                            rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                        else:

                            if bd_user['language_code'] == 'ru':
                                com_buttons = ['‚Ü™ –ù–∞–∑–∞–¥', 'üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä']
                                textt = f'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä >\n–ê–∫—Ç–∏–≤–Ω—ã–π: {act_item[0]}'
                            else:
                                textt = f'üé¥ | Choose an accessory >\nActive: {act_item[1]}'
                                com_buttons = ['‚Ü™ Back', 'üîª Remove the accessory']

                            rmk.add(com_buttons[1])
                            rmk.add(com_buttons[0])

                        def ret(message, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it, lg, ac_type):
                            if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                                res = None

                            else:
                                if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂', 'üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä', 'üîª Remove the accessory']:
                                    res = message.text
                                else:
                                    res = None


                            if res == None:
                                if bd_user['language_code'] == 'ru':
                                    text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"
                                else:
                                    text = "üë• | Return to the profile menu"

                                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'profile', user))
                                return '12'

                            else:
                                if res == '‚óÄ':
                                    if page - 1 == 0:
                                        page = 1
                                    else:
                                        page -= 1

                                    work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type)

                                elif res == '‚ñ∂':
                                    if page + 1 > len(l_pages):
                                        page = len(l_pages)
                                    else:
                                        page += 1

                                    work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type)

                                else:

                                    if res in ['üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä', 'üîª Remove the accessory']:
                                        if bd_user['activ_items'][ dino_id ][ac_type] != None:
                                            item = bd_user['activ_items'][ dino_id ][ac_type]
                                            bd_user['activ_items'][ dino_id ][ac_type] = None

                                            if bd_user['language_code'] == 'ru':
                                                text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç"
                                            else:
                                                text = "üé¥ | Active item removed"

                                            users.update_one( {"userid": bd_user['userid']}, {"$push": {'inventory': item }} )
                                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'activ_items': bd_user['activ_items'] }} )

                                        else:
                                            if bd_user['language_code'] == 'ru':
                                                text = "üé¥ | –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!"
                                            else:
                                                text = "üé¥ | There is no active item at the moment!"

                                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'profile', user))

                                    else:
                                        if bd_user['activ_items'][ dino_id ][ac_type] != None:
                                            bd_user['inventory'].append(bd_user['activ_items'][ dino_id ][ac_type])

                                        item = items_id[ l_ind_sort_it[res] ]

                                        bd_user['activ_items'][ dino_id ][ac_type] = item

                                        if bd_user['language_code'] == 'ru':
                                            text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
                                        else:
                                            text = "üé¥ | The active item is installed!"

                                        bd_user['inventory'].remove(item)
                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'activ_items': bd_user['activ_items'] }} )

                                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'profile', user))

                        msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                        bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it, lg, ac_type)

                    work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type)

                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                bot.register_next_step_handler(msg, ret_zero, ans, bd_user)

            n_dp, dp_a = Functions.dino_pre_answer(bot, message)
            if n_dp == 1:

                bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, 1, user))
                return

            if n_dp == 2:

                acss(message, list(bd_user['dinos'].keys())[0], user, bd_user)

            if n_dp == 3:
                rmk = dp_a[0]
                text = dp_a[1]
                dino_dict = dp_a[2]

                def ret(message, dino_dict, user, bd_user):

                    try:
                        acss(message, dino_dict[message.text][1], user, bd_user)
                    except:
                        bot.send_message(message.chat.id, '‚ùì', reply_markup = Functions.markup(bot, "profile", user))

                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)

    @staticmethod
    def open_market_menu(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = 'üõí –ü–∞–Ω–µ–ª—å —Ä—ã–Ω–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!'
            else:
                text = 'üõí The market panel is open!'

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "market", user))

    @staticmethod
    def my_products(bot, message, user, bd_user):

        if bd_user != None:

            market_ = market.find_one({"id": 1})
            if str(user.id) not in market_['products'].keys() or market_['products'][str(user.id)]['products'] == {}:

                if bd_user['language_code'] == 'ru':
                    text = "üõí | –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ!"
                else:
                    text = "üõí | You don't have any saleable products on the market!"

                bot.send_message(message.chat.id, text)

            else:

                products = []
                page = 1

                for i in market_['products'][str(user.id)]['products'].keys():
                    product = market_['products'][str(user.id)]['products'][i]
                    products.append(product)

                pages = list(Functions.chunks(products, 5))

                if bd_user['language_code'] == 'ru':
                    text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                else:
                    text = 'üõí | *Your products*\n\n'

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                if len(pages) > 1:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚óÄ', 'üõí –†—ã–Ω–æ–∫', '‚ñ∂']
                    else:
                        ans = ['‚óÄ', 'üõí Market', '‚ñ∂']

                    rmk.add(ans[0], ans[1], ans[2])

                else:

                    if bd_user['language_code'] == 'ru':
                        ans = ['üõí –†—ã–Ω–æ–∫']
                    else:
                        ans = ['üõí Market']

                    rmk.add(ans[0])

                def work_pr(page, pages):

                    if bd_user['language_code'] == 'ru':
                        text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                    else:
                        text = 'üõí | *Your products*\n\n'

                    w_page = pages[page-1]

                    nn = (page - 1) * 5
                    for pr in w_page:
                        item = items_f['items'][ pr['item']['item_id'] ]
                        nn += 1

                        if int(w_page.index(pr)) == len(w_page) - 1:
                            n = '‚îî'
                        elif int(w_page.index(pr)) == 0:
                            n = '‚îå'
                        else:
                            n = '‚îú'

                        if bd_user['language_code'] == 'ru':
                            text += f"*{n}* {nn}# {item['nameru']}\n    *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {pr['price']}\n"
                            text += f"       *‚îî* –ü—Ä–æ–¥–∞–Ω–æ: {pr['col'][0]} / {pr['col'][1]}"

                            if 'abilities' in pr['item'].keys():
                                if 'uses' in pr['item']['abilities'].keys():
                                    text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {pr['item']['abilities']['uses']}"

                                if 'endurance' in pr['item']['abilities'].keys():
                                    text += f"\n           *‚îî* –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {pr['item']['abilities']['endurance']}"

                            text += '\n\n'

                        else:
                            text += f"*{n}* {nn}# {item['nameen']}\n    *‚îî* Price pay for 1—Ö: {pr['price']}\n"
                            text += f"        *‚îî* Sold: {pr['col'][0]} / {pr['col'][1]}"

                            if 'abilities' in pr['item'].keys():
                                if 'uses' in pr['item']['abilities'].keys():
                                    text += f"\n           *‚îî* Uses: {pr['item']['abilities']['uses']}"

                                if 'endurance' in pr['item']['abilities'].keys():
                                    text += f"\n           *‚îî* Endurance: {pr['item']['abilities']['endurance']}"

                            text += '\n\n'

                    if bd_user['language_code'] == 'ru':
                        text += f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}'
                    else:
                        text += f'Page: {page}'

                    return text

                msg_g = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')

                def check_key(message, page, pages, ans):

                    if message.text in ['üõí –†—ã–Ω–æ–∫', 'üõí Market'] or message.text not in ans:

                        if bd_user['language_code'] == 'ru':
                            text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                        else:
                            text = "üõí | Return to the market menu!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                        return

                    if len(pages) > 1 and message.text in ['‚óÄ', '‚ñ∂']:
                        if message.text == '‚óÄ':

                            if page - 1 == 0:
                                page = 1
                            else:
                                page -= 1

                        if message.text == '‚ñ∂':

                            if page + 1 > len(pages):
                                page = len(pages)
                            else:
                                page += 1

                    msg = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')
                    bot.register_next_step_handler(msg, check_key, page, pages, ans)

                bot.register_next_step_handler(msg_g, check_key, page, pages, ans)

    @staticmethod
    def delete_product(bot, message, user, bd_user):

        if bd_user != None:

            market_ = market.find_one({"id": 1})
            if str(user.id) not in market_['products'].keys() or market_['products'][str(user.id)]['products'] == {}:

                if bd_user['language_code'] == 'ru':
                    text = "üõí | –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ!"
                else:
                    text = "üõí | You don't have any saleable products on the market!"

                bot.send_message(message.chat.id, text)

            else:

                products = []
                page = 1

                for i in market_['products'][str(user.id)]['products'].keys():
                    product = market_['products'][str(user.id)]['products'][i]
                    products.append(product)

                pages = list(Functions.chunks(products, 5))

                if bd_user['language_code'] == 'ru':
                    text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                else:
                    text = 'üõí | *Your products*\n\n'

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                lll = []
                for i in range(1, len(pages[page-1])+1 ):
                    lll.append(str(i + 1 * page + (5 * (page-1))-1 * page ))

                if len(lll) == 1:
                    rmk.add(lll[0])
                if len(lll) == 2:
                    rmk.add(lll[0], lll[1])
                if len(lll) == 3:
                    rmk.row(lll[0], lll[1], lll[2])
                if len(lll) == 4:
                    rmk.row(lll[0], lll[1], lll[2], lll[3])
                if len(lll) == 5:
                    rmk.row(lll[0], lll[1], lll[2], lll[3], lll[4])

                if len(pages) > 1:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚óÄ', 'üõí –†—ã–Ω–æ–∫', '‚ñ∂']
                    else:
                        ans = ['‚óÄ', 'üõí Market', '‚ñ∂']

                    rmk.add(ans[0], ans[1], ans[2])

                else:

                    if bd_user['language_code'] == 'ru':
                        ans = ['üõí –†—ã–Ω–æ–∫']
                    else:
                        ans = ['üõí Market']

                    rmk.add(ans[0])

                def work_pr(page, pages):

                    if bd_user['language_code'] == 'ru':
                        text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                    else:
                        text = 'üõí | *Your products*\n\n'

                    w_page = pages[page-1]

                    nn = (page - 1) * 5
                    for pr in w_page:
                        item = items_f['items'][ pr['item']['item_id'] ]
                        nn += 1

                        if int(w_page.index(pr)) == len(w_page) - 1:
                            n = '‚îî'
                        elif int(w_page.index(pr)) == 0:
                            n = '‚îå'
                        else:
                            n = '‚îú'

                        if bd_user['language_code'] == 'ru':
                            text += f"*{n}* {nn}# {item['nameru']}\n    *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {pr['price']}\n"
                            text += f"       *‚îî* –ü—Ä–æ–¥–∞–Ω–æ: {pr['col'][0]} / {pr['col'][1]}"

                            if 'abilities' in pr['item'].keys():
                                if 'uses' in pr['item']['abilities'].keys():
                                    text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {pr['item']['abilities']['uses']}"

                            text += '\n\n'

                        else:
                            text += f"*{n}* {nn}# {item['nameen']}\n    *‚îî* Price pay for 1—Ö: {pr['price']}\n"
                            text += f"        *‚îî* Sold: {pr['col'][0]} / {pr['col'][1]}"

                            if 'abilities' in pr['item'].keys():
                                if 'uses' in pr['item']['abilities'].keys():
                                    text += f"\n           *‚îî* Uses: {pr['item']['abilities']['uses']}"

                            text += '\n\n'

                    if bd_user['language_code'] == 'ru':
                        text += f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}'
                    else:
                        text += f'Page: {page}'

                    return text

                msg_g = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')

                def check_key(message, page, pages, ans):
                    number = None

                    if message.text in ['üõí –†—ã–Ω–æ–∫', 'üõí Market']:

                        if bd_user['language_code'] == 'ru':
                            text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                        else:
                            text = "üõí | Return to the market menu!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                        return

                    if message.text not in ans:

                        try:
                            number = int(message.text)

                        except:

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                            else:
                                text = "üõí | Return to the market menu!"

                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                            return

                    if number == None:
                        if len(pages) > 1 and message.text in ['‚óÄ', '‚ñ∂']:
                            if message.text == '‚óÄ':

                                if page - 1 == 0:
                                    page = 1
                                else:
                                    page -= 1

                            if message.text == '‚ñ∂':

                                if page + 1 > len(pages):
                                    page = len(pages)
                                else:
                                    page += 1

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                        lll = []
                        for i in range(1, len(pages[page-1])+1 ):
                            lll.append(str(i + 1 * page + (5 * (page-1))-1 * page ))

                        if len(lll) == 1:
                            rmk.add(lll[0])
                        if len(lll) == 2:
                            rmk.add(lll[0], lll[1])
                        if len(lll) == 3:
                            rmk.row(lll[0], lll[1], lll[2])
                        if len(lll) == 4:
                            rmk.row(lll[0], lll[1], lll[2], lll[3])
                        if len(lll) == 5:
                            rmk.row(lll[0], lll[1], lll[2], lll[3], lll[4])

                        if len(pages) > 1:

                            if bd_user['language_code'] == 'ru':
                                ans = ['‚óÄ', 'üõí –†—ã–Ω–æ–∫', '‚ñ∂']
                            else:
                                ans = ['‚óÄ', 'üõí Market', '‚ñ∂']

                            rmk.add(ans[0], ans[1], ans[2])

                        else:

                            if bd_user['language_code'] == 'ru':
                                ans = ['üõí –†—ã–Ω–æ–∫']
                            else:
                                ans = ['üõí Market']

                            rmk.add(ans[0])

                        msg = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')
                        bot.register_next_step_handler(msg, check_key, page, pages, ans)

                    else:

                        nn_number = list(market_['products'][str(user.id)]['products'].keys())[number-1]

                        if nn_number not in market_['products'][str(user.id)]['products'].keys():

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö!"
                            else:
                                text = "üõí | The object with this number is not found in your products!"

                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))

                        else:
                            data_items = items_f['items']
                            prod = market_['products'][str(user.id)]['products'][nn_number]

                            if data_items[ prod['item']['item_id'] ]['type'] == '+eat':

                                eat_c = Functions.items_counting(bd_user, '+eat')
                                if eat_c >= 300:

                                    if bd_user['language_code'] == 'ru':
                                        text = f'üå¥ | –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ª–æ–º–∏—Ç—Å—è –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥—ã! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å {eat_c} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å!'
                                    else:
                                        text = f'üå¥ | Your inventory is bursting with the amount of food! At the moment you have {eat_c} items that can be eaten!'

                                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                                    return

                            for i in range(prod['col'][1] - prod['col'][0]):
                                bd_user['inventory'].append(prod['item'])

                            del market_['products'][str(user.id)]['products'][nn_number]

                            market.update_one( {"id": 1}, {"$set": {'products': market_['products'] }} )
                            users.update_one( {"userid": user.id}, {"$set": {'inventory': bd_user['inventory']}} )

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω!"
                            else:
                                text = "üõí | The product has been removed!"

                            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))

                bot.register_next_step_handler(msg_g, check_key, page, pages, ans)

    @staticmethod
    def search_pr(bot, message, user, bd_user):

        if bd_user != None:

            market_ = market.find_one({"id": 1})

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

            if bd_user['language_code'] == 'ru':
                ans = ['üõí –†—ã–Ω–æ–∫']
                text = 'üîç | –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–∏—Ç–µ...'
            else:
                ans = ['üõí Market']
                text = 'üîç | Enter the name of the item you are looking for...'

            rmk.add(ans[0])

            def name_reg(message):
                if message.text in ['üõí Market', 'üõí –†—ã–Ω–æ–∫']:

                    if bd_user['language_code'] == 'ru':
                        text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                    else:
                        text = "üõí | Return to the market menu!"

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                    return

                else:
                    s_i = []
                    for i in items_f['items']:
                        item = items_f['items'][i]

                        for inn in [ item['nameru'], item['nameen'] ]:
                            if fuzz.token_sort_ratio(message.text, inn) > 80 or fuzz.ratio(message.text, inn) > 80 or message.text == inn:
                                s_i.append(i)

                    if s_i == []:

                        if bd_user['language_code'] == 'ru':
                            text = "üõí | –ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                        else:
                            text = "üõí | An item with that name was not found in the database of sold items!\nreturn to the market menu!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                        return


                    sear_items = []
                    for uid in market_['products']:
                        if uid != str(bd_user['userid']):
                            userser = market_['products'][uid]['products']
                            for ki in userser:
                                if userser[ki]['item']['item_id'] in s_i:
                                    sear_items.append( {'user': uid, 'key': ki, 'col': userser[ki]['col'], 'price': userser[ki]['price'], 'item': userser[ki]['item']} )

                    if sear_items == []:
                        if bd_user['language_code'] == 'ru':
                            text = "üõí | –ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                        else:
                            text = "üõí | An item with that name was not found in the database of sold items!\nreturn to the market menu!"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                        return

                    random.shuffle(sear_items)
                    page = list(Functions.chunks(sear_items, 10))[0]

                    text = ''
                    a = 0

                    markup_inline = types.InlineKeyboardMarkup()
                    in_l = []

                    if bd_user['language_code'] == 'ru':
                        text += f"üîç | –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {len(sear_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤(–∞) >\n\n"
                        for i in page:
                            a += 1
                            text += f"*{a}#* {items_f['items'][i['item']['item_id']]['nameru']}\n     *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {i['price']}\n         *‚îî* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {i['col'][1] - i['col'][0]}"

                            if 'abilities' in i['item'].keys():
                                if 'uses' in i['item']['abilities'].keys():
                                    text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {i['item']['abilities']['uses']}"

                            text += '\n\n'
                            in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))
                    else:
                        text += f'üîç | Your search found {len(search_items)} item(s) >\n\n'
                        for i in page:
                            a += 1
                            text += f"*{a}#* {items_f['items'][i['item_id']]['nameen']}\n     *‚îî* Price per 1x: {i['price']}\n         *‚îî* Quantity: {i['col'][1] - i['col'][0]}"

                            if 'abilities' in i['item'].keys():
                                if 'uses' in i['item']['abilities'].keys():
                                    text += f"\n           *‚îî* Uses: {i['item']['abilities']['uses']}"

                            text += '\n\n'
                            in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))


                    if len(in_l) == 1:
                        markup_inline.add(in_l[0])
                    if len(in_l) == 2:
                        markup_inline.add(in_l[0], in_l[1])
                    if len(in_l) == 3:
                        markup_inline.add(in_l[0], in_l[1], in_l[2])
                    if len(in_l) == 4:
                        markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3])
                    if len(in_l) == 5:
                        markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                    if len(in_l) == 6:
                        markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                        markup_inline.add(in_l[5])
                    if len(in_l) == 7:
                        markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                        markup_inline.add(in_l[5], in_l[6])
                    if len(in_l) == 8:
                        markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                        markup_inline.add(in_l[5], in_l[6], in_l[7])
                    if len(in_l) == 9:
                        markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                        markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8])
                    if len(in_l) == 10:
                        markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                        markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8], in_l[9])

                    msg = bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = markup_inline)

                    if bd_user['language_code'] == 'ru':
                        text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                    else:
                        text = "üõí | Return to the market menu!"

                    bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'market', user))
                    return


            msg = bot.send_message(message.chat.id, text, reply_markup = rmk, parse_mode = 'Markdown')
            bot.register_next_step_handler(msg, name_reg )

    @staticmethod
    def random_search(bot, message, user, bd_user):

        if bd_user != None:

            market_ = market.find_one({"id": 1})

            items = []

            for usk in market_['products']:
                if usk != str(user.id):
                    for prd in market_['products'][usk]['products']:
                        market_['products'][usk]['products'][prd]['user'] = usk
                        market_['products'][usk]['products'][prd]['key'] = prd
                        items.append(market_['products'][usk]['products'][prd])

            random.shuffle(items)

            page = []
            for i in items:
                if len(page) != 10:
                    page.append(i)

            text = ''
            a = 0
            markup_inline = types.InlineKeyboardMarkup()
            in_l = []

            if bd_user['language_code'] == 'ru':
                text += f"üîç | –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —Ä—ã–Ω–∫–∞ >\n\n"
                for i in page:
                    a += 1
                    text += f"*{a}#* {items_f['items'][i['item']['item_id']]['nameru']}\n     *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {i['price']}\n         *‚îî* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {i['col'][1] - i['col'][0]}"

                    if 'abilities' in i['item'].keys():
                        if 'uses' in i['item']['abilities'].keys():
                            text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {i['item']['abilities']['uses']}"

                        if 'endurance' in i['item']['abilities'].keys():
                            text += f"\n           *‚îî* –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {i['item']['abilities']['endurance']}"

                    text += '\n\n'

                    in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))

            else:
                text += f'üîç | Your search found {len(search_items)} item(s) >\n\n'
                for i in page:
                    a += 1
                    text += f"*{a}#* {items_f['items'][i['item_id']]['nameen']}\n     *‚îî* Price per 1x: {i['price']}\n         *‚îî* Quantity: {i['col'][1] - i['col'][0]}"

                    if 'abilities' in i['item'].keys():
                        if 'uses' in i['item']['abilities'].keys():
                            text += f"\n           *‚îî* Uses: {i['item']['abilities']['uses']}"

                        if 'endurance' in i['item']['abilities'].keys():
                            text += f"\n           *‚îî* Endurance: {i['item']['abilities']['endurance']}"

                    text += '\n\n'

                    in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))

            if len(in_l) == 1:
                markup_inline.add(in_l[0])
            if len(in_l) == 2:
                markup_inline.add(in_l[0], in_l[1])
            if len(in_l) == 3:
                markup_inline.add(in_l[0], in_l[1], in_l[2])
            if len(in_l) == 4:
                markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3])
            if len(in_l) == 5:
                markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
            if len(in_l) == 6:
                markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                markup_inline.add(in_l[5])
            if len(in_l) == 7:
                markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                markup_inline.add(in_l[5], in_l[6])
            if len(in_l) == 8:
                markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                markup_inline.add(in_l[5], in_l[6], in_l[7])
            if len(in_l) == 9:
                markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8])
            if len(in_l) == 10:
                markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8], in_l[9])

            msg = bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = markup_inline)

    @staticmethod
    def rarity_change(bot, message, user, bd_user):

        data_items = items_f['items']
        bd_user = Functions.dino_q(bd_user)

        def inf_message(dino_id):

            data_q_r = { 'com': {'money': 2000,  'materials': ['21']  } ,
                         'unc': {'money': 4000, 'materials': ['20'] } ,
                         'rar': {'money': 8000, 'materials': ['22'] } ,
                         'myt': {'money': 16000, 'materials': ['23'] } ,
                         'leg': {'money': 32000, 'materials': ['24'] } ,
                         'ran': {'money': 5000, 'materials': ['3']  } ,
                       }

            r_text = { 'com': ['–û–±—ã—á–Ω—ã–π', 'Common'] ,
                       'unc': ['–ù–µ–æ–±—ã—á–Ω—ã–π', 'Unusual'] ,
                       'rar': ['–†–µ–¥–∫–∏–π', 'Rare'] ,
                       'myt': ['–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', 'Mystical'] ,
                       'leg': ['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', 'Legendary'] ,
                       'ran': ['–°–ª—É—á–∞–π–Ω—ã–π', 'Random'] ,
                       }

            ql = list( data_q_r.keys() )

            if bd_user['language_code'] == 'ru':
                text_m = f" *‚îå* ‚ôª –í–æ–∑–º–æ–∂–Ω–∞—è —Å–º–µ–Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –¥–ª—è {bd_user['dinos'][dino_id]['name']}\n\n"
                lcode = 'ru'
                text_p2 = '‚ú® | –í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –º–∞–≥–∏—è! –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ!'
            else:
                text_m = f" *‚îå* ‚ôª Possible change of rarity for {bd_user['dinos'][dino_id]['name']}\n\n"
                lcode = 'en'
                text_p2 = '‚ú® | Choose which rarity you want to transform the dinosaur into, click on the button and magic will happen! You can also replace the dinosaur with another random one!'

            markup_inline = types.InlineKeyboardMarkup()
            cmm = []

            nn = 0
            for i in ql:
                nn += 1

                if bd_user['language_code'] == 'ru':
                    dino_q = r_text[i][0]
                else:
                    dino_q = r_text[i][1]

                if i == 'ran':
                    spl = '‚îî'
                else:
                    spl = '‚îú'

                text_m += f" *{spl}* *{nn}*. {', '.join(Functions.sort_items_col(data_q_r[i]['materials'], lcode))} + {data_q_r[i]['money']}üí∞ > {dino_q}ü¶ï"

                if bd_user['dinos'][dino_id]['quality'] == i:
                    text_m += ' (‚úÖ)'

                text_m += '\n\n'

                cmm.append(types.InlineKeyboardButton( text = f'‚ôª {nn}', callback_data = f"change_rarity {dino_id} {i}"))

            markup_inline.add( *cmm )

            bot.send_message(message.chat.id, text_m, reply_markup = markup_inline, parse_mode = 'Markdown')
            bot.send_message(message.chat.id, text_p2, reply_markup = Functions.markup(bot, Functions.last_markup(bd_user, alternative = 'dino-tavern'), bd_user ), parse_mode = 'Markdown')

        n_dp, dp_a = Functions.dino_pre_answer(bot, message, type = 'noall')
        if n_dp == 1:

            bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, Functions.last_markup(bd_user, alternative = 'dino-tavern'), bd_user ))
            return

        if n_dp == 2:
            bd_dino = dp_a

            inf_message(  list(bd_user['dinos'].keys())[0]  )

        if n_dp == 3:
            rmk = dp_a[0]
            text = dp_a[1]
            dino_dict = dp_a[2]

            def ret(message, dino_dict, user, bd_user):

                if message.text in dino_dict.keys():

                    inf_message( dino_dict[message.text][1] )

                else:
                    bot.send_message(message.chat.id, '‚ùå', reply_markup = Functions.markup(bot, Functions.last_markup(bd_user), bd_user ))

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)

    @staticmethod
    def dungeon_menu(bot, message, user, bd_user):

        if bd_user != None:

            for din in bd_user['dinos']:

                if 'dungeon' not in bd_user['dinos'][din].keys():
                    bd_user['dinos'][din]['dungeon'] = {"equipment": {'armor': None, 'weapon': None}}

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{din}': bd_user['dinos'][din] }} )

            if 'user_dungeon' not in bd_user.keys():
                bd_user['user_dungeon'] = { "equipment": {'backpack': None}, 'statistics': [] }

                users.update_one( {"userid": bd_user['userid']}, {"$set": {f'user_dungeon': bd_user['user_dungeon'] }} )


            if bd_user['language_code'] == 'ru':
                text = f"üóª | –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ø–æ–¥–∑–µ–º–µ–ª—å—é!"

            else:
                text = f"üóª | You have moved to the dungeon preparation menu!"

            bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "dungeon_menu", user))

    @staticmethod
    def dungeon_rules(bot, message, user, bd_user):

        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = (f'*üìï | –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è*\n\n'
                       f'1. *–ü—Ä–µ–¥–º–µ—Ç—ã:*\n –í—Å–µ –≤–µ—â–∏ –∏ –º–æ–Ω–µ—Ç—ã –≤–∑—è—Ç—ã–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Ç–µ—Ä–µ–Ω—ã, –≤ —Å–ª—É—á–∞–µ "–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞".\n\n'
                       f'2. *–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥:*\n –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–π—Ç–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–∂–∞. –ü—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤—Å–µ –≤–µ—â–∏ –∏ –º–æ–Ω–µ—Ç—ã.\n\n'
                       f'3. *–ù–ï–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥:*\n –î–∏–Ω–æ–∑–∞–≤—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∏–¥–∞—é—Ç –ø–æ–¥–∑–µ–º–µ–ª—å–µ –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –∑–¥–æ—Ä–æ–≤—å–µ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ 10-—Ç–∏. –ü—Ä–∏ —ç—Ç–æ–º —Ç–µ—Ä—è—é—Ç—Å—è –≤—Å–µ –≤–µ—â–∏ –∏ –º–æ–Ω–µ—Ç—ã. –î–∏–Ω–æ–∑–∞–≤—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –∂–∏–≤.\n\n'
                       f'4. *–ë–æ—Å—Å—ã:*\n –ö–∞–∂–¥—ã–µ 10 —ç—Ç–∞–∂–µ–π, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –±–æ—Å—Å, –µ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂.\n\n'
                       f'5. *–ö–æ–Ω–µ—Ü –ø–æ–¥–∑–µ–º–µ–ª—å—è:*\n –ö–∞–∫ –≥–æ–≤–æ—Ä—è—Ç —Ä–∞–Ω–∫–µ—Ä—ã: "–£ –ø–æ–¥–∑–µ–º–µ–ª—å—è –Ω–µ—Ç –∫–æ–Ω—Ü–∞", –æ–Ω–æ —Å–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –º–Ω–æ–≥–∏–µ –∫–∏–ª–ª–æ–º–µ—Ç—Ä—ã –≤–Ω–∏–∑, –∫—Ç–æ –∑–Ω–∞–µ—Ç, —á—Ç–æ –≤–∞—Å —Ç–∞–º –æ–∂–∏–¥–∞–µ—Ç.\n\n'
                       f'6. *–ù–∞–≥—Ä–∞–¥–∞:*\n –ß–µ–º –Ω–∏–∂–µ –≤—ã —Å–ø—É—Å–∫–∞–µ—Ç–µ—Å—å, —Ç–µ–º —Ü–µ–Ω–Ω–µ–µ –Ω–∞–≥—Ä–∞–¥–∞, –∏ —Ä–µ—Å—É—Ä—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –¥–æ–±—ã—Ç—å.\n\n'
                       f'7. *–†–µ–π—Ç–∏–Ω–≥:*\n –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–π—Ç–∏–Ω–≥–∞. –†–µ–π—Ç–∏–Ω–≥ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è 1 —Ä–∞–∑ –≤ 2-–∞ –º–µ—Å—è—Ü–∞. –ê –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏, –ø–æ–ª—É—á–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—É.')

            else:
                text = (f'*üìï | Dungeon Rules*\n\n'
                       f'1. *Items:*\n All items and coins taken in the dungeon can be lost in case of an "unsafe exit".\n\n'
                       f'2. *Safe exit:*\n It is safe to exit at the end of each floor. At the same time, all items and coins are saved.\n\n'
                       f'3. *Unsafe exit:*\n Dinosaurs automatically leave the dungeon when their health drops to 10. At the same time, all things and coins are lost. The dinosaur remains alive.\n\n'
                       f'4. *Bosses:*\n Every 10 floors, there is a boss, it needs to be defeated to move to the next floor.\n\n'
                       f'5. * The end of the dungeon:*\n As the rankers say: "The dungeon has no end," it descends many kilometers down, who knows what awaits you there.\n\n'
                       f'6. *Reward:*\n The lower you go, the more valuable the reward and the resources that can be obtained.\n\n'
                       f'7. *Rating:*\n Your result will be recorded in the rating table. The rating is reset 1 time in 2 months. And the winners get a reward.')

            bot.send_message(message.chat.id, text, parse_mode = 'Markdown')

    @staticmethod
    def dungeon_create(bot, message, user, bd_user):

        if bd_user != None:

            dung = dungeons.find_one({"dungeonid": user.id})

            if dung == None:

                dungs = dungeons.find({ })

                for dng in dungs:
                    if str(user.id) in dng['users'].keys():

                        if bd_user['language_code'] == 'ru':
                            text = f'‚ùó | –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!'

                        else:
                            text = f'‚ùó | You are already participating in the dungeon!'

                        bot.send_message(message.chat.id, text)
                        return

                if bd_user['language_code'] == 'ru':
                    text = f'‚öô | –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'

                else:
                    text = f'‚öô | Generation...'

                mg = bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "dungeon", user))

                dng, inf = Dungeon.base_upd(userid = user.id)
                inf = Dungeon.message_upd(bot, userid = user.id, dungeonid = user.id)

                bot.delete_message(user.id, mg.message_id)

            else:
                if bd_user['language_code'] == 'ru':
                    text = f'‚ùó | –£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!'

                else:
                    text = f'‚ùó | You have already created a dungeon!'

                bot.send_message(message.chat.id, text)

    @staticmethod
    def dungeon_join(bot, message, user, bd_user):

        if bd_user != None:

            dung = dungeons.find_one({"dungeonid": user.id})

            if dung == None:

                dungs = dungeons.find({ })

                for dng in dungs:
                    if str(user.id) in dng['users'].keys():

                        if bd_user['language_code'] == 'ru':
                            text = f'‚ùó | –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!'

                        else:
                            text = f'‚ùó | You are already participating in the dungeon!'

                        bot.send_message(message.chat.id, text)
                        return


                def join_dungeon(message, old_m):

                    try:
                        code = int(message.text)
                    except:
                        if bd_user['language_code'] == 'ru':
                            text = f'‚ùó  | –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥!'

                        else:
                            text = f'‚ùó  | Enter the correct code!'

                        msg = bot.send_message(message.chat.id, text)

                    else:
                        dung = dungeons.find_one({"dungeonid": code})

                        if dung == None:

                            if bd_user['language_code'] == 'ru':
                                text = f'‚ùó | –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥!'

                            else:
                                text = f'‚ùó | Enter the correct code!'

                            msg = bot.send_message(message.chat.id, text)

                        else:

                            if dung['dungeon_stage'] == 'preparation':

                                if bd_user['language_code'] == 'ru':
                                    text = f'‚öô | –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'

                                else:
                                    text = f'‚öô | Generation...'

                                mg = bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, "dungeon", user))

                                dng, inf = Dungeon.base_upd(userid = user.id, dungeonid = code, type = 'add_user')

                                inf = Dungeon.message_upd(bot, userid = user.id, dungeonid = dng['dungeonid'], upd_type = 'all')

                                bot.delete_message(user.id, mg.message_id)

                            else:

                                if bd_user['language_code'] == 'ru':
                                    text = f'‚ùó | –ù–∞ —ç—Ç–æ–π —Å—Ç–∞–¥–∏–∏ –Ω–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –ø–æ–¥–∑–µ–º–µ–ª—å—é!'

                                else:
                                    text = f"‚ùó | You can't join the dungeon at this stage!"

                                msg = bot.send_message(message.chat.id, text)


                if bd_user['language_code'] == 'ru':
                    text = f'üéü | –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è > '

                else:
                    text = f'üéü | Enter the connection code >'

                msg = bot.send_message(message.chat.id, text)
                bot.register_next_step_handler(msg, join_dungeon, msg)


            else:
                if bd_user['language_code'] == 'ru':
                    text = f'‚ùó | –£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–¥–∑–µ–º–µ–ª—å–µ!'

                else:
                    text = f'‚ùó | You have already created a dungeon!'

                bot.send_message(message.chat.id, text)

    @staticmethod
    def dungeon_equipment(bot, message, user, bd_user):

        def work_pr_zero(message, dino_id):
            data_items = items_f['items']

            type_eq = None

            if message.text in ['üó° –û—Ä—É–∂–∏–µ', 'üõ° –ë—Ä–æ–Ω—è', 'üéí –†—é–∫–∑–∞–∫', 'üó° Weapon', 'üõ° Armor', 'üéí Backpack']:

                if message.text in ['üó° –û—Ä—É–∂–∏–µ', 'üó° Weapon']:
                    type_eq = 'weapon'

                elif message.text in ['üõ° –ë—Ä–æ–Ω—è', 'üõ° Armor']:
                    type_eq = 'armor'

                else:
                    type_eq = 'backpack'

            else:

                bot.send_message(message.chat.id, '‚ùå', reply_markup = Functions.markup(bot, Functions.last_markup(bd_user), bd_user ))
                return

            items = []

            for i in bd_user['inventory']:
                itm = data_items[ i['item_id'] ]

                if itm['type'] == type_eq:
                    items.append(i)

            if bd_user['language_code'] == 'ru':
                text = 'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–≥–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç >'
            else:
                text = 'üé¥ | Select an item from the inventory to install it in the active slot >'

            nitems = bd_user['inventory']

            if nitems == []:

                if bd_user['language_code'] == 'ru':
                    text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                else:
                    text = 'Inventory is empty.'

                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'dungeon_menu', user))
                return

            data_items = items_f['items']
            items_id = {}
            page = 1
            items_names = []

            if bd_user['language_code'] == 'ru':
                lg = "nameru"
            else:
                lg = "nameen"

            for i in items:
                items_id[ items_f['items'][str(i['item_id'])][lg] ] = i
                items_names.append( items_f['items'][str(i['item_id'])][lg] )

            items_sort = []
            d_it_sort = {}
            ind_sort_it = {}

            for i in items_names:
                if i in list(d_it_sort.keys()):
                    d_it_sort[i] += 1
                else:
                    d_it_sort[i] = 1

            for n in list(d_it_sort.keys()):
                col = d_it_sort[n]
                name = n
                items_sort.append(f'{n} x{col}')
                ind_sort_it[f'{n} x{col}'] = n

            pages = list(Functions.chunks(list(Functions.chunks(items_sort, 2)), 2))

            if len(pages) == 0:
                pages = [ [ ] ]

            for i in pages:
                for ii in i:
                    if len(ii) == 1:
                        ii.append(' ')

                if len(i) != 2:
                    for iii in range(2 - len(i)):
                        i.append([' ', ' '])

            def work_pr(message, pages, page, items_id, ind_sort_it, lg, type_eq, dino_id):

                l_pages = pages
                l_page = page
                l_ind_sort_it = ind_sort_it

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                for i in pages[page-1]:
                    rmk.add(i[0], i[1])

                if len(pages) > 1:
                    if bd_user['language_code'] == 'ru':
                        com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂', 'üîª –°–Ω—è—Ç—å']
                        textt = f'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç >'
                    else:
                        com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂', 'üîª Remove']
                        textt = f'üé¥ | Choose a subject >'

                    rmk.add(com_buttons[3])
                    rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                else:

                    if bd_user['language_code'] == 'ru':
                        com_buttons = ['‚Ü™ –ù–∞–∑–∞–¥', 'üîª –°–Ω—è—Ç—å']
                        textt = f'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç >'
                    else:
                        textt = f'üé¥ | Choose a subject >'
                        com_buttons = ['‚Ü™ Back', 'üîª Remove']

                    rmk.add(com_buttons[1])
                    rmk.add(com_buttons[0])

                def ret(message, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it, lg, type_eq, dino_id):
                    if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                        res = None

                    else:
                        if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂', 'üîª –°–Ω—è—Ç—å', 'üîª Remove']:
                            res = message.text
                        else:
                            res = None

                    if res == None:
                        if bd_user['language_code'] == 'ru':
                            text = "‚öô | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ"
                        else:
                            text = "‚öô | Return"

                        bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'dungeon_menu', user))
                        return '12'

                    else:
                        if res == '‚óÄ':
                            if page - 1 == 0:
                                page = 1
                            else:
                                page -= 1

                            work_pr(message, pages, page, items_id, ind_sort_it, lg, type_eq, dino_id)

                        elif res == '‚ñ∂':
                            if page + 1 > len(l_pages):
                                page = len(l_pages)
                            else:
                                page += 1

                            work_pr(message, pages, page, items_id, ind_sort_it, lg, type_eq, dino_id)

                        else:

                            if res in ['üîª –°–Ω—è—Ç—å', 'üîª Remove']:

                                if type_eq in ['weapon', 'armor']:
                                    item = bd_user['dinos'][dino_id]['dungeon']['equipment'][type_eq]

                                    if item != None:

                                        users.update_one( {"userid": bd_user['userid']}, {"$push": {'inventory': item }} )

                                        bd_user['dinos'][dino_id]['dungeon']['equipment'][type_eq] = None

                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                                        if bd_user['language_code'] == 'ru':
                                            text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç"
                                        else:
                                            text = "üé¥ | Active item removed"

                                    else:

                                        if bd_user['language_code'] == 'ru':
                                            text = "üé¥ | –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!"
                                        else:
                                            text = "üé¥ | There is no active item at the moment!"


                                if type_eq in ['backpack']:
                                    item = bd_user['user_dungeon']['equipment'][type_eq]

                                    if item != None:
                                        users.update_one( {"userid": bd_user['userid']}, {"$push": {'inventory': item }} )

                                        bd_user['user_dungeon']['equipment'][type_eq] = None

                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'user_dungeon': bd_user['user_dungeon'] }} )

                                        if bd_user['language_code'] == 'ru':
                                            text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç"
                                        else:
                                            text = "üé¥ | Active item removed"

                                    else:

                                        if bd_user['language_code'] == 'ru':
                                            text = "üé¥ | –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!"
                                        else:
                                            text = "üé¥ | There is no active item at the moment!"

                                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'dungeon_menu', user))

                            else:
                                if type_eq in ['weapon', 'armor']:
                                    item = bd_user['dinos'][dino_id]['dungeon']['equipment'][type_eq]

                                    if item != None:

                                        bd_user['inventory'].append(item)
                                        bd_user['dinos'][dino_id]['dungeon']['equipment'][type_eq] = None


                                    itemm = items_id[ l_ind_sort_it[res] ]
                                    bd_user['dinos'][dino_id]['dungeon']['equipment'][type_eq] = itemm

                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                                if type_eq in ['backpack']:
                                    item = bd_user['user_dungeon']['equipment'][type_eq]

                                    if item != None:

                                        bd_user['inventory'].append(item)
                                        bd_user['user_dungeon']['equipment'][type_eq] = None

                                    itemm = items_id[ l_ind_sort_it[res] ]
                                    bd_user['user_dungeon']['equipment'][type_eq] = itemm

                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'user_dungeon': bd_user['user_dungeon'] }} )

                                if bd_user['language_code'] == 'ru':
                                    text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
                                else:
                                    text = "üé¥ | The active item is installed!"

                                bd_user['inventory'].remove(itemm)
                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                bot.send_message(message.chat.id, text, reply_markup = Functions.markup(bot, 'dungeon_menu', user))

                msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it, lg, type_eq, dino_id)

            work_pr(message, pages, page, items_id, ind_sort_it, lg, type_eq, dino_id)

        data_items = items_f['items']

        def type_answer(message, dino_id):
            dino = bd_user['dinos'][dino_id]

            if bd_user['language_code'] == 'ru':
                ans = [ 'üó° –û—Ä—É–∂–∏–µ', 'üõ° –ë—Ä–æ–Ω—è', 'üéí –†—é–∫–∑–∞–∫', '‚Ü™ –ù–∞–∑–∞–¥' ]
            else:
                ans = [ 'üó° Weapon', 'üõ° Armor', 'üéí Backpack', '‚Ü™ Back' ]

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)
            rmk.add(ans[0], ans[1], ans[2])
            rmk.add(ans[3])

            if dino['dungeon']['equipment']['weapon'] != None: w_n = data_items[ dino['dungeon']['equipment']['weapon']['item_id'] ][ f'name{ bd_user["language_code"] }' ]
            else: w_n = '-'

            if dino['dungeon']['equipment']['armor'] != None: a_n = data_items[ dino['dungeon']['equipment']['armor']['item_id'] ][ f'name{ bd_user["language_code"] }' ]
            else: a_n = '-'

            if bd_user['user_dungeon']['equipment']['backpack'] != None: b_n = data_items[ bd_user['user_dungeon']['equipment']['backpack']['item_id'] ][ f'name{ bd_user["language_code"] }' ]
            else: b_n = '-'

            if bd_user['language_code'] == 'ru':
                text = f'–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ:\nüó°: {w_n}\nüõ°: {a_n}\nüéí: {b_n}\n\n‚öô | –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å >'

            else:
                text = f'Equipped:\nüó°: {w_n}\nüõ°: {a_n}\nüéí: {b_n}\n\n‚öô | Choose what you want to equip >'

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, work_pr_zero, dino_id)

        n_dp, dp_a = Functions.dino_pre_answer(bot, message, type = 'noall')
        if n_dp == 1:

            bot.send_message(message.chat.id, f'‚ùå', reply_markup = Functions.markup(bot, Functions.last_markup(bd_user, alternative = 'dungeon_menu'), bd_user ))
            return

        if n_dp == 2:
            bd_dino = dp_a

            type_answer( message, list(bd_user['dinos'].keys())[0]  )

        if n_dp == 3:
            rmk = dp_a[0]
            text = dp_a[1]
            dino_dict = dp_a[2]

            def ret(message, dino_dict, user, bd_user):

                if message.text in dino_dict.keys():

                    type_answer( message, dino_dict[message.text][1] )

                else:
                    bot.send_message(message.chat.id, '‚ùå', reply_markup = Functions.markup(bot, Functions.last_markup(bd_user), bd_user ))

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)

    @staticmethod
    def dungeon_statist(bot, message, user, bd_user):

        if 'user_dungeon' in bd_user.keys():
            ns_res = None
            st = bd_user['user_dungeon']['statistics']

            for i in st:

                if ns_res == None:
                    ns_res = i

                else:
                    if i['end_floor'] >= ns_res['end_floor']:
                        ns_res = i


            if ns_res != None:

                if bd_user['language_code'] == 'ru':
                    text = (f'*üóª | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ*\n'
                            f'üî• –í—Å–µ–≥–æ –∏–≥—Ä: {len(st)}\n\n'
                            f'*üëë | –õ—É—á—à–∞—è –∏–≥—Ä–∞*\n'
                            f'üß© –ù–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂: {ns_res["start_floor"]}\n'
                            f'üóù –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂: {ns_res["end_floor"]}\n'
                            f'üï∞ –í—Ä–µ–º—è: { Functions.time_end(ns_res["time"]) }\n')

                else:
                    text = (f'*üóª | Statistics in the dungeon*\n'
                            f'üî• Total games: { len(st) }\n\n'
                            f'*üëë | Best game*\n'
                            f'üß© Initial floor: { ns_res["start_floor"] }\n'
                            f'üóù Last floor: { ns_res["end_floor"] }\n'
                            f'üï∞ Time: { Functions.time_end(ns_res["time"], True) }\n')

            else:

                if bd_user['language_code'] == 'ru':
                    text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞.'
                else:
                    text = 'Statistics are not collected.'

            msg = bot.send_message(message.chat.id, text, parse_mode = 'Markdown')

    @staticmethod
    def quests(bot, message, user, bd_user):

        if 'user_dungeon' not in bd_user.keys():

            if bd_user['language_code'] == 'ru':
                text = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–∑–µ–º–µ–ª–∏–π!'
            else:
                text = 'You are not logged into the dungeon system!'

            bot.send_message(message.chat.id, text)

        else:

            if 'quests' not in bd_user['user_dungeon'].keys():

                bd_user['user_dungeon']['quests'] = {
                    'activ_quests': [],
                    'max_quests': 5,
                    'ended': 0,
                }

                users.update_one( {"userid": bd_user['userid']}, {"$set": {'user_dungeon.quests': bd_user['user_dungeon']['quests'] }} )

            if bd_user['language_code'] == 'ru':
                text = f"üé™ | –ú–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {bd_user['user_dungeon']['quests']['ended']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤: {len(bd_user['user_dungeon']['quests']['activ_quests'])}"
            else:
                text = f"üé™ | Quest menu\nCompleted: {bd_user['user_dungeon']['quests']['ended']}\nNumber of active quests: {len(bd_user['user_dungeon']['quests']['activ_quests'])}"

            msg = bot.send_message(message.chat.id, text)

            if bd_user['user_dungeon']['quests']['activ_quests'] != []:

                for quest in bd_user['user_dungeon']['quests']['activ_quests']:
                    text = f"üé™ | {quest['name']}\n"
                    markup_inline = types.InlineKeyboardMarkup()

                    if bd_user['language_code'] == 'ru':
                        text += f"–¢–∏–ø: "

                        if quest['type'] == 'get':
                            text += 'üîé –ü–æ–∏—Å–∫\n'

                        if quest['type'] == 'kill':
                            text += '‚ò† –£–±–∏–π—Å—Ç–≤–æ\n'

                        if quest['type'] == 'come':
                            text += 'üóª –ü–æ–∫–æ—Ä–µ–Ω–∏–µ\n'

                        if quest['type'] == 'do':
                            text += 'üï∞ –ó–∞–¥–∞–Ω–∏–µ\n'

                    else:
                        text += f"Type: "

                        if quest['type'] == 'get':
                            text += 'üîé Search\n'

                        if quest['type'] == 'kill':
                            text += '‚ò† Murder\n'

                        if quest['type'] == 'come':
                            text += 'üóª Conquest\n'

                        if quest['type'] == 'do':
                            text += 'üï∞ Task\n'


                    if quest['type'] == 'get':

                        if bd_user['language_code'] == 'ru':
                            text += f'–î–æ—Å—Ç–∞–Ω—å—Ç–µ: {", ".join(Functions.sort_items_col(quest["get_items"], "ru") )}'

                            inl_l = {
                            'üìå | –ó–∞–≤–µ—Ä—à–∏—Ç—å': f"complete_quest {quest['id']}",
                            'üîó | –£–¥–∞–ª–∏—Ç—å': f"delete_quest {quest['id']}"
                            }


                        else:
                            text += f'–î–æ—Å—Ç–∞–Ω—å—Ç–µ: {", ".join(Functions.sort_items_col(quest["get_items"], "en") )}'

                            inl_l = {
                            'üìå | Finish': f"complete_quest {quest['id']}",
                            'üîó | Delete': f"delete_quest {quest['id']}"
                            }

                    if quest['type'] == 'kill':

                        if bd_user['language_code'] == 'ru':
                            text += f"–£–±–µ–π—Ç–µ: { mobs_f['mobs'][ quest['mob'] ]['name'][bd_user['language_code']]} {quest['col'][1]} / {quest['col'][0]}"

                            inl_l = {
                            'üìå | –ó–∞–≤–µ—Ä—à–∏—Ç—å': f"complete_quest {quest['id']}",
                            'üîó | –£–¥–∞–ª–∏—Ç—å': f"delete_quest {quest['id']}"
                            }
                        else:
                            text += f"Kill: { mobs_f['mobs'][ quest['mob'] ]['name'][bd_user['language_code']]} {quest['col'][1]} / {quest['col'][0]}"

                            inl_l = {
                            'üìå | Finish': f"complete_quest {quest['id']}",
                            'üîó | Delete': f"delete_quest {quest['id']}"
                            }

                    if quest['type'] == 'come':
                        markup_inline = types.InlineKeyboardMarkup(row_width = 1)

                        if bd_user['language_code'] == 'ru':
                            text += f'–î–æ–π–¥–∏—Ç–µ –¥–æ —ç—Ç–∞–∂–∞ #{quest["lvl"]}'

                            inl_l = {
                            '–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏': '-',
                            'üîó | –£–¥–∞–ª–∏—Ç—å': f"delete_quest {quest['id']}"
                            }
                        else:
                            text += f'Get to the floor #{quest["lvl"]}'

                            inl_l = {
                            'Completed automatically': '-',
                            'üîó | Delete': f"delete_quest {quest['id']}"
                            }

                    if quest['type'] == 'do':
                        target = quest['target']
                        dp_type = quest['dp_type']

                        if dp_type == 'game':

                            if bd_user['language_code'] == 'ru':
                                text += f'–ü–æ–∏–≥—Ä–∞–π—Ç–µ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º: {target[1]} / {target[0]} –º–∏–Ω.'
                            else:
                                text += f'Play with a dinosaur: {target[1]} / {target[0]} min.'

                        if dp_type == 'journey':

                            if bd_user['language_code'] == 'ru':
                                text += f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: {target[1]} / {target[0]} —Ä–∞–∑.'
                            else:
                                text += f'Send the dinosaur on a journey: {target[1]} / {target[0]} times.'

                        if dp_type == 'hunting':

                            if bd_user['language_code'] == 'ru':
                                text += f'–ù–∞–π–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –æ—Ö–æ—Ç–µ: {target[1]} / {target[0]}'
                            else:
                                text += f'Find items on the hunt: {target[1]} / {target[0]}'

                        if dp_type == 'fishing':

                            if bd_user['language_code'] == 'ru':
                                text += f'–í—ã–ª–æ–≤–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {target[1]} / {target[0]}'
                            else:
                                text += f'Catch items: {target[1]} / {target[0]}'

                        if dp_type == 'collecting':

                            if bd_user['language_code'] == 'ru':
                                text += f'–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {target[1]} / {target[0]}'
                            else:
                                text += f'Collect items: {target[1]} / {target[0]}'

                        if dp_type == 'feed':

                            lang = bd_user['language_code']

                            if bd_user['language_code'] == 'ru':
                                text += f'–ù–∞–∫–æ—Ä–º–∏—Ç–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞: \n\n'
                            else:
                                text += f'Feed the dinosaur: \n\n'

                            for i in target.keys():
                                item = items_f['items'][i]
                                target_item = target[i]

                                text += f'{item[f"name{lang}"]}: {target_item[1]} / {target_item[0]}\n'

                        if bd_user['language_code'] == 'ru':
                            inl_l = {
                            'üìå | –ó–∞–≤–µ—Ä—à–∏—Ç—å': f"complete_quest {quest['id']}",
                            'üîó | –£–¥–∞–ª–∏—Ç—å': f"delete_quest {quest['id']}"
                            }

                        else:
                            inl_l = {
                            'üìå | Finish': f"complete_quest {quest['id']}",
                            'üîó | Delete': f"delete_quest {quest['id']}"
                            }


                    markup_inline.add( *[ types.InlineKeyboardButton( text = inl, callback_data = f"{inl_l[inl]}") for inl in inl_l.keys() ])

                    if bd_user['language_code'] == 'ru':
                        text += f'\n\nüëë | –ù–∞–≥—Ä–∞–¥–∞\n–ú–æ–Ω–µ—Ç—ã: '
                    else:
                        text += f'\n\nüëë | Reward\n–ú–æ–Ω–µ—Ç—ã: '

                    text += f"{quest['reward']['money']}üí∞"

                    if quest['reward']['items'] != []:

                        if bd_user['language_code'] == 'ru':
                            text += f"\n–ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(Functions.sort_items_col(quest['reward']['items'], 'ru') )}"
                        else:
                            text += f"\nItems: {', '.join(Functions.sort_items_col(quest['reward']['items'], 'en') )}"

                    if bd_user['language_code'] == 'ru':
                        text += f"\n\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {Functions.time_end(quest['time'] - int(time.time()), mini = False)}"

                    else:
                        text += f"\n\n‚è≥ Time left: {Functions.time_end(quest['time']  - int(time.time()), mini = True)}"

                    bot.send_message(message.chat.id, text, reply_markup = markup_inline)
                    time.sleep(0.5)
