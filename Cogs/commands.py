import telebot
from telebot import types
import random
import json
import pymongo
from PIL import Image, ImageFont, ImageDraw, ImageOps, ImageSequence, ImageFilter
import io
from io import BytesIO
import time
import os
import threading
import sys
from memory_profiler import memory_usage
import pprint
from fuzzywuzzy import fuzz

from functions import functions

sys.path.append("..")
import config


client = pymongo.MongoClient(config.CLUSTER_TOKEN)
users = client.bot.users
referal_system = client.bot.referal_system
market = client.bot.market

with open('data/items.json', encoding='utf-8') as f:
    items_f = json.load(f)

with open('data/dino_data.json', encoding='utf-8') as f:
    json_f = json.load(f)

class commands:
    users = users
    referal_system = referal_system
    market = market
    items_f = items_f
    json_f = json_f

    @staticmethod
    def start_game(bot, message, user):

        if users.find_one({"userid": user.id}) == None:

            bd_user = users.find_one({"userid": user.id})
            try:
                r = bot.get_chat_member(-1001673242031, user.id)
            except:
                return

            if r.status == 'left':

                if user.language_code == 'ru':
                    text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüî¥ | –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"* –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Å–ª–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"*, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!'
                    b1 = "ü¶ñ | –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                    b2 = "üîÑ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
                else:
                    text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüî¥ | Click on the *'Subscribe'* button to go to the channel, and then on the *'Check'*, to continue working!"
                    b1 = "ü¶ñ | Subscribe"
                    b2 = "üîÑ | Check"

                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add( types.InlineKeyboardButton(text= b1, url="https://t.me/DinoGochi"))
                markup_inline.add( types.InlineKeyboardButton(text= b2, callback_data = 'start') )

                bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

            else:

                if user.language_code == 'ru':
                    text = f'üéç | –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –∂–¥—ë—Ç, —Ç—ã –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∏ —Å—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?!\n\n–ï—Å–ª–∏ –¥–∞, —Ç–æ —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!'
                    b1 = "üéã | –ù–∞—á–∞—Ç—å!"
                else:
                    text = f"üéç | An exciting world of adventures awaits, are you ready to become the owner of a dinosaur and compete in the ranking with other users?!\n\nIf yes, then rather press the button from below!"
                    b1 = "üéã | Start!"


                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add( types.InlineKeyboardButton(text= b1, callback_data = 'start') )

                bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

    @staticmethod
    def project_reb(bot, message, user):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if bd_user != None and len(bd_user['dinos']) == 0 and functions.inv_egg(bd_user) == False and bd_user['lvl'][0] < 5:

                if bd_user['language_code'] == 'ru':
                    text =  f"–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –≤ —á—ë—Ä–Ω–æ–º –æ–¥–µ—è–Ω–∏–∏.\n\n"
                    text += f"–í—ã –≤–∏–¥–∏—Ç–µ, —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ —á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã –∏ –∫–∞–∫–æ–π-—Ç–æ —à—Ä–∞–º –Ω–∞ —â–µ–∫–µ, –Ω–æ –µ–≥–æ –≥–ª–∞–∑–∞ –Ω–µ –≤–∏–¥–Ω—ã –≤ —Ç–µ–Ω–∏ —à–ª—è–ø—ã.\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç { random.choice( ['–º–∏—Å—Ç–µ—Ä', '–¥–æ–∫—Ç–æ—Ä'] ) } { random.choice( ['–î–∂–µ–π–º—Å', '–†–æ–±–µ—Ä—Ç', '–í–∏–Ω—Å–µ–Ω—Ç', '–ê–ª—å–±–µ—Ä—Ç'] ) }, –∞ –≤–∞—Å...\n\n"
                    text += f"*–í—ã:* - ... {user.first_name}, {user.first_name} {user.last_name}, —Ç–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ {user.first_name}, –¥–∞–≤–Ω–æ –≤—ã –≤ –Ω–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ? _—É–ª—ã–±–∞–µ—Ç—Å—è_\n\n"
                    text += f"*–í—ã:* - ...–ß—Ç–æ? –ë–∏–∑–Ω–µ—Å? –û —á–µ–º, –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?!\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü–æ–Ω—è—Ç–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ... –¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º. _–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤ –±–ª–æ–∫–Ω–æ—Ç_\n\n"
                    text += f"*–í—ã:* - ...\n\n"
                    text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –î–∞–≤–∞–π—Ç–µ –±–ª–∏–∂–µ –∫ –¥–µ–ª—É, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫–ª—é—á–∏—Ç—å —Å –Ω–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –º—ã –ø–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º.\n\n"
                    text += f"*–í—ã:* - –Ø—è—è, —è –Ω–µ –∑–Ω–∞—é...\n\n"
                    text += f"*–í—ã:* - \n\n"
                    text += f"‚ùì | –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
                    b1 = ['‚ùì | –ö—Ç–æ –≤—ã —Ç–∞–∫–æ–π?', '‚ùì | –≠—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ?', '‚ùì | –ö—Ç–æ "–º—ã"?', 'üß© | –£ –º–µ–Ω—è –∂–µ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞, —Ç–∞–∫?']
                else:
                    text = f"A man in a black robe approaches you.\n\n"
                    text += f"You can see that the man has black hair and some kind of scar on his cheek, but his eyes are not visible in the shadow of the hat.\n\n"
                    text += f"*Personality:* - Hello, my name is { random.choice(['mister', 'doctor'] ) } { random.choice( ['James', 'Robert', 'Vincent', 'Albert'] ) }, and you...\n\n"
                    text += f"*You are:* - ... {user.first_name}, {user.first_name} {user.last_name}, that's my name\n\n"
                    text += f"*Personality:* - Fine {user.first_name}, how long have you been in our business? _ulybaet_\n\n"
                    text += f"*You are:* - ...What? Business? What are you talking about?!\n\n"
                    text += f"*Personality:* - I see, I see... So we'll write it down. _ Writes something in notepad_\n\n"
                    text += f"*You are:* - ...\n\n"
                    text += f"*Personality:* - Let's get down to business, we offer you to sign a contract with us, we get your coins and resources, you get an egg with a dinosaur.\n\n"
                    text += f"*You:* - I know, I don't know...\n\n"
                    text += f"*You:* - \n\n"
                    text += f"‚ùì | Choose the answer option'"
                    b1 = ['‚ùì | Who are you?', '‚ùì | Is it legal?', '‚ùì | Who are "we"?', "üß© | I don't have a choice, right?"]

                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add( types.InlineKeyboardButton(text= b1[0], callback_data = 'dead_answer1') )
                markup_inline.add( types.InlineKeyboardButton(text= b1[1], callback_data = 'dead_answer2') )
                markup_inline.add( types.InlineKeyboardButton(text= b1[2], callback_data = 'dead_answer3') )
                markup_inline.add( types.InlineKeyboardButton(text= b1[3], callback_data = 'dead_answer4') )

                bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

    @staticmethod
    def faq(bot, message, user):
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text2  = '*‚ùó FAQ*\n\n'
                text2 += "*‚îå* *–†–µ–¥–∫–æ—Å—Ç–∏ üéà*\n\n"
                text2 += "*‚îú* –°–æ–±—ã—Ç–∏—è –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏.\n–ß–µ–º –±–æ–ª—å—à–µ —Ä–µ–¥–∫–æ—Å—Ç—å, —Ç–µ–º —Å–ª–∞—â–µ –Ω–∞–≥—Ä–∞–¥–∞.\n\n"
                text2 += "*‚îú*  1. –û–±—ã—á–Ω–∞—è - 50%\n*‚îú*  2. –ù–µ–æ–±—ã—á–Ω–∞—è - 25%\n*‚îú*  3. –†–µ–¥–∫–∞—è - 15%\n*‚îú*  4. –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è - 9%\n*‚îî*  5. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è - 1%\n\n"
                text2 += "*‚îå* *–í–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏—è üïπ*\n\n"
                text2 += "*‚îú* –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∏–Ω–æ–∑–∞—Ä–≤–æ–º –ø–µ—Ä–µ–¥–∏—Ç–µ –≤ `üïπ –î–µ–π—Å—Ç–≤–∏—è`.\n\n"
                text2 += "*‚îú*  1. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±—ã—Ç—å –ø–∏—â—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üçï –°–±–æ—Ä –ø–∏—â–∏` –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
                text2 += "*‚îú*  2. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å` –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∏—â—É.\n\n"
                text2 += "*‚îú*  3. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ç—Ä–µ—É–±–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è` –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
                text2 += "*‚îú*  4. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ —Å–ø–∞—Ç—å, `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å`\n\n"
                text2 += "*‚îî*  5. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ, –∏–≥—Ä—ã, —Å–Ω–∞ –≤ –Ω–æ—Ä–º–µ.\n\n"
                text2 += "*‚îå* *–ü—Ä–æ—Ñ–∏–ª—å üéÆ*\n"
                text2 += "*‚îî*  –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ `üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å`\n\n"
                text2 += "*‚îå* *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß*\n\n"
                text2 += "*‚îî*  –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫.\n\n"
            else:
                text2  = '*‚ùó FAQ*\n\n'
                text2 += "*‚îå* *Rarities üéà*\n\n"
                text2 += "*‚îú* Events and dinosaurs are divided into rarities.The greater the rarity, the sweeter the reward.\n\n"
                text2 += "*‚îú* 1. Normal - 50%\n*‚îú* 2. Unusual - 25%\n*‚îú* 3. Rare - 15%\n*‚îú* 4. Mystical - 9%\n*‚îî* 5. Legendary - 1%\n\n"
                text2 += "*‚îå* *Interaction üïπ*\n\n"
                text2 += "*‚îú* To interact with dinozarv, pass in `üïπ Actions`.\n\n"
                text2 += "*‚îú* 1. In order to feed the dinosaur, you need to get food, click on `üïπ Actions` > `üçï Food Collection` and follow the instructions.\n\n"
                text2 += "*‚îú*  2. To feed the dinosaur, click on `üïπ Actions` > `üç£ Feed` and choose the appropriate food.\n\n"
                text2 += "*‚îú* 3. To improve the mood of the dinosaur, it is necessary to entertain the dinosaur from time to time. Go to `üïπ Actions` > `üéÆ Entertainment` and follow the instructions.\n\n"
                text2 += "*‚îú* 4. To renew the dinosaur's powers, send it to sleep, `üïπ Action` > `üåô Put to bed`\n\n"
                text2 += "*‚îî* 5. To improve mood, it is required to keep the need for iodine, games, sleep normal.\n\n"
                text2 += "*‚îå* *Profile üéÆ*\n"
                text2 += "*‚îî* To view inventory or find out your statistics, go to `üëÅ Profile`\n\n"
                text2 += "*‚îå* *Settings üîß*\n\n"
                text2 += "*‚îî*  In the settings, you can rename the dinosaur, disable notifications, or switch the language.\n\n"

            bot.send_message(message.chat.id, text2, parse_mode = 'Markdown')

    @staticmethod
    def not_set(bot, message, user):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                ans = ['‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']
                text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π >'
            else:
                ans = ['‚úÖ Enable', '‚ùå Disable', '‚Ü™ Back']
                text = '‚ùó Interaction with notification settings, select notification activity >'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
            rmk.add(ans[0], ans[1])
            rmk.add(ans[2])

            def ret(message, ans, bd_user):

                if message.text not in ans or message.text == ans[2]:
                    res = None
                else:
                    res = message.text

                if res == None:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'settings', user))
                    return

                if res in ['‚úÖ Enable', '‚úÖ –í–∫–ª—é—á–∏—Ç—å']:

                    bd_user['settings']['notifications'] = True
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!'
                    else:
                        text = 'üîß Notifications have been activated!'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "settings", user))

                if res in ['‚ùå Disable', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å']:

                    bd_user['settings']['notifications'] = False
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã!'
                    else:
                        text = 'üîß Notifications have been disabled!'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "settings", user))

                else:
                    return

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, ans, bd_user)

    @staticmethod
    def lang_set(bot, message, user):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                ans = ['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', '‚Ü™ –ù–∞–∑–∞–¥']
                text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —è–∑—ã–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ >'
            else:
                ans = ['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', '‚Ü™ Back']
                text = '‚ùó Interaction with the language setting, select the language >'

            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
            rmk.add(ans[0], ans[1])
            rmk.add(ans[2])

            def ret(message, ans, bd_user):

                if message.text not in ans or message.text == ans[2]:
                    res = None
                else:
                    res = message.text

                if res == None:
                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'settings', user))
                    return

                if res == ans[0]:
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'language_code': 'en' }} )
                if res == ans[1]:
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'language_code': 'ru' }} )
                bd_user = users.find_one({"userid": user.id})

                if bd_user['language_code'] == 'ru':
                    text = 'üîß –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ üá∑üá∫ –†—É—Å—Å–∫–∏–π!'
                else:
                    text = 'üîß The language is set to üá¨üáß English!'

                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "settings", user))

            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
            bot.register_next_step_handler(msg, ret, ans, bd_user)

    @staticmethod
    def dino_prof(bot, message, user):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            def egg_profile(bd_user, user, bd_dino):
                egg_id = bd_dino['egg_id']

                if bd_user['language_code'] == 'ru':
                    lang = bd_user['language_code']
                else:
                    lang = 'en'

                t_incub = bd_dino['incubation_time'] - time.time()
                if t_incub < 0:
                    t_incub = 0

                time_end = functions.time_end(t_incub, True)
                if len(time_end) >= 18:
                    time_end = time_end[:-6]

                bg_p = Image.open(f"images/remain/egg_profile_{lang}.png")
                egg = Image.open("images/" + str(json_f['elements'][egg_id]['image']))
                egg = egg.resize((290, 290), Image.ANTIALIAS)

                img = functions.trans_paste(egg, bg_p, 1.0, (-50, 40))

                idraw = ImageDraw.Draw(img)
                line1 = ImageFont.truetype("fonts/Comic Sans MS.ttf", size = 35)

                idraw.text((430, 220), time_end, font = line1)

                img.save('profile.png')
                profile = open(f"profile.png", 'rb')

                return profile, time_end

            def dino_profile(bd_user, user, dino_user_id):

                dino_id = str(bd_user['dinos'][ dino_user_id ]['dino_id'])

                if bd_user['language_code'] == 'ru':
                    lang = bd_user['language_code']
                else:
                    lang = 'en'

                dino = json_f['elements'][dino_id]
                if 'class' in list(dino.keys()):
                    bg_p = Image.open(f"images/remain/{dino['class']}_icon.png")
                else:
                    bg_p = Image.open(f"images/remain/None_icon.png")

                class_ = dino['image'][5:8]

                panel_i = Image.open(f"images/remain/{class_}_profile_{lang}.png")

                img = functions.trans_paste(panel_i, bg_p, 1.0)

                dino_image = Image.open("images/"+str(json_f['elements'][dino_id]['image']))

                sz = 412
                dino_image = dino_image.resize((sz, sz), Image.ANTIALIAS)

                xy = -80
                x2 = 80
                img = functions.trans_paste(dino_image, img, 1.0, (xy + x2, xy, sz + xy + x2, sz + xy ))


                idraw = ImageDraw.Draw(img)
                line1 = ImageFont.truetype("fonts/Comic Sans MS.ttf", size = 35)

                idraw.text((530, 110), str(bd_user['dinos'][dino_user_id]['stats']['heal']), font = line1)
                idraw.text((530, 190), str(bd_user['dinos'][dino_user_id]['stats']['eat']), font = line1)

                idraw.text((750, 110), str(bd_user['dinos'][dino_user_id]['stats']['game']), font = line1)
                idraw.text((750, 190), str(bd_user['dinos'][dino_user_id]['stats']['mood']), font = line1)
                idraw.text((750, 270), str(bd_user['dinos'][dino_user_id]['stats']['unv']), font = line1)

                img.save('profile.png')
                profile = open(f"profile.png", 'rb')

                return profile

            if len(bd_user['dinos'].keys()) == 0:

                if bd_user['language_code'] == 'ru':
                    text = f'ü•ö | –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç—É –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —è–π—Ü–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–Ω–∫—É–±–∏—Ä–æ–≤–∞—Ç—å!'
                else:
                    text = f"ü•ö | You don't have any dinosaurs at the moment, please check your inventory. You must have an egg in your inventory that you can incubate!"

                bot.send_message(message.chat.id, text)

            elif len(bd_user['dinos'].keys()) > 0:

                def p_profile(message, bd_dino, user, bd_user, dino_user_id):

                    if bd_dino['status'] == 'incubation':

                        profile, time_end  = egg_profile(bd_user, user, bd_dino)
                        if bd_user['language_code'] == 'ru':
                            text = f'ü•ö | –Ø–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å: {time_end}'
                        else:
                            text = f'ü•ö | The egg is incubated, left: {time_end}'

                        bot.send_photo(message.chat.id, profile, text, reply_markup = functions.markup(bot, user = user))

                    if bd_dino['status'] == 'dino':

                        for i in bd_user['dinos'].keys():
                            if bd_user['dinos'][i] == bd_dino:
                                dino_user_id = i

                        profile = dino_profile(bd_user, user, dino_user_id = dino_user_id )

                        if bd_user['language_code'] == 'ru':
                            st_t = bd_dino['activ_status']

                            dino = json_f['elements'][str(bd_dino['dino_id'])]
                            pre_qual = dino['image'][5:8]
                            qual = ''
                            if pre_qual == 'com':
                                qual = '–û–±—ã—á–Ω—ã–π'
                            if pre_qual == 'unc':
                                qual = '–ù–µ–æ–±—ã—á–Ω—ã–π'
                            if pre_qual == 'rar':
                                qual = '–†–µ–¥–∫–∏–π'
                            if pre_qual == 'myt':
                                qual = '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π'
                            if pre_qual == 'leg':
                                qual = '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'

                            if bd_dino['activ_status'] == 'pass_active':
                                st_t = '–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç üí≠'
                            elif bd_dino['activ_status'] == 'sleep':
                                st_t = '—Å–ø–∏—Ç üåô'
                            elif bd_dino['activ_status'] == 'game':
                                st_t = '–∏–≥—Ä–∞–µ—Ç üéÆ'
                            elif bd_dino['activ_status'] == 'journey':
                                st_t = '–ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç üé¥'
                            elif bd_dino['activ_status'] in ['hunt', 'hunting']:
                                st_t = '—Å–±–æ—Ä –ø–∏—â–∏ ü•û'

                            if bd_dino['stats']['heal'] >= 60:
                                h_text = '‚ù§ *‚îå* –î–∏–Ω–æ–∑–∞–≤—Ä –∑–¥–æ—Ä–æ–≤'
                            elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                                h_text = '‚ù§ *‚îå* –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏'
                            elif bd_dino['stats']['heal'] <= 10:
                                h_text = '‚ù§ *‚îå* –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –∫—Ä–∞–π–Ω–µ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!'

                            if bd_dino['stats']['eat'] >= 60:
                                e_text = 'üçï *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç'
                            elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                                e_text = 'üçï *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –≥–æ–ª–æ–¥–µ–Ω'
                            elif bd_dino['stats']['eat'] <= 10:
                                e_text = 'üçï *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–∏—Ä–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–¥–∞!'

                            if bd_dino['stats']['game'] >= 60:
                                g_text = 'üéÆ *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å'
                            elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                                g_text = 'üéÆ *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —Å–∫—É—á–∞–µ—Ç...'
                            elif bd_dino['stats']['game'] <= 10:
                                g_text = 'üéÆ *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Å–∫—É–∫–∏!'

                            if bd_dino['stats']['mood'] >= 60:
                                m_text = 'üéà *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏'
                            elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                                m_text = 'üéà *‚îú* –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
                            elif bd_dino['stats']['mood'] <= 10:
                                m_text = 'üéà *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –≥—Ä—É—Å—Ç–∏—Ç!'

                            if bd_dino['stats']['unv'] >= 60:
                                u_text = 'üåô *‚îî* –î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ–ª–æ–Ω —Å–∏–ª'
                            elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                                u_text = 'üåô *‚îî* –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –µ—Å—Ç—å —Å–∏–ª—ã'
                            elif bd_dino['stats']['unv'] <= 10:
                                u_text = 'üåô *‚îî* –î–∏–Ω–æ–∑–∞–≤—Ä —É—Å—Ç–∞–ª!'


                            text = f'ü¶ñ *‚îå* –ò–º—è: {bd_dino["name"]}\nüëÅ‚Äçüó® *‚îú* –°—Ç–∞—Ç—É—Å: {st_t}\nüßø *‚îî* –†–µ–¥–∫–æ—Å—Ç—å: {qual}\n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                            if bd_dino['activ_status'] == 'journey':
                                w_t = bd_dino['journey_time'] - time.time()
                                if w_t < 0:
                                    w_t = 0
                                text += f"\n\nüå≥ *‚îå* –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: \n¬∑  –û—Å—Ç–∞–ª–æ—Å—å: { functions.time_end(w_t) }"

                            if bd_dino['activ_status'] == 'game':
                                if functions.acc_check(bd_user, '4', dino_user_id):
                                    w_t = bd_dino['game_time'] - time.time()
                                    if w_t < 0:
                                        w_t = 0
                                    text += f"\n\nüéÆ *‚îå* –ò–≥—Ä–∞: \n¬∑  –û—Å—Ç–∞–ª–æ—Å—å: { functions.time_end(w_t) }"

                        else:

                            st_t = bd_dino['activ_status']

                            dino = json_f['elements'][str(bd_dino['dino_id'])]
                            pre_qual = dino['image'][5:8]
                            qual = ''
                            if pre_qual == 'com':
                                qual = '–°ommon'
                            if pre_qual == 'unc':
                                qual = 'Unusual'
                            if pre_qual == 'rar':
                                qual = 'Rare'
                            if pre_qual == 'myt':
                                qual = 'Mystical'
                            if pre_qual == 'leg':
                                qual = 'Legendary'

                            if bd_dino['activ_status'] == 'pass_active':
                                st_t = 'does nothing üí≠'
                            elif bd_dino['activ_status'] == 'sleep':
                                st_t = 'sleeping üåô'
                            elif bd_dino['activ_status'] == 'game':
                                st_t = 'playing üéÆ'
                            elif bd_dino['activ_status'] == 'journey':
                                st_t = 'travels üé¥'
                            elif bd_dino['activ_status'] == 'hunting':
                                st_t = 'collecting food ü•û'

                            if bd_dino['stats']['heal'] >= 60:
                                h_text = '‚ù§ *‚îå* The dinosaur is healthy'
                            elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                                h_text = '‚ù§ *‚îå* Dinosaur in bad condition'
                            elif bd_dino['stats']['heal'] <= 10:
                                h_text = '‚ù§ *‚îå* The dinosaur is in extremely bad condition!'

                            if bd_dino['stats']['eat'] >= 60:
                                e_text = 'üçï *‚îú* The dinosaur is full'
                            elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                                e_text = 'üçï *‚îú* The dinosaur is hungry'
                            elif bd_dino['stats']['eat'] <= 10:
                                e_text = 'üçï *‚îú* The dinosaur is starving!'

                            if bd_dino['stats']['game'] >= 60:
                                g_text = "üéÆ *‚îú* The dinosaur doesn't want to play"
                            elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                                g_text = 'üéÆ *‚îú* The dinosaur is bored...'
                            elif bd_dino['stats']['game'] <= 10:
                                g_text = 'üéÆ *‚îú* The dinosaur is dying of boredom!'

                            if bd_dino['stats']['mood'] >= 60:
                                m_text = 'üéà *‚îú* The dinosaur is in a good mood'
                            elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                                m_text = 'üéà *‚îú* The dinosaur has a normal mood'
                            elif bd_dino['stats']['mood'] <= 10:
                                m_text = 'üéà *‚îú* The dinosaur is sad!'

                            if bd_dino['stats']['unv'] >= 60:
                                u_text = 'üåô *‚îî* The dinosaur is full of energy'
                            elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                                u_text = 'üåô *‚îî* The dinosaur has powers'
                            elif bd_dino['stats']['unv'] <= 10:
                                u_text = 'üåô *‚îî* The dinosaur is tired!'

                            text = f'ü¶ñ *‚îå* Name: {bd_dino["name"]}\nüëÅ‚Äçüó® *‚îú* Status: {st_t}\nüßø *‚îî* Rare: {qual}\n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                            if bd_dino['activ_status'] == 'journey':
                                w_t = bd_dino['journey_time'] - time.time()
                                if w_t < 0:
                                    w_t = 0
                                text += f"\n\nüå≥ *‚îå* Journey: \n¬∑  Left: { functions.time_end(w_t, True) }"

                            if bd_dino['activ_status'] == 'game':
                                if functions.acc_check(bd_user, '4', dino_user_id):
                                    w_t = bd_dino['game_time'] - time.time()
                                    if w_t < 0:
                                        w_t = 0
                                    text += f"\n\nüéÆ *‚îå* Game: \n¬∑  Left: { functions.time_end(w_t) }"

                        bot.send_photo(message.chat.id, profile, text, reply_markup = functions.markup(bot, user = user), parse_mode = 'Markdown' )

                n_dp, dp_a = functions.dino_pre_answer(bot, message)
                if n_dp == 1:

                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 1, user))
                    return

                if n_dp == 2:
                    bd_dino = dp_a
                    try:
                        p_profile(message, bd_dino, user, bd_user, list(bd_user['dinos'].keys())[0])
                    except:
                        print('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ2')

                if n_dp == 3:
                    rmk = dp_a[0]
                    text = dp_a[1]
                    dino_dict = dp_a[2]

                    def ret(message, dino_dict, user, bd_user):
                        try:
                            p_profile(message, dino_dict[message.text][0], user, bd_user, dino_dict[message.text][1])
                        except:
                            print('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ1')

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)
