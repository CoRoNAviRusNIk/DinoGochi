import telebot
from telebot import types
import pymongo
import sys
import random
import json
import time
from PIL import Image, ImageFont, ImageDraw, ImageOps, ImageSequence, ImageFilter
import io
from io import BytesIO

sys.path.append("..")
import config

client = pymongo.MongoClient(config.CLUSTER_TOKEN)
users = client.bot.users
market = client.bot.market
referal_system = client.bot.referal_system

with open('data/items.json', encoding='utf-8') as f:
    items_f = json.load(f)

with open('data/dino_data.json', encoding='utf-8') as f:
    json_f = json.load(f)

checks_data = {'memory': [0, time.time()], 'incub': [0, time.time(), 0], 'notif': [[], []], 'main': [[], [], []], 'main_hunt': [ [], [], [] ], 'main_game': [ [], [], [] ], 'main_sleep': [ [], [], [] ], 'main_pass': [ [], [], [] ], 'main_journey': [ [], [], [] ], 'col': 0}

reyt_ = [[], []]

class functions:

    json_f = json_f
    items_f = items_f
    checks_data = checks_data

    @staticmethod
    def trans_paste(fg_img,bg_img,alpha=10,box=(0,0)):
        fg_img_trans = Image.new("RGBA",fg_img.size)
        fg_img_trans = Image.blend(fg_img_trans,fg_img,alpha)
        bg_img.paste(fg_img_trans,box,fg_img_trans)
        return bg_img

    @staticmethod
    def chunks(lst, n):
        for i in range(0, len(lst), n):
            yield lst[i:i + n]

    @staticmethod
    def inline_markup(bot, element = None, user = None, inp_text:list = [None, None], arg = None):

        try:  #–æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å Int64 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            user = int(user)
        except:
            pass

        if type(user) == int:
            userid = user

        elif type(user) == dict:
            userid = user['userid']

        else:
            userid = user.id

        bd_user = users.find_one({"userid": userid})
        markup_inline = types.InlineKeyboardMarkup()

        if element == 'inventory' and bd_user != None: #markup_inline

            if bd_user['language_code'] == 'ru':
                markup_inline.add(
                types.InlineKeyboardButton( text = f'üç≠ | {inp_text[0]}', callback_data = f"inventory")
                )

            else:
                markup_inline.add(
                types.InlineKeyboardButton( text = f'üç≠ | {inp_text[1]}', callback_data = f"inventory")
                )

        elif element == 'requests' and bd_user != None: #markup_inline

            if bd_user['language_code'] == 'ru':
                markup_inline.add(
                types.InlineKeyboardButton( text = f'üë• | {inp_text[0]}', callback_data = f"requests")
                )

            else:
                markup_inline.add(
                types.InlineKeyboardButton( text = f'üë• | {inp_text[1]}', callback_data = f"requests")
                )

        elif element == 'send_request' and bd_user != None: #markup_inline

            if bd_user['language_code'] == 'ru':
                markup_inline.add(
                types.InlineKeyboardButton( text = f'‚úî | {inp_text[0]}', callback_data = f"send_request")
                )

            else:
                markup_inline.add(
                types.InlineKeyboardButton( text = f'‚úî | {inp_text[1]}', callback_data = f"send_request")
                )

        elif element == 'open_dino_profile' and bd_user != None: #markup_inline

            if bd_user['language_code'] == 'ru':
                markup_inline.add(
                types.InlineKeyboardButton( text = f'ü¶ï | {inp_text[0]}', callback_data = f"open_dino_profile_{arg}")
                )

            else:
                markup_inline.add(
                types.InlineKeyboardButton( text = f'ü¶ï | {inp_text[1]}', callback_data = f"open_dino_profile_{arg}")
                )

        else:
            print(f'{element}\n{user.first_name}')

        return markup_inline

    @staticmethod
    def markup(bot, element = 1, user = None, inp_text:list = [None, None]):

        try:  #–æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å Int64 –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            user = int(user)
        except:
            pass

        if type(user) == int:
            userid = user

        elif type(user) == dict:
            userid = int(user['userid'])

        else:
            userid = user.id

        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
        bd_user = users.find_one({"userid": userid})

        if bd_user != None and len(bd_user['dinos']) == 0 and functions.inv_egg(bd_user) == False and bd_user['lvl'][0] < 5:

            if bd_user['language_code'] == 'ru':
                nl = "üß© –ü—Ä–æ–µ–∫—Ç: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ"
            else:
                nl = 'üß© Project: Rebirth'

            markup.add(nl)
            return markup

        if bd_user != None and len(bd_user['dinos']) == 0 and functions.inv_egg(bd_user) == False and bd_user['lvl'][0] >= 5:

            if bd_user['language_code'] == 'ru':
                nl = 'üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å'
            else:
                nl = 'üéÆ Inventory'

            markup.add(nl)
            return markup

        if element == 1 and bd_user != None:

            if len(list(bd_user['dinos'])) == 1 and bd_user['dinos']['1']['status'] == 'incubation' and bd_user['lvl'][0] < 2:

                if bd_user['language_code'] == 'ru':
                    nl = ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üë• –î—Ä—É–∑—å—è', '‚ùó FAQ']
                else:
                    nl = ['ü¶ñ Dinosaur', 'üîß Settings', 'üë• Friends', '‚ùó FAQ']

                item1 = types.KeyboardButton(nl[0])
                item2 = types.KeyboardButton(nl[1])
                item3 = types.KeyboardButton(nl[2])
                item4 = types.KeyboardButton(nl[3])

                markup.add(item1, item2, item3, item4)

            else:

                if bd_user['language_code'] == 'ru':
                    nl = ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'üïπ –î–µ–π—Å—Ç–≤–∏—è', 'üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å', 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üë• –î—Ä—É–∑—å—è', '‚ùó FAQ']

                else:
                    nl = ['ü¶ñ Dinosaur', 'üïπ Actions', 'üëÅ‚Äçüó® Profile', 'üîß Settings', 'üë• Friends', '‚ùó FAQ']

                item1 = types.KeyboardButton(nl[0])
                item2 = types.KeyboardButton(nl[1])
                item3 = types.KeyboardButton(nl[2])
                item4 = types.KeyboardButton(nl[3])
                item5 = types.KeyboardButton(nl[4])

                if 'vis.faq' in bd_user['settings'].keys() and bd_user['settings']['vis.faq'] == False:
                    nl.remove('‚ùó FAQ')
                    markup.add(item1, item2, item3, item4, item5)

                else:
                    item6 = types.KeyboardButton(nl[5])
                    markup.add(item1, item2, item3, item4, item5, item6)

        elif element == 1:
            try:
                if user.language_code == 'ru':
                    nl = ['üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å']
                else:
                    nl = ['üç° Start playing']
            except:
                nl = ['üç° Start playing']

            item1 = types.KeyboardButton(nl[0])

            markup.add(item1)

        elif element == "settings" and bd_user != None:

            if 'vis.faq' not in bd_user['settings']:
                bd_user['settings']['vis.faq'] = True

                users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

            markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)

            if bd_user['language_code'] == 'ru':
                nl = ['‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', "üëÖ –Ø–∑—ã–∫", 'üí¨ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', '‚Åâ –í–∏–¥–∏–º–æ—Å—Ç—å FAQ', '‚Ü™ –ù–∞–∑–∞–¥']

            else:
                nl = ['‚ùó Notifications', "üëÖ Language", 'üí¨ Rename', '‚Åâ Visibility FAQ', '‚Ü™ Back']

            item1 = types.KeyboardButton(nl[0])
            item2 = types.KeyboardButton(nl[1])
            item3 = types.KeyboardButton(nl[2])
            item4 = types.KeyboardButton(nl[3])
            item5 = types.KeyboardButton(nl[4])

            markup.add(item1, item2, item3, item4, item5)

        elif element == "friends-menu" and bd_user != None:

            if bd_user['language_code'] == 'ru':
                nl = ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", 'üìú –°–ø–∏—Å–æ–∫', '‚ûñ –£–¥–∞–ª–∏—Ç—å', 'üíå –ó–∞–ø—Ä–æ—Å—ã', 'ü§ç –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞', '‚Ü™ –ù–∞–∑–∞–¥']

            else:
                nl = ["‚ûï Add", 'üìú List', '‚ûñ Delete', 'üíå Inquiries', 'ü§ç Invite a friend', '‚Ü™ Back']

            item1 = types.KeyboardButton(nl[0])
            item2 = types.KeyboardButton(nl[1])
            item3 = types.KeyboardButton(nl[2])
            item4 = types.KeyboardButton(nl[3])
            item5 = types.KeyboardButton(nl[4])
            item6 = types.KeyboardButton(nl[5])

            markup.add(item1, item2, item3, item4, item5)
            markup.add(item6)

        elif element == "referal-system" and bd_user != None:

            if 'referal_system' in bd_user.keys():

                if bd_user['language_code'] == 'ru':
                    nl = [f'üé≤ –ö–æ–¥: {bd_user["referal_system"]["my_cod"]}', 'üë• –ú–µ–Ω—é –¥—Ä—É–∑–µ–π']

                    if bd_user["referal_system"]["friend_cod"] == None:
                        nl.insert(1, 'üéû –í–≤–µ—Å—Ç–∏ –∫–æ–¥')
                    else:
                        nl.insert(1, f'üéû –î—Ä—É–≥: {bd_user["referal_system"]["friend_cod"]}')
                else:
                    nl = [f'üé≤ Code: {bd_user["referal_system"]["my_cod"]}', 'üë• Friends Menu']

                    if bd_user["referal_system"]["friend_cod"] == None:
                        nl.insert(1, 'üéû Enter Code')
                    else:
                        nl.insert(1, f'üéû Friend: {bd_user["referal_system"]["friend_cod"]}')

            else:

                if bd_user['language_code'] == 'ru':
                    nl = ['üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', 'üéû –í–≤–µ—Å—Ç–∏ –∫–æ–¥', 'üë• –ú–µ–Ω—é –¥—Ä—É–∑–µ–π']
                else:
                    nl = ['üé≤ Generate Code', 'üéû Enter Code', 'üë• Friends Menu']

            item1 = types.KeyboardButton(nl[0])
            item2 = types.KeyboardButton(nl[1])
            item3 = types.KeyboardButton(nl[2])

            markup.add(item1, item2)
            markup.add(item3)

        elif element == 'actions' and bd_user != None:
            markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)

            if len(bd_user['dinos']) == 0:
                return markup

            try:
                dino = bd_user['dinos'][ bd_user['settings']['dino_id'] ]
            except:
                if len(bd_user['dinos']) > 0:
                    bd_user['settings']['dino_id'] = list(bd_user['dinos'].keys())[0]
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

            if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['status'] == 'incubation':
                ll = []

                if bd_user['language_code'] == 'ru':
                    nl = 'ü•ö –Ø–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è'
                    nll = '‚Ü™ –ù–∞–∑–∞–¥'
                else:
                    nl = 'ü•ö The egg is incubated'
                    nll = '‚Ü™ Back'

                if len(bd_user['dinos']) > 1:
                    nid_dino = bd_user['settings']['dino_id']
                    ll.append(f'ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä: {nid_dino}')

                ll.append(nl)
                ll.append(nll)

                markup.add(* [ x for x in ll ])

            if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['status'] == 'dino':

                if bd_user['language_code'] == 'ru':
                    nl = ['üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']

                    if len(bd_user['dinos']) == 1:
                        nid_dino = list(bd_user['dinos'].keys())[0]
                        dino = bd_user['dinos'][ str(nid_dino) ]

                    if len(bd_user['dinos']) > 1:
                        try:
                            nid_dino = bd_user['settings']['dino_id']
                            dino = bd_user['dinos'][ str(nid_dino) ]
                        except:
                            nid_dino = list(bd_user['dinos'].keys())[0]
                            bd_user['settings']['dino_id'] = list(bd_user['dinos'].keys())[0]
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                            dino = bd_user['dinos'][ str(nid_dino) ]

                    if len(bd_user['dinos']) == 0:
                        return markup

                    if dino['activ_status'] == 'journey':
                        nl.insert(2, 'üéë –í–µ—Ä–Ω—É—Ç—å')
                    else:
                        nl.insert(2, 'üéë –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ')

                    if dino['activ_status'] == 'sleep':
                        nl.insert(3, 'üåô –ü—Ä–æ–±—É–¥–∏—Ç—å')
                    else:
                        nl.insert(3, 'üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å')

                    if dino['activ_status'] != 'hunting':
                        nl.insert(4, 'üçï –°–±–æ—Ä –ø–∏—â–∏')

                    else:
                        nl.insert(4, 'üçï –ü—Ä–æ–≥—Ä–µ—Å—Å')

                    if len(bd_user['dinos']) > 1:
                        item0 = types.KeyboardButton(f'ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä: {nid_dino}')
                        item1 = types.KeyboardButton(nl[0])
                        item2 = types.KeyboardButton(nl[1])
                        item3 = types.KeyboardButton(nl[2])
                        item4 = types.KeyboardButton(nl[3])
                        item5 = types.KeyboardButton(nl[4])
                        item6 = types.KeyboardButton(nl[5])

                        markup.add(item0, item1, item2, item3, item4, item5, item6)

                    else:
                        markup.add(* [ x for x in nl ])

                else:
                    nl = ['üéÆ Entertainments', 'üç£ Feed', '‚Ü™ Back']

                    if len(bd_user['dinos']) == 1:
                        nid_dino = list(bd_user['dinos'].keys())[0]
                        dino = bd_user['dinos'][ str(nid_dino) ]

                    if len(bd_user['dinos']) > 1:
                        if 'dino_id' not in bd_user['settings']:
                            bd_user['settings']['dino_id'] = list(bd_user['dinos'].keys())[0]
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                        try:
                            nid_dino = bd_user['settings']['dino_id']
                            dino = bd_user['dinos'][ str(nid_dino) ]
                        except:
                            nid_dino = list(bd_user['dinos'].keys())[0]
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                            dino = bd_user['dinos'][ str(nid_dino) ]

                    if len(bd_user['dinos']) == 0:
                        return markup

                    if dino['activ_status'] == 'journey':
                        nl.insert(2, 'üéë Call')
                    else:
                        nl.insert(2, 'üéë Journey')

                    if dino['activ_status'] == 'sleep':
                        nl.insert(3, 'üåô Awaken')
                    else:
                        nl.insert(3, 'üåô Put to bed')

                    if dino['activ_status'] != 'hunting':
                        nl.insert(4, 'üçï Collecting food')

                    else:
                        nl.insert(4, 'üçï Progress')

                    if len(bd_user['dinos']) > 1:
                        item0 = types.KeyboardButton(f'ü¶ñ Dino: {nid_dino}')
                        item1 = types.KeyboardButton(nl[0])
                        item2 = types.KeyboardButton(nl[1])
                        item3 = types.KeyboardButton(nl[2])
                        item4 = types.KeyboardButton(nl[3])
                        item5 = types.KeyboardButton(nl[4])
                        item6 = types.KeyboardButton(nl[5])

                        markup.add(item0, item1, item2, item3, item4, item5, item6)

                    else:

                        item1 = types.KeyboardButton(nl[0])
                        item2 = types.KeyboardButton(nl[1])
                        item3 = types.KeyboardButton(nl[2])
                        item4 = types.KeyboardButton(nl[3])
                        item5 = types.KeyboardButton(nl[4])
                        item6 = types.KeyboardButton(nl[5])

                        markup.add(item1, item2, item3, item4, item5, item6)

        elif element == 'games' and bd_user != None:

            if bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['activ_status'] == 'game':
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 1)

                if bd_user['language_code'] == 'ru':
                    nl = ['‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', '‚Ü™ –ù–∞–∑–∞–¥']
                else:
                    nl = ['‚ùå Stop the game', '‚Ü™ Back']

                item1 = types.KeyboardButton(nl[0])
                item2 = types.KeyboardButton(nl[1])

                markup.add(item1, item2)

            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)

                if bd_user['language_code'] == 'ru':
                    nl = ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'ü™Å –ó–º–µ–π', 'üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèê –ú—è—á']

                    if functions.acc_check(bot, bd_user, '44', str(bd_user['settings']['dino_id'])):
                        for x in ['üß© –ü–∞–∑–ª—ã', '‚ôü –®–∞—Ö–º–∞—Ç—ã', 'üß± –î–∂–µ–Ω–≥–∞', 'üé≤ D&D']:
                            nl.append(x)

                    nl.append('‚Ü© –ù–∞–∑–∞–¥')

                else:
                    nl = ['üéÆ Console', 'ü™Å Snake', 'üèì Ping Pong', 'üèê Ball']

                    if functions.acc_check(bot, bd_user, '44', str(bd_user['settings']['dino_id'])):
                        for x in ['üß© Puzzles', '‚ôü Chess', 'üß± Jenga', 'üé≤ D&D']:
                            nl.append(x)

                    nl.append('‚Ü© Back')

                markup.add(* [x for x in nl] )

        elif element == "profile" and bd_user != None:

            if bd_user['language_code'] == 'ru':
                nl = ['üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'üé¢ –†–µ–π—Ç–∏–Ω–≥', 'üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 'üõí –†—ã–Ω–æ–∫', '‚Ü™ –ù–∞–∑–∞–¥']

            else:
                nl = ['üìú Information', 'üéÆ Inventory', 'üé¢ Rating', 'üíç Accessories', 'üõí Market', '‚Ü™ Back']

            markup.add(nl[0], nl[1])
            markup.add(nl[2], nl[3], nl[4])
            markup.add(nl[5])

        elif element == "market" and bd_user != None:

            if bd_user['language_code'] == 'ru':
                nl = ['üõí –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üìú –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã', '‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å']

            else:
                nl = ['üõí Random Products', 'üîç Product Search', '‚ûï Add Product', 'üìú My products', '‚ûñ Delete Product', 'üëÅ‚Äçüó® Profile']

            markup.add(nl[0], nl[1])
            markup.add(nl[2], nl[3], nl[4])
            markup.add(nl[5])


        else:
            print(f'{element}\n{user.first_name}')

        users.update_one( {"userid": userid}, {"$set": {f'settings.last_markup': element }} )
        return markup

    @staticmethod
    def time_end(seconds:int, mini = False):

        def ending_w(word, number:str, mini):
            if int(number) not in [11,12,13,14,15]:
                ord = int(str(number)[int(len(str(number))) - 1:])
            else:
                ord = int(number)

            if word == '—Å–µ–∫—É–Ω–¥–∞':
                if mini != True:
                    if ord == 1:
                        newword = word
                    elif ord in [2,3,4]:
                        newword = '—Å–µ–∫—É–Ω–¥—ã'
                    elif ord > 4 or ord == 0:
                        newword = '—Å–µ–∫—É–Ω–¥'
                else:
                    newword = 's'

            elif word == '–º–∏–Ω—É—Ç–∞':
                if mini != True:
                    if ord == 1:
                        newword = word
                    elif ord in [2,3,4]:
                        newword = '–º–∏–Ω—É—Ç—ã'
                    elif ord > 4 or ord == 0:
                        newword = '–º–∏–Ω—É—Ç'
                else:
                    newword = 'm'

            elif word == '—á–∞—Å':
                if mini != True:
                    if ord == 1:
                        newword = word
                    elif ord in [2,3,4]:
                        newword = '—á–∞—Å–∞'
                    elif ord > 4 or ord == 0:
                        newword = '—á–∞—Å–æ–≤'
                else:
                    newword = 'h'

            elif word == '–¥–µ–Ω—å':
                if mini != True:
                    if ord == 1:
                        newword = word
                    elif ord in [2,3,4]:
                        newword = '–¥–Ω—è'
                    elif ord > 4 or ord == 0:
                        newword = '–¥–Ω–µ–π'
                else:
                    newword = 'd'

            elif word == '–Ω–µ–¥–µ–ª—è':
                if mini != True:
                    if ord == 1:
                        newword = word
                    elif ord in [2,3,4]:
                        newword = '–Ω–µ–¥–µ–ª–∏'
                    elif ord > 4 or ord == 0:
                        newword = '–Ω–µ–¥–µ–ª—å'
                else:
                    newword = 'w'

            elif word == '–º–µ—Å—è—Ü':
                if mini != True:
                    if ord == 1:
                        newword = word
                    elif ord in [2,3,4]:
                        newword = '–º–µ—Å—è—Ü–∞'
                    elif ord > 4 or ord == 0:
                        newword = '–º–µ—Å—è—Ü–µ–≤'
                else:
                    newword = 'M'

            return newword


        mm = int(seconds//2592000)
        seconds -= mm*2592000
        w = int(seconds//604800)
        seconds -= w*604800
        d = int(seconds//86400)
        seconds -= d*86400
        h = int(seconds//3600)
        seconds -= h*3600
        m = int(seconds//60)
        seconds -= m*60
        s = int(seconds%60)

        if mm < 10: mm = f"0{mm}"
        if w < 10: w = f"0{w}"
        if d < 10: d = f"0{d}"
        if h < 10: h = f"0{h}"
        if m < 10: m = f"0{m}"
        if s < 10: s = f"0{s}"

        if m == '00' and h == '00' and d == '00' and w == '00' and mm == '00':
            return f"{s} {ending_w('—Å–µ–∫—É–Ω–¥–∞',s,mini)}"
        elif h == '00' and d == '00' and w == '00' and mm == '00':
            return f"{m} {ending_w('–º–∏–Ω—É—Ç–∞',m,mini)}, {s} {ending_w('—Å–µ–∫—É–Ω–¥–∞',s,mini)}"
        elif d == '00' and w == '00' and mm == '00':
            return f"{h} {ending_w('—á–∞—Å',h,mini)}, {m} {ending_w('–º–∏–Ω—É—Ç–∞',m,mini)}, {s} {ending_w('—Å–µ–∫—É–Ω–¥–∞',s,mini)}"
        elif w == '00' and mm == '00':
            return f"{d} {ending_w('–¥–µ–Ω—å',d,mini)}, {h} {ending_w('—á–∞—Å',h,mini)}, {m} {ending_w('–º–∏–Ω—É—Ç–∞',m,mini)}, {s} {ending_w('—Å–µ–∫—É–Ω–¥–∞',s,mini)}"
        elif mm == '00':
            return f"{w} {ending_w('–Ω–µ–¥–µ–ª—è',w,mini)}, {d} {ending_w('–¥–µ–Ω—å',d,mini)}, {h} {ending_w('—á–∞—Å',h,mini)}, {m} {ending_w('–º–∏–Ω—É—Ç–∞',m,mini)}, {s} {ending_w('—Å–µ–∫—É–Ω–¥–∞',s,mini)}"
        else:
            return  f"{mm} {ending_w('–º–µ—Å—è—Ü',mm,mini)}, {w} {ending_w('–Ω–µ–¥–µ–ª—è',w,mini)}, {d} {ending_w('–¥–µ–Ω—å',d,mini)}, {h} {ending_w('—á–∞—Å',h,mini)}, {m} {ending_w('–º–∏–Ω—É—Ç–∞',m,mini)}, {s} {ending_w('—Å–µ–∫—É–Ω–¥–∞',s,mini)}"


    @staticmethod
    def dino_pre_answer(bot, message, type:str = 'all'):
        id_dino = {}

        user = message.from_user
        bd_user = users.find_one({"userid": user.id})

        if bd_user == None:
            return 1, None

        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)

        if len(bd_user['dinos'].keys()) == 0:
            return 1, None

        elif len(bd_user['dinos'].keys()) == 1:
            return 2, bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]

        else:
            for dii in bd_user['dinos']:
                if bd_user['dinos'][dii]['status'] == 'incubation':
                    if type == 'all':
                        rmk.add( f"{dii}# ü•ö" )
                        id_dino[f"{dii}# ü•ö"] = [bd_user['dinos'][dii], dii]
                else:
                    rmk.add( f"{dii}# {bd_user['dinos'][dii]['name']}" )
                    id_dino[f"{dii}# {bd_user['dinos'][dii]['name']}"] = [bd_user['dinos'][dii], dii]

            if bd_user['language_code'] == 'ru':
                rmk.add('‚Ü™ –ù–∞–∑–∞–¥')
                text = 'ü¶ñ | –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
            else:
                rmk.add('‚Ü™ Back')
                text = 'ü¶ñ | Choose a dinosaur >'

            return 3, [rmk, text, id_dino]

    @staticmethod
    def user_dino_pn(user):
        if len(user['dinos'].keys()) == 0:
            return '1'
        else:
            id_list = []
            for i in user['dinos'].keys():
                try:
                    id_list.append(int(i))
                except:
                    pass
            return str(max(id_list) + 1)

    @staticmethod
    def random_dino(user, dino_id_remove, quality = None):
        if quality == None or quality == 'random':
            r_q = random.randint(1, 10000)
            if r_q in list(range(1, 5001)):
                quality = 'com'
            elif r_q in list(range(5001, 7501)):
                quality = 'unc'
            elif r_q in list(range(7501, 9001)):
                quality = 'rar'
            elif r_q in list(range(9001, 9801)):
                quality = 'myt'
            else:
                quality = 'leg'

        dino_id = None

        while dino_id == None:
            p_var = random.choice(json_f['data']['dino'])
            dino = json_f['elements'][str(p_var)]
            if dino['image'][5:8] == quality:
                dino_id = p_var

        dino = json_f['elements'][str(dino_id)]
        del user['dinos'][str(dino_id_remove)]
        user['dinos'][functions.user_dino_pn(user)] = {'dino_id': dino_id, "status": 'dino', 'activ_status': 'pass_active', 'name': dino['name'], 'stats':  {"heal": 100, "eat": random.randint(70, 100), 'game': random.randint(50, 100), 'mood': random.randint(7, 100), "unv": 100}, 'games': []}

        users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos']}} )

    @staticmethod
    def notifications_manager(bot, notification, user, arg = None, dino_id = '1', met = 'send'):

        if met == 'delete':

            if notification in ['friend_request', "friend_rejection", "friend_accept"]:
                if notification in user['notifications'].keys():
                    del user['notifications'][notification]
                    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )

            else:
                if dino_id in user['notifications']:
                    if notification in user['notifications'][dino_id].keys():
                        del user['notifications'][dino_id][notification]
                        users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )

                else:

                    user['notifications'][str(dino_id)] = {}
                    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )


        if met == 'check':
            if notification in ['friend_request', "friend_rejection", "friend_accept"]:
                if notification in list(user['notifications'].keys()) and user['notifications'][notification] == True:
                    return True
                else:
                    user['notifications'][notification] = False
                    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )
                    return False

            else:
                if str(dino_id) not in user['notifications'].keys():
                    user['notifications'][str(dino_id)] = {}

                    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )
                    return False

                else:
                    if notification in user['notifications'][dino_id]:
                        return user['notifications'][dino_id][notification]
                    else:
                        user['notifications'][dino_id][notification] = False
                        users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )
                        return False


        if met == 'send':

            if notification not in ['friend_request', "friend_rejection", "friend_accept"]:
                if dino_id in user['notifications'].keys():
                    user['notifications'][dino_id][notification] = True
                else:
                    user['notifications'][dino_id] = {}
                    user['notifications'][dino_id][notification] = True
                    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )
            else:
                user['notifications'][notification] = True

            users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )

            if user['settings']['notifications'] == True:
                try:
                    chat = bot.get_chat(user['userid'])
                except:
                    return False

                try:
                    dinoname = user['dinos'][ dino_id ]['name']
                except:
                    dinoname = 'none'

                if notification == "5_min_incub":

                    if user['language_code'] == 'ru':
                        text = f'ü•ö | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –≤—ã–ª—É–ø–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!'
                    else:
                        text = f'ü•ö | {chat.first_name}, your dinosaur will hatch in 5 minutes!'

                    try:
                        bot.send_message(user['userid'], text)
                    except:
                        pass

                elif notification == "incub":

                    if user['language_code'] == 'ru':
                        text = f'ü¶ñ | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä –≤—ã–ª—É–ø–∏–ª—Å—è! üéâ'
                    else:
                        text = f'ü¶ñ | {chat.first_name}, the dinosaur has hatched! üéâ'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], dino_id) )
                    except:
                        pass

                elif notification == "need_eat":

                    if user['language_code'] == 'ru':
                        text = f'üçï | {chat.first_name}, {dinoname} —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å, –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –¥–æ {arg}%!'
                    else:
                        text = f'üçï | {chat.first_name}, {dinoname} wants to eat, his need for food has dropped to {arg}%!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], dino_id))
                    except:
                        pass

                elif notification == "need_game":

                    if user['language_code'] == 'ru':
                        text = f'üéÆ | {chat.first_name}, {dinoname} —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å, –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
                    else:
                        text = f'üéÆ | {chat.first_name}, {dinoname} wants to play, his need for the game has dropped to {arg}%!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], dino_id))
                    except:
                        pass

                elif notification == "need_mood":

                    if user['language_code'] == 'ru':
                        text = f'ü¶ñ | {chat.first_name}, —É {dinoname} –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
                    else:
                        text = f'ü¶ñ | {chat.first_name}, {dinoname} is in a bad mood, his mood has sunk to {arg}%!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], dino_id))
                    except:
                        pass

                elif notification == "need_unv":

                    if user['language_code'] == 'ru':
                        text = f'üåô | {chat.first_name}, {dinoname} —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å, –µ–≥–æ —Ö–∞—Ä—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
                    else:
                        text = f'üåô | {chat.first_name}, {dinoname} wants to sleep, his sleep characteristic dropped to {arg}%!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], dino_id))
                    except:
                        pass

                elif notification == "dead":

                    if user['language_code'] == 'ru':
                        text = f'üí• | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫.... –£–º–∏—Ä...'
                        nl = "üß© –ü—Ä–æ–µ–∫—Ç: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ"
                        nl2 = 'üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å'
                    else:
                        text = f'üí• | {chat.first_name}, your dinosaur.... Died...'
                        nl = 'üß© Project: Rebirth'
                        nl2 = 'üéÆ Inventory'

                    if functions.inv_egg(user) == False:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                        markup.add(nl)

                        try:
                            bot.send_message(user['userid'], text, reply_markup = markup)
                        except:
                            pass

                    else:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
                        markup.add(nl2)

                        if user['language_code'] == 'ru':
                            text += f'\n\n–ù–µ —Å—Ç–æ–∏—Ç –ø–µ—á–∞–ª–∏—Ç—å—Å—è! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, —Ç–∞–º —É –≤–∞—Å –∑–∞–≤–∞–ª—è–ª–æ—Å—å –µ—â—ë –æ–¥–Ω–æ —è–π—Ü–æ!'

                        else:
                            text += f'\n\nDo not be sad! Take a look at the inventory, there you have another egg lying around!'

                        try:
                            bot.send_message(user['userid'], text, reply_markup = markup)
                        except:
                            pass

                elif notification == "woke_up":

                    if user['language_code'] == 'ru':
                        text = f'üåô | {chat.first_name}, {dinoname} –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –ø–æ–ª–æ–Ω —Å–∏–ª!'
                    else:
                        text = f'üåô | {chat.first_name}, {dinoname} is awake and full of energy!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], dino_id))
                    except Exception as error:
                        print('woke_up ', error)
                        pass

                elif notification == "game_end":

                    if user['language_code'] == 'ru':
                        text = f'üéÆ | {chat.first_name}, {dinoname} –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –∏–≥—Ä–∞—Ç—å!'
                    else:
                        text = f'üéÆ | {chat.first_name}, {dinoname} has stopped playing!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], dino_id))
                    except:
                        pass


                elif notification == "journey_end":

                    functions.journey_end_log(bot, user['userid'], dino_id)

                elif notification == "friend_request":

                    if user['language_code'] == 'ru':
                        text = f'üí¨ | {chat.first_name}, –≤–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!'
                    else:
                        text = f'üí¨ | {chat.first_name}, you have received a friend request!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, 'requests', chat.id, ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã', 'Check requests']))
                    except:
                        pass

                elif notification == "friend_accept":

                    if user['language_code'] == 'ru':
                        text = f'üí¨ | {chat.first_name}, {arg} –ø—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!'
                    else:
                        text = f'üí¨ | {chat.first_name}, {arg} accepted a friend request!'

                    try:
                        bot.send_message(user['userid'], text)
                    except:
                        pass

                elif notification == "friend_rejection":

                    if user['language_code'] == 'ru':
                        text = f'üí¨ | {chat.first_name}, –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è {arg}, –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω...'
                    else:
                        text = f'üí¨ | {chat.first_name}, your friend request {arg} has been rejected...'

                    try:
                        bot.send_message(user['userid'], text)
                    except:
                        pass

                elif notification == "hunting_end":

                    if user['language_code'] == 'ru':
                        text = f'üçï | {chat.first_name}, {dinoname} –≤–µ—Ä–Ω—É–ª—Å—è —Å–æ —Å–±–æ—Ä–∞ –ø–∏—â–∏!'
                    else:
                        text = f'üçï | {chat.first_name}, {dinoname} is back from collecting food!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, 'inventory', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'Open inventory']) )
                    except:
                        pass

                elif notification == "acc_broke":

                    item_d = items_f['items'][arg]

                    if user['language_code'] == 'ru':
                        text = f'üõ† | {chat.first_name}, –≤–∞—à –∞–∫—Å–µ—Å—Å—É–∞—Ä {item_d["nameru"]} —Å–ª–æ–º–∞–ª—Å—è!'
                    else:
                        text = f'üõ† | {chat.first_name}, your accessory {item_d["nameen"]} broke!'

                    try:
                        bot.send_message(user['userid'], text, reply_markup = functions.inline_markup(bot, 'inventory', chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'Open inventory']) )
                    except:
                        pass

                elif notification == "lvl_up":

                    if user['language_code'] == 'ru':
                        text = f'üéâ | {chat.first_name}, –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! ({arg})'
                    else:
                        text = f'üéâ | {chat.first_name}, your level has been raised! ({arg})'

                    try:
                        bot.send_message(user['userid'], text)
                    except:
                        pass


                else:
                    print(notification, 'notification')

    @staticmethod
    def check_data(t = None, ind = None, zn = None, m = 'ncheck'):
        global checks_data
        # {'memory': [0, time.time()], 'incub': [0, time.time(), 0], 'notif': [[], [time.time()]], 'main': [[], [time.time()], []], 'main_hunt': [ [], [], [] ], 'main_game': [ [], [], [] ], 'main_sleep': [ [], [], [] ], 'main_pass': [ [], [], [] ], 'col': 0}

        if m == 'check':
            return checks_data

        if t not in ['memory', 'incub',  'col_main', 'col_notif', 'col']:
            if len(checks_data[t][ind]) >= checks_data['col']:
                checks_data[t][ind] = []

        if m != 'check':
            if t in ['memory', 'incub']:
                checks_data[t][ind] = zn

            elif t not in ['col', 'memory']:
                checks_data[t][ind].append(zn)

            else:
                checks_data[t] = zn

    @staticmethod
    def inv_egg(user):

        for i in user['inventory']:
            if items_f['items'][i['item_id']]['type'] == 'egg':
                return True

        return False

    @staticmethod
    def random_items(com_i:list, unc_i:list, rar_i:list, myt_i:list, leg_i:list):

        r_q = random.randint(1, 100)
        if r_q in list(range(1, 51)):
            items = com_i
        elif r_q in list(range(51, 76)):
            items = unc_i
        elif r_q in list(range(76, 91)):
            items = rar_i
        elif r_q in list(range(91, 99)):
            items = myt_i
        else:
            items = leg_i

        return random.choice(items)

    @staticmethod
    def sort_items_col(nls_i:list, lg):
        dct = {}
        nl = []


        for i in nls_i:
            if i not in dct.keys():
                dct[i] = 1
            else:
                dct[i] += 1

        for i in dct.keys():
            it = dct[i]
            name = items_f['items'][i][f'name{lg}']
            nl.append(f"{name} x{it}")

        return nl

    @staticmethod
    def item_info(us_item, lg, mark: bool = True):

        def sort_materials(nls_i:list, lg):
            dct = {}
            nl = []

            for i in nls_i:
                if i['item'] not in dct.keys():
                    dct[i['item']] = 1
                else:
                    dct[i['item']] += 1

            itts = []
            for i in nls_i:
                if i not in itts:
                    name = items_f['items'][i['item']][f'name{lg}']
                    if i['type'] == 'endurance':
                        nl.append(f"{name} (‚¨á -{i['act']}) x{dct[i['item']]}")
                    else:
                        nl.append(f"{name} x{dct[i['item']]}")

                    itts.append(i)


            return nl

        item_id = us_item['item_id']
        item = items_f['items'][item_id]
        type = item['type']
        d_text = ''

        if lg == 'ru':
            if item['type'] == '+heal':
                type = '‚ù§ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ'
                d_text = f"*‚îî* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {item['act']}"

            elif item['type'] == '+eat':
                type = 'üçî –µ–¥–∞'
                d_text = f"*‚îî* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {item['act']}"

            elif item['type'] == '+unv':
                type = '‚òï —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫'
                d_text = f"*‚îî* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {item['act']}"

            elif item['type'] == 'egg':
                eg_q = item['inc_type']
                if item['inc_type'] == 'random': eg_q = '—Ä–∞–Ω–¥–æ–º'
                if item['inc_type'] == 'com': eg_q = '–æ–±—ã—á–Ω–æ–µ'
                if item['inc_type'] == 'unc': eg_q = '–Ω–µ–æ–±—ã—á–Ω–æ–µ'
                if item['inc_type'] == 'rar': eg_q = '—Ä–µ–¥–∫–æ–µ'
                if item['inc_type'] == 'myt': eg_q = '–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ'
                if item['inc_type'] == 'leg': eg_q = '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ'

                type = 'ü•ö —è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞'
                d_text = f"*‚îú* –ò–Ω–∫—É–±–∞—Ü–∏—è: {item['incub_time']}{item['time_tag']}\n"
                d_text += f"*‚îî* –†–µ–¥–∫–æ—Å—Ç—å —è–π—Ü–∞: {eg_q}"

            elif item['type'] in ['game_ac', 'unv_ac', 'journey_ac', 'hunt_ac']:
                type = 'üíç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'
                d_text = f"*‚îî* {item['descriptionru']}"

            elif item['type'] == 'None':
                type = 'üï≥ –ø—É—Å—Ç—ã—à–∫–∞'
                d_text = f"*‚îî* –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –∏ –Ω–µ –¥–ª—è —á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–∞"

            elif item['type'] == 'material':
                type = 'üß± –º–∞—Ç–µ—Ä–∏–∞–ª'
                d_text = f"*‚îî* –î–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è."

            elif item['type'] == 'recipe':
                type = 'üßæ —Ä–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è'

                d_text = f'*‚îú* –°–æ–∑–¥–∞—ë—Ç: {", ".join(functions.sort_items_col( item["create"], "ru" ))}\n'
                d_text += f'*‚îî* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: {", ".join(sort_materials( item["materials"], "ru"))}\n\n'
                d_text +=  f"{item['descriptionru']}"

            if list(set([ '+mood' ]) & set(item.keys())) != []:
                d_text += f'\n\n*‚îå* *üç° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã*\n'

                if '+mood' in item.keys():
                    d_text += f"*‚îî* –ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {item['+mood']}%"

            if list(set([ '-mood', "-eat" ]) & set(item.keys())) != []:
                d_text += f'\n\n*‚îå* *üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã*\n'

                if '-mood' in item.keys():
                    d_text += f"*‚îú* –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {item['-mood']}%"

                if '-eat' in item.keys():
                    d_text += f"*‚îî* –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Å—ã—Ç–æ—Å—Ç–∏: {item['-eat']}%"

            text =  f"*‚îå* *üé¥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ*\n"
            text += f"*‚îú* –ù–∞–∑–≤–∞–Ω–∏–µ: {item['nameru']}\n"

            if 'abilities' in us_item.keys():
                if 'uses' in us_item['abilities'].keys():
                    text += f"*‚îú* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {us_item['abilities']['uses']}\n"

                if 'endurance' in us_item['abilities'].keys():
                    text += f"*‚îú* –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {us_item['abilities']['endurance']}\n"

            text += f"*‚îú* –¢–∏–ø: {type}\n"
            text += d_text
            in_text = ['üîÆ | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', 'üóë | –í—ã–±—Ä–æ—Å–∏—Ç—å', 'üîÅ | –ü–µ—Ä–µ–¥–∞—Ç—å', 'üõ† | –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç']

        else:
            if item['type'] == '+heal':
                type = '‚ù§ medicine'
                d_text = f"*‚îî* Effectiveness: {item['act']}"

            elif item['type'] == '+eat':
                type = 'üçî eat'
                d_text = f"*‚îî* Effectiveness: {item['act']}"

            elif item['type'] == '+unv':
                type = '‚òï energy drink'
                d_text = f"*‚îî* Effectiveness: {item['act']}"

            elif item['type'] == 'egg':
                if item['inc_type'] == 'random': eg_q = 'random'
                if item['inc_type'] == 'com': eg_q = 'common'
                if item['inc_type'] == 'unc': eg_q = 'uncommon'
                if item['inc_type'] == 'rare': eg_q = 'rare'
                if item['inc_type'] == 'myt': eg_q = 'mystical'
                if item['inc_type'] == 'leg': eg_q = 'legendary'

                type = 'ü•ö dinosaur egg'
                d_text = f"*‚îî* Incubation: {item['incub_time']}{item['time_tag']}\n"
                d_text += f"*‚îî* The rarity of eggs: {eg_q}"

            elif item['type'] in ['game_ac', 'unv_ac', 'journey_ac', 'hunt_ac']:
                type = 'üíç active game item'
                d_text = f"*‚îî* {item['descriptionen']}"

            elif item['type'] == 'None':
                type = 'üï≥ dummy'
                d_text = f"*‚îî* Does nothing and is not needed for anything"

            elif item['type'] == 'material':
                type = 'üß± material'
                d_text = f"*‚îî* This item is needed for manufacturing."

            elif item['type'] == 'recipe':
                type = 'üßæ recipe for creation'

                d_text = f'*‚îú* Creates: {", ".join(functions.sort_items_col( item["create"], "en" ))}\n'
                d_text += f'*‚îî* Materials: {", ".join(sort_materials( item["materials"], "en"))}\n\n'
                d_text +=  f"{item['descriptionru']}"

            if list(set([ '+mood' ]) & set(item.keys())) != []:
                d_text += f'\n\n*‚îå* *üç° Additional bonuses*\n'

                if '+mood' in item.keys():
                    d_text += f"*‚îî* Mood boost: {item['+mood']}%"

            if list(set([ '-mood', "-eat" ]) & set(item.keys())) != []:
                d_text += f'\n\n*‚îå* *üìå Additional penalties*\n'

                if '-mood' in item.keys():
                    d_text += f"*‚îú* Lowering the mood: {item['-mood']}%"

                if '-eat' in item.keys():
                    d_text += f"*‚îî* Reducing satiety: {item['-eat']}%"

            text =  f"*‚îå* *üé¥ Subject information*\n"
            text += f"*‚îú* Name: {item['nameen']}\n"

            if 'abilities' in us_item.keys():
                if 'uses' in us_item['abilities'].keys():
                    text += f"*‚îú* Uses: {us_item['abilities']['uses']}\n"

                if 'endurance' in us_item['abilities'].keys():
                    text += f"*‚îú* Endurance: {us_item['abilities']['endurance']}\n"

            text += f"*‚îú* Type: {type}\n"
            text += d_text
            in_text = ['üîÆ | Use', 'üóë | Delete', 'üîÅ | Transfer', 'üõ† | –°reated item']

        if mark == True:
            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add( types.InlineKeyboardButton( text = in_text[0], callback_data = f"item_{functions.qr_item_code(us_item)}"),  types.InlineKeyboardButton( text = in_text[1], callback_data = f"remove_item_{functions.qr_item_code(us_item)}") )
            markup_inline.add( types.InlineKeyboardButton( text = in_text[2], callback_data = f"exchange_{functions.qr_item_code(us_item)}") )

            if item['type'] == 'recipe':
                if len(item["create"]) == 1:
                    markup_inline.add( types.InlineKeyboardButton( text = in_text[3], callback_data = f"iteminfo_{item['create'][0]}") )

            return text, markup_inline

        else:
            return text

    @staticmethod
    def exchange(bot, message, user_item, bd_user):

        def zero(message, user_item, bd_user):

            if message.text not in ['Yes, transfer the item', '–î–∞, –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç']:
                bot.send_message(message.chat.id, '‚ùå', reply_markup = functions.markup(bot, functions.last_markup(bd_user, alternative = 'profile'), bd_user ))
                return

            friends_id = bd_user['friends']['friends_list']
            page = 1

            friends_name = []
            friends_id_d = {}

            for i in friends_id:
                try:
                    if users.find_one({"userid": int(i)}) != None:
                        fr_name = bot.get_chat(int(i)).first_name
                        friends_name.append(fr_name)
                        friends_id_d[fr_name] = i
                except:
                    pass

            friends_chunks = list(functions.chunks(list(functions.chunks(friends_name, 2)), 3))

            def work_pr(message, friends_id, page, friends_chunks, friends_id_d, user_item, mms = None):
                global pages

                if bd_user['language_code'] == 'ru':
                    text = "üìú | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                else:
                    text = "üìú | Update..."

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                if friends_chunks == []:

                    if bd_user['language_code'] == 'ru':
                        text = "üë• | –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                    else:
                        text = "üë• | The list is empty!"

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', bd_user['userid']))

                else:

                    for el in friends_chunks[page-1]:
                        if len(el) == 2:
                            rmk.add(el[0], el[1])
                        else:
                            rmk.add(el[0], ' ')

                    if 3 - len(friends_chunks[page-1]) != 0:
                        for i in list(range(3 - len(friends_chunks[page-1]))):
                            rmk.add(' ', ' ')

                    if len(friends_chunks) > 1:
                        if bd_user['language_code'] == 'ru':
                            com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                        else:
                            com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                        rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])
                    else:
                        if bd_user['language_code'] == 'ru':
                            com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                        else:
                            com_buttons = '‚Ü™ Back'

                        rmk.add(com_buttons)

                    def ret(message, bd_user, page, friends_chunks, friends_id, friends_id_d, user_item):
                        if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                            res = None
                        else:
                            res = message.text

                        if res == None:
                            if bd_user['language_code'] == 'ru':
                                text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                            else:
                                text = "üë• | Return to the friends menu!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup('friends-menu', user))

                        else:
                            mms = None
                            if res == '‚óÄ':
                                if page - 1 == 0:
                                    page = 1
                                else:
                                    page -= 1

                                work_pr(message, friends_id, page, friends_chunks, friends_id_d, user_item, mms = mms)

                            if res == '‚ñ∂':
                                if page + 1 > len(friends_chunks):
                                    page = len(friends_chunks)
                                else:
                                    page += 1

                                work_pr(message, friends_id, page, friends_chunks, friends_id_d, user_item, mms = mms)

                            else:
                                if res in list(friends_id_d.keys()):
                                    fr_id = friends_id_d[res]
                                    bd_user = users.find_one({"userid": bd_user['userid']})
                                    two_user = users.find_one({"userid": fr_id})

                                    col = 1
                                    mx_col = 0
                                    for item_c in bd_user['inventory']:
                                        if item_c == user_item:
                                            mx_col += 1

                                    if bd_user['language_code'] == 'ru':
                                        text_col = f"üèì | –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ >"
                                    else:
                                        text_col = f"üèì | Enter how much you want to transfer or select from the list >"

                                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                                    bt_1 = f"x1"
                                    bt_2 = f"x{int(mx_col / 2)}"
                                    bt_3 = f"x{mx_col}"

                                    col_l = [[], [1, int(mx_col / 2), mx_col]]

                                    col_l[0].append(bt_1), col_l[0].append(bt_2), col_l[0].append(bt_3)

                                    if mx_col == 1:

                                        rmk.add(bt_1)

                                    elif mx_col >= 4:

                                        rmk.add(bt_1, bt_2, bt_3)

                                    elif mx_col > 1:

                                        rmk.add(bt_1, bt_3)

                                    if bd_user['language_code'] == 'ru':
                                        rmk.add('‚Ü© –ù–∞–∑–∞–¥')
                                    else:
                                        rmk.add('‚Ü© Back')


                                    def tr_complete(message, bd_user, user_item, mx_col, col_l, two_user):

                                        if message.text in ['‚Ü© Back', '‚Ü© –ù–∞–∑–∞–¥']:

                                            if bd_user['language_code'] == 'ru':
                                                text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
                                            else:
                                                text = "üë• | Return to the friends menu!"

                                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', bd_user['userid']))
                                            return '12'

                                        try:
                                            col = int(message.text)
                                        except:
                                            if message.text in col_l[0]:
                                                col = col_l[1][ col_l[0].index(message.text) ]

                                            else:

                                                if bd_user['language_code'] == 'ru':
                                                    text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
                                                else:
                                                    text = f"Enter the correct number!"

                                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                                                return

                                        if col > mx_col:

                                            if bd_user['language_code'] == 'ru':
                                                text = f"–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
                                            else:
                                                text = f"You don't have that many items in your inventory!"

                                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                                            return

                                        for i in range(col):
                                            bd_user['inventory'].remove(user_item)
                                            users.update_one( {"userid": two_user['userid']}, {"$push": {'inventory': user_item }} )

                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                        if bd_user['language_code'] == 'ru':
                                            text = f'üîÅ | –ü—Ä–µ–¥–º–µ—Ç(—ã) –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–≥—Ä–æ–∫—É!'
                                        else:
                                            text = f"üîÅ | The item(s) has been sent to the player!"

                                        bot.send_message(message.chat.id, text)

                                        user = bot.get_chat( bd_user['userid'] )

                                        if two_user['language_code'] == 'ru':
                                            text = f"ü¶Ñ | –ï–¥–∏–Ω–æ—Ä–æ–≥-–∫—Ä—É—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ø—Ä–µ–¥–º–µ—Ç(—ã) –æ—Ç {user.first_name}, –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!\n\nüìú –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:\n{items_f['items'][str(user_item['item_id'])]['nameru']} x{col}"
                                        else:
                                            text = f"ü¶Ñ | The Unicorn-courier delivered you an item(s) from {user.first_name}, take a look at the inventory!\n\nüìú Delivered:\n{items_f['items'][str(user_item['item_id'])]['nameen']} x{col}"

                                        bot.send_message(two_user['userid'], text, reply_markup = functions.inline_markup(bot, 'inventory', int(two_user['userid']), ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'Check inventory']))

                                        functions.user_inventory(bot, user, message)

                                msg = bot.send_message(message.chat.id, text_col, reply_markup = rmk)
                                bot.register_next_step_handler(msg, tr_complete, bd_user, user_item, mx_col, col_l, two_user)

                    if mms == None:
                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    else:
                        msg = mms
                    bot.register_next_step_handler(msg, ret, bd_user, page, friends_chunks, friends_id, friends_id_d, user_item)

            work_pr(message, friends_id, page, friends_chunks, friends_id_d, user_item)

        if bd_user['language_code'] == 'ru':
            com_buttons = ['–î–∞, –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç', '‚Ü™ –ù–∞–∑–∞–¥']
            text = 'üîÅ | –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?'
        else:
            com_buttons = ['Yes, transfer the item', '‚Ü™ Back']
            text = 'üîÅ | Are you sure you want to transfer the item to another user?'

        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 1)
        rmk.add(com_buttons[0], com_buttons[1])

        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
        bot.register_next_step_handler(msg, zero, user_item, bd_user)

    def member_profile(bot, mem_id, lang):
        try:

            user = bot.get_chat(int(mem_id))
            bd_user = users.find_one({"userid": user.id})
            expp = 5 * bd_user['lvl'][0] * bd_user['lvl'][0] + 50 * bd_user['lvl'][0] + 100
            n_d = len(list(bd_user['dinos']))
            t_dinos = ''
            for k in bd_user['dinos']:
                i = bd_user['dinos'][k]

                if list( bd_user['dinos']) [ len(bd_user['dinos']) - 1 ] == k:
                    n = '‚îî'

                else:
                    n = '‚îú'

                if i['status'] == 'incubation':
                    t_incub = i['incubation_time'] - time.time()
                    time_end = functions.time_end(t_incub, True)

                    if lang == 'ru':

                        qual = 'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ'
                        if 'quality' in i.keys():
                            pre_qual = i['quality']

                            if pre_qual == 'com':
                                qual = 'ü§ç –û–±—ã—á–Ω–æ–µ'
                            if pre_qual == 'unc':
                                qual = 'üíö –ù–µ–æ–±—ã—á–Ω–æ–µ'
                            if pre_qual == 'rar':
                                qual = 'üíô –†–µ–¥–∫–æ–µ'
                            if pre_qual == 'myt':
                                qual = 'üíú –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ'
                            if pre_qual == 'leg':
                                qual = 'üíõ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ'

                        t_dinos += f"\n   *{n}* –°—Ç–∞—Ç—É—Å: —è–π—Ü–æ\n      *‚îú* –†–µ–¥–∫–æ—Å—Ç—å: {qual}\n      *‚îî* –û—Å—Ç–∞–ª–æ—Å—å: {time_end}\n"

                    else:

                        qual = 'üé≤ Random'
                        if 'quality' in i.keys():
                            pre_qual = i['quality']

                            if pre_qual == 'com':
                                qual = 'ü§ç Common'
                            if pre_qual == 'unc':
                                qual = 'üíö Uncommon'
                            if pre_qual == 'rar':
                                qual = 'üíô Rare'
                            if pre_qual == 'myt':
                                qual = 'üíú Mystical'
                            if pre_qual == 'leg':
                                qual = 'üíõ Legendary'


                        t_dinos += f"\n   *{n}*\n      *‚îú* Status: egg\n      *‚îú* Rare: {qual}\n      *‚îî* Left: {time_end}\n"

                if i['status'] == 'dino':

                    stat = i['activ_status']
                    if lang == 'ru':

                        if i['activ_status'] == 'pass_active':
                            stat = 'üß© –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç'
                        elif i['activ_status'] == 'sleep':
                            stat = 'üí§ —Å–ø–∏—Ç'
                        elif i['activ_status'] == 'game':
                            stat = 'üïπ –∏–≥—Ä–∞–µ—Ç'
                        elif i['activ_status'] == 'hunting':
                            stat = 'üåø —Å–æ–±–∏—Ä–∞–µ—Ç –µ–¥—É'
                        elif i['activ_status'] == 'journey':
                            stat = 'üé¥ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç'

                        dino = json_f['elements'][str(i['dino_id'])]
                        pre_qual = dino['image'][5:8]
                        qual = ''
                        if pre_qual == 'com':
                            qual = 'ü§ç –û–±—ã—á–Ω—ã–π'
                        if pre_qual == 'unc':
                            qual = 'üíö –ù–µ–æ–±—ã—á–Ω—ã–π'
                        if pre_qual == 'rar':
                            qual = 'üíô –†–µ–¥–∫–∏–π'
                        if pre_qual == 'myt':
                            qual = 'üíú –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π'
                        if pre_qual == 'leg':
                            qual = 'üíõ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'

                        t_dinos += f"\n   *{n}* {i['name']}\n      *‚îú* –°—Ç–∞—Ç—É—Å: {stat}\n      *‚îî* –†–µ–¥–∫–æ—Å—Ç—å: {qual}\n"

                    else:

                        if i['activ_status'] == 'pass_active':
                            stat = 'üß© does nothing'
                        elif i['activ_status'] == 'sleep':
                            stat = 'üí§ sleeping'
                        elif i['activ_status'] == 'game':
                            stat = 'üïπ is playing'
                        elif i['activ_status'] == 'hunting':
                            stat = 'üåø collects food'
                        elif i['activ_status'] == 'journey':
                            stat = 'üé¥ travels'

                        dino = json_f['elements'][str(i['dino_id'])]
                        pre_qual = dino['image'][5:8]
                        qual = ''
                        if pre_qual == 'com':
                            qual = 'ü§ç Common'
                        if pre_qual == 'unc':
                            qual = 'üíö Uncommon'
                        if pre_qual == 'rar':
                            qual = 'üíô Rare'
                        if pre_qual == 'myt':
                            qual = 'üíú Mystical'
                        if pre_qual == 'leg':
                            qual = 'üíõ Legendary'

                        t_dinos += f"\n   *{n}* {i['name']}\n      *‚îî* Status: {stat}\n      *‚îî* Rare: {qual}\n"

            if lang == 'ru':

                #act_items
                act_ii = {}
                for d_id in bd_user['activ_items'].keys():
                    act_ii[d_id] = []
                    for itmk in bd_user['activ_items'][d_id].keys():
                        itm = bd_user['activ_items'][d_id][itmk]
                        if itm == None:
                            act_ii[d_id].append('-')
                        else:
                            item = items_f['items'][str(itm['item_id'])]['nameru']
                            if 'abilities' in itm.keys() and 'endurance' in itm['abilities'].keys():
                                act_ii[d_id].append(f"{item} ({itm['abilities']['endurance']})")
                            else:
                                act_ii[d_id].append(f'{item}')

                text =  f"*‚îå* *üé¥ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n"
                text += f"*‚îú* –ò–º—è: {user.first_name}\n"
                text += f"*‚îî* ID: `{user.id}`\n\n"
                text += f"*‚îå* –£—Ä–æ–≤–µ–Ω—å: {bd_user['lvl'][0]}\n"
                text += f"*‚îú* –û–ø—ã—Ç: {bd_user['lvl'][1]} / {expp}\n"
                text += f"*‚îî* –ú–æ–Ω–µ—Ç—ã: {bd_user['coins']}"
                text += f'\n\n'
                text += f"*‚îå* *ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä—ã*\n"
                text += f"*‚îú* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {n_d}\n"
                text += f"*‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä—ã:\n{t_dinos}"
                text += f'\n'
                text += f"*‚îå* *üë• –î—Ä—É–∑—å—è*\n"
                text += f"*‚îî* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(bd_user['friends']['friends_list'])}"
                text += f'\n\n'
                text += f"*‚îå* *üéà –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å*\n"
                text += f"*‚îî* –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(bd_user['inventory'])}"
                text += f'\n\n'
                text += f"*‚îå* *üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã*\n"

                for i in act_ii.keys():
                    try:
                        d_n = bd_user['dinos'][i]['name']
                    except:
                        break

                    text += f'\n*‚îå* ü¶ñ > {d_n}\n'
                    text += f"*‚îú* üåô –°–æ–Ω: {act_ii[i][3]}\n"
                    text += f"*‚îú* üéÆ –ò–≥—Ä–∞: {act_ii[i][0]}\n"
                    text += f"*‚îú* üåø –°–±–æ—Ä –ø–∏—â–∏: {act_ii[i][1]}\n"
                    text += f"*‚îî* üéç –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: {act_ii[i][2]}\n"

            else:
                #act_items
                act_ii = {}
                for d_id in bd_user['activ_items'].keys():
                    act_ii[d_id] = []
                    for itmk in bd_user['activ_items'][d_id].keys():
                        itm = bd_user['activ_items'][d_id][itmk]
                        if itm == None:
                            act_ii[d_id].append('-')
                        else:
                            item = items_f['items'][str(itm['item_id'])]['nameen']
                            act_ii[d_id].append(item)

                text =  f"*‚îå**üé¥ User profile*\n"
                text += f"*‚îú* Name: {user.first_name}\n"
                text += f"*‚îî* ID: `{user.id}`\n\n"
                text += f"*‚îå* Level: {bd_user['lvl'][0]}\n"
                text += f"*‚îú* Experience: {bd_user['lvl'][1]} / {expp}\n"
                text += f"*‚îî* Coins: {bd_user['coins']}"
                text += f'\n\n'
                text += f"*‚îå**ü¶ñ Dinosaurs*\n"
                text += f"*‚îú* Number: {n_d}\n"
                text += f"*‚îú* Dinosaurs:\n{t_dinos}"
                text += f'\n'
                text += f"*‚îå**üë• Friends*\n"
                text += f"*‚îî* Quantity: {len(bd_user['friends']['friends_list'])}"
                text += f'\n\n'
                text += f"*‚îå* *üéà Inventory*\n"
                text += f"*‚îî* Items: {len(bd_user['inventory'])}"
                text += f'\n\n'
                text += f"*‚îå* *üíç Accessories*\n"

                for i in act_ii.keys():
                    try:
                        d_n = bd_user['dinos'][i]['name']
                    except:
                        break

                    text += f'\n*‚îå* ü¶ñ > {d_n}\n'
                    text += f"*‚îú* üåô Sleep: {act_ii[i][3]}\n"
                    text += f"*‚îú* üéÆ Game: {act_ii[i][0]}\n"
                    text += f"*‚îú* üåø Collecting food: {act_ii[i][1]}\n"
                    text += f"*‚îî* üéç Journey: {act_ii[i][2]}"

        except Exception as error:
             text = f'ERROR Profile: {error}'

        return text

    @staticmethod
    def rayt_update(met = "save", lst_save = None):
        global reyt_

        if met == 'save':
            reyt_ = lst_save

        if met == 'check':
            return reyt_

    @staticmethod
    def add_item_to_user(user:dict, item_id:str, col:int = 1, type:str = 'add'):

        item = items_f['items'][item_id]
        d_it = {'item_id': item_id}
        if 'abilities' in item.keys():
            abl = {}
            for k in item['abilities'].keys():
                abl[k] = item['abilities'][k]

            d_it['abilities'] = abl

        if type == 'add':
            for i in range(col):
                users.update_one( {"userid": user['userid']}, {"$push": {'inventory': d_it }} )

            return True

        if type == 'data':
            ret_d = []
            for i in range(col):
                ret_d.append(d_it)

            return ret_d

    @staticmethod
    def get_dict_item(item_id:str):

        item = items_f['items'][item_id]
        d_it = {'item_id': item_id}
        if 'abilities' in item.keys():
            abl = {}
            for k in item['abilities'].keys():
                abl[k] = item['abilities'][k]

            d_it['abilities'] = abl

        return d_it

    @staticmethod
    def item_authenticity(item:dict):
        item_data = items_f['items'][item['item_id']]
        if list(item.keys()) == ['item_id']:
            return True

        else:
            try:
                if item['abilities'] == item_data['abilities']:
                    return True
                else:
                    return False
            except:
                return False

    @staticmethod
    def qr_item_code(item:dict):
        text = f"i{item['item_id']}"
        if 'abilities' in item.keys():

            if 'uses' in item['abilities'].keys():
                # u - –∫–ª—é—á –∫–æ–¥ –¥–ª—è des_qr
                text += f".u{item['abilities']['uses']}"

            if 'endurance' in item['abilities'].keys():
                # e - –∫–ª—é—á –∫–æ–¥ –¥–ª—è des_qr
                text += f".e{item['abilities']['endurance']}"

        return text

    @staticmethod
    def des_qr(it_qr:str):
        l_data = {}
        ind = 0
        for i in it_qr:
            if i != '.':
                if ind in l_data.keys():
                    l_data[ind] += i
                else:
                    l_data[ind] = i
            else:
                ind += 1

        ret_data = {}

        for i in l_data.keys():
            tx = list(l_data[i])
            if tx[0] == 'u':
                ret_data['uses'] = int(''.join(l_data[i])[1:])

            if tx[0] == 'i':
                ret_data['id'] = int(''.join(l_data[i])[1:])

            if tx[0] == 'e':
                ret_data['endurance'] = int(''.join(l_data[i])[1:])

        return ret_data

    @staticmethod
    def user_inventory(bot, user, message, inv_t = 'info'):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            data_items = items_f['items']
            items = bd_user['inventory']

            if items == []:

                if bd_user['language_code'] == 'ru':
                    text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                else:
                    text = 'Inventory is empty.'

                bot.send_message(message.chat.id, text)

                return

            items_id = {}
            page = 1
            items_names = []

            if bd_user['language_code'] == 'ru':
                lg = "nameru"
            else:
                lg = "nameen"

            for i in items:
                if functions.item_authenticity(i) == True:
                    items_id[ items_f['items'][ i['item_id'] ][lg] ] = i
                    items_names.append( items_f['items'][ i['item_id'] ][lg] )

                else:

                    items_id[ items_f['items'][ i['item_id'] ][lg] + f" ({functions.qr_item_code(i)})" ] = i
                    items_names.append( items_f['items'][ i['item_id'] ][lg] + f" ({functions.qr_item_code(i)})" )

            items_names.sort()

            items_sort = []
            d_it_sort = {}
            ind_sort_it = {}

            for i in items_names:
                if i in list(d_it_sort.keys()):
                    d_it_sort[i] += 1
                else:
                    d_it_sort[i] = 1

            for n in list(d_it_sort.keys()):
                col = d_it_sort[n]
                name = n
                items_sort.append(f'{n} x{col}')
                ind_sort_it[f'{n} x{col}'] = n

            pages_n = []

            pages = list(functions.chunks(list(functions.chunks(items_sort, 2)), 3))

            for i in pages:

                if len(i) != 3:
                    for iii in range(3 - len(i)):
                        i.append([' ', ' '])

            if bd_user['language_code'] == 'ru':
                textt = 'üéà | –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç'
            else:
                textt = 'üéà | Inventory is open'

            bot.send_message(message.chat.id, textt)

            def work_pr(message, pages, page, items_id, ind_sort_it, mms = None):
                a = []
                l_pages = pages
                l_page = page
                l_ind_sort_it = ind_sort_it

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                for i in pages[page-1]:
                    if len(i) == 1:
                        rmk.add( i[0])
                    else:
                        rmk.add( i[0], i[1])

                if len(pages) > 1:
                    if bd_user['language_code'] == 'ru':
                        com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                        textt = 'üéà | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...'
                    else:
                        com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']
                        textt = 'üéà | Update...'

                    rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                else:
                    if bd_user['language_code'] == 'ru':
                        com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                        textt = 'üéà | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...'
                    else:
                        textt = 'üéà | Update...'
                        com_buttons = '‚Ü™ Back'

                    rmk.add(com_buttons)

                def ret(message, l_pages, l_page, l_ind_sort_it, pages, page, items_id, ind_sort_it, bd_user, user):

                    if len(bd_user['dinos']) >= 2:
                        sl, ll = functions.dino_pre_answer(bot, message)
                        if message.text in list(ll[2].keys()):
                            return

                    if message.text in ['Yes, transfer the item', '–î–∞, –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç']:
                        return

                    if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                        res = None

                    else:
                        if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂']:
                            res = message.text
                        else:
                            res = None

                    if res == None:
                        if bd_user['language_code'] == 'ru':
                            text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è!"
                        else:
                            text = "üë• | Return to the profile menu!"

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', user))
                        return '12'

                    else:
                        if res == '‚óÄ':
                            if page - 1 == 0:
                                page = 1
                            else:
                                page -= 1

                            work_pr(message, pages, page, items_id, ind_sort_it)

                        elif res == '‚ñ∂':
                            if page + 1 > len(l_pages):
                                page = len(l_pages)
                            else:
                                page += 1

                            work_pr(message, pages, page, items_id, ind_sort_it)

                        else:
                            item = items_id[ l_ind_sort_it[res] ]

                            if inv_t == 'info':

                                text,  markup_inline = functions.item_info(item, bd_user['language_code'])

                                mms = bot.send_message(message.chat.id, text, reply_markup = markup_inline, parse_mode = 'Markdown')
                                work_pr(message, pages, page, items_id, ind_sort_it, mms)

                            if inv_t == 'add_product':

                                def sch_items(item, bd_user):
                                    a = 0
                                    for i in bd_user['inventory']:
                                        if i == item:
                                            a += 1
                                    return a

                                if bd_user['language_code'] == 'ru':
                                    text = "üõí | –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: "
                                    ans = ['üõí –†—ã–Ω–æ–∫']
                                else:
                                    text = "üõí | Enter the quantity of the product: "
                                    ans = ['üõí Market']

                                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 1)
                                rmk.add(ans[0])

                                def ret_number(message, ans, bd_user, item):
                                    number = message.text
                                    try:
                                        number = int(number)
                                        mn = sch_items(item, bd_user)
                                        if number <= 0 or number >= mn + 1:
                                            if bd_user['language_code'] == 'ru':
                                                text = f'0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {mn}!'
                                            else:
                                                text = f'0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | Enter a number from 1 to {mn}!'

                                            bot.send_message(message.chat.id, text)
                                            number = None
                                    except:
                                        number = None

                                    if number == None:
                                        if bd_user['language_code'] == 'ru':
                                            text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                        else:
                                            text = "üõí | Return to the market menu!"

                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))

                                    else:

                                        def max_k(dct):
                                            mx_dct = -1
                                            for i in dct.keys():
                                                if int(i) > mx_dct:
                                                    mx_dct = int(i)
                                            return str(mx_dct+1)

                                        if bd_user['language_code'] == 'ru':
                                            text = "üõí | –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ —Ö1: "
                                        else:
                                            text = "üõí | Enter the cost of the item x1: "

                                        def ret_number2(message, ans, bd_user, item, col):
                                            number = message.text
                                            try:
                                                number = int(number)
                                                if number <= 0 or number >= 1000000 + 1:
                                                    if bd_user['language_code'] == 'ru':
                                                        text = f'0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000000!'
                                                    else:
                                                        text = f'0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | Enter a number from 1 to 1000000!'

                                                    bot.send_message(message.chat.id, text)
                                                    number = None
                                            except:
                                                number = None

                                            if number == None:
                                                if bd_user['language_code'] == 'ru':
                                                    text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                                else:
                                                    text = "üõí | Return to the market menu!"

                                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))

                                            else:

                                                market_ = market.find_one({"id": 1})

                                                try:
                                                    products = market_['products'][str(user.id)]['products']
                                                except:
                                                    market_['products'][str(user.id)] = { 'products': {}, 'dinos': {} }
                                                    products = market_['products'][str(user.id)]['products']

                                                market_['products'][str(user.id)]['products'][ max_k(products) ] = { 'item': item, 'price': number, 'col': [0, col]}

                                                for i in range(col):
                                                    bd_user['inventory'].remove(item)

                                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                                market.update_one( {"id": 1}, {"$set": {'products': market_['products'] }} )

                                                if bd_user['language_code'] == 'ru':
                                                    text = "üõí | –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Ä—ã–Ω–æ–∫, —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö!"
                                                else:
                                                    text = "üõí | The product has been added to the market, you can see the status of your products in your products!"

                                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))


                                        msg = bot.send_message(message.chat.id, text)
                                        bot.register_next_step_handler(msg, ret_number2, ans, bd_user, item, number)

                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                bot.register_next_step_handler(msg, ret_number, ans, bd_user, item)

                if mms == None:
                    msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                else:
                    msg = mms
                bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, pages, page, items_id, ind_sort_it, bd_user, user)


            work_pr(message, pages, page, items_id, ind_sort_it)

    @staticmethod
    def user_requests(bot, user, message):

        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if 'requests' in bd_user['friends']:
                id_friends = bd_user['friends']['requests']

                if bd_user['language_code'] == 'ru':
                    text = "üíå | –ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ!"
                else:
                    text = "üíå | The query menu is open!"

                msg = bot.send_message(message.chat.id, text)

                def work_pr(message, id_friends):
                    global pages, pagen
                    a = []

                    id_names = {}
                    friends = []
                    for i in id_friends:
                        try:
                            userr = bot.get_chat(int(i))
                            id_names[userr.first_name] = int(i)
                            friends.append(userr.first_name)
                        except:
                            pass

                    fr_pages = list(functions.chunks(friends, 3))
                    page = 1

                    pages_buttons = []
                    for i in range(len(fr_pages)):
                        pages_buttons.append([])

                    page_n = 0
                    for el in fr_pages:
                        for i in el:
                            pages_buttons[page_n].append([f"‚úÖ {i}", f'‚ùå {i}'])
                        page_n += 1

                    if bd_user['language_code'] == 'ru':

                        com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                    else:

                        com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)

                    if pages_buttons != []:
                        for i in pages_buttons[page-1]:
                            rmk.add( i[0], i[1] )

                        for nn in range(3 - int(len(pages_buttons[page-1]))):
                            rmk.add( ' ', ' ')

                    else:
                        for i in range(3):
                            rmk.add( ' ', ' ')

                    if len(pages_buttons) > 1:
                        rmk.add( com_buttons[0], com_buttons[1], com_buttons[2] )
                    else:
                        rmk.add( com_buttons[1] )

                    pages = []
                    if pages_buttons != []:
                        for ii in pages_buttons[page-1]:
                            for iii in ii:
                                pages.append(iii)

                    pagen = page

                    if bd_user['language_code'] == 'ru':
                        text = "üíå | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                    else:
                        text = "üíå | Update..."

                    def ret(message, id_friends, bd_user, user, page):
                        if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                            res = None

                        else:
                            if message.text in pages or message.text in ['‚óÄ', '‚ñ∂']:
                                res = message.text

                            else:
                                res = None

                        if res == None:
                            if bd_user['language_code'] == 'ru':
                                text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                            else:
                                text = "üë• | Return to the friends menu!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))
                            return None
                        else:
                            if res == '‚óÄ':
                                if page - 1 == 0:
                                    page = 1
                                else:
                                    page -= 1

                            if res == '‚ñ∂':
                                if page + 1 > len(pages_buttons):
                                    page = len(pages_buttons)
                                else:
                                    page += 1

                            else:
                                uid = id_names[res[2:]]

                                if list(res)[0] == '‚ùå':
                                    functions.notifications_manager(bot, "friend_rejection", users.find_one({"userid": int(uid) }), user.first_name)

                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω—ë–Ω!"
                                    else:
                                        text = "üë• | Friend request rejected!"

                                    bot.send_message(message.chat.id, text)

                                    try:
                                        bd_user['friends']['requests'].remove(uid)
                                        users.update_one( {"userid": bd_user['userid']}, {"$pull": {'friends.requests': uid }} )
                                    except:
                                        pass


                                if list(res)[0] == '‚úÖ':
                                    functions.notifications_manager(bot, "friend_accept", users.find_one({"userid": int(uid) }), user.first_name)

                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ–¥–æ–±—Ä–µ–Ω!"
                                    else:
                                        text = "üë• | The friend request is approved!"

                                    bot.send_message(message.chat.id, text)

                                    try:
                                        bd_user['friends']['requests'].remove(uid)
                                        bd_user['friends']['friends_list'].append(uid)
                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                                        two_user = users.find_one({"userid": int(uid) })
                                        two_user['friends']['friends_list'].append(bd_user['userid'])
                                        users.update_one( {"userid": int(uid) }, {"$set": {'friends': two_user['friends'] }} )
                                    except:
                                        pass

                            work_pr(message, id_friends)

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, id_friends, bd_user, user, page)

                work_pr(message, id_friends)

    @staticmethod
    def acc_check(bot, user, item_id:str, dino_id, endurance = False):

        data_item = items_f['items'][item_id]
        acc_type = data_item['type'][:-3]

        try:
            acc_item = user['activ_items'][ dino_id ]
        except:
            user['activ_items'][ dino_id ] = {'game': None, 'hunt': None, 'journey': None, 'unv': None}
            users.update_one( {"userid": user["userid"] }, {"$set": {'activ_items': user['activ_items'] }} )

        acc_item = user['activ_items'][ dino_id ][acc_type]

        if acc_item != None:
            if user['activ_items'][ dino_id ][acc_type]['item_id'] == item_id:

                if endurance == True:
                    if 'abilities' in acc_item.keys():
                        if 'endurance' in acc_item['abilities'].keys():
                            r_ = random.randint(0, 2)
                            acc_item['abilities']['endurance'] -= r_

                            if acc_item['abilities']['endurance'] <= 0:
                                user['activ_items'][ dino_id ][acc_type] = None
                                functions.notifications_manager(bot, "acc_broke", user, arg = item_id)

                            users.update_one( {"userid": user["userid"] }, {"$set": {'activ_items': user['activ_items'] }} )

                return True
            else:
                return False
        else:
            return False

    @staticmethod
    def last_markup(bd_user, alternative = 1):

        if 'last_markup' not in bd_user['settings'].keys():
            return alternative

        else:
            return bd_user['settings']['last_markup']

    @staticmethod
    def p_profile(bot, message, bd_dino, user, bd_user, dino_user_id):

        def egg_profile(bd_user, user, bd_dino):
            egg_id = bd_dino['egg_id']

            if bd_user['language_code'] == 'ru':
                lang = bd_user['language_code']
            else:
                lang = 'en'

            if 'quality' in bd_dino.keys():
                quality = bd_dino['quality']
            else:
                quality = 'random'

            if quality == 'random':
                if lang == 'ru':
                    dino_quality = ['–†–µ–¥–∫–æ—Å—Ç—å:', '–°–ª—É—á–∞–π–Ω—ã–π']
                else:
                    dino_quality = ['Quality:', 'Random']
                fill = (207, 70, 204)

            if quality == 'com':
                if lang == 'ru':
                    dino_quality = ['–†–µ–¥–∫–æ—Å—Ç—å:', '–û–±—ã—á–Ω—ã–π']
                else:
                    dino_quality = ['Quality:', 'Common']
                fill = (108, 139, 150)

            if quality == 'unc':
                if lang == 'ru':
                    dino_quality = ['–†–µ–¥–∫–æ—Å—Ç—å:', '–ù–µ–æ–±—ã—á–Ω—ã–π']
                else:
                    dino_quality = ['Quality:', 'Uncommon']
                fill = (68, 235, 90)

            if quality == 'rar':
                if lang == 'ru':
                    dino_quality = ['–†–µ–¥–∫–æ—Å—Ç—å:', '–†–µ–¥–∫–∏–π']
                else:
                    dino_quality = ['Quality:', 'Rare']
                fill = (68, 143, 235)

            if quality == 'myt':
                if lang == 'ru':
                    dino_quality = ['–†–µ–¥–∫–æ—Å—Ç—å:', '–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ']
                else:
                    dino_quality = ['Quality:', 'Mystical']
                fill = (230, 103, 175)

            if quality == 'leg':
                if lang == 'ru':
                    dino_quality = ['–†–µ–¥–∫–æ—Å—Ç—å:', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ']
                else:
                    dino_quality = ['Quality:', 'Legendary']
                fill = (235, 168, 68)


            t_incub = bd_dino['incubation_time'] - time.time()
            if t_incub < 0:
                t_incub = 0

            time_end = functions.time_end(t_incub, True)
            if len(time_end) >= 18:
                time_end = time_end[:-6]

            bg_p = Image.open(f"images/remain/egg_profile_{lang}.png")
            egg = Image.open("images/" + str(json_f['elements'][egg_id]['image']))
            egg = egg.resize((290, 290), Image.ANTIALIAS)

            img = functions.trans_paste(egg, bg_p, 1.0, (-50, 40))

            idraw = ImageDraw.Draw(img)
            line1 = ImageFont.truetype("fonts/Comic Sans MS.ttf", size = 35)

            idraw.text((430, 220), time_end, font = line1, stroke_width = 1)
            idraw.text((210, 270), dino_quality[0], font = line1)
            idraw.text((385, 270), dino_quality[1], font = line1, fill = fill)

            img.save('profile.png')
            profile = open(f"profile.png", 'rb')

            return profile, time_end

        def dino_profile(bd_user, user, dino_user_id):

            dino_id = str(bd_user['dinos'][ dino_user_id ]['dino_id'])

            if bd_user['language_code'] == 'ru':
                lang = bd_user['language_code']
            else:
                lang = 'en'

            dino = json_f['elements'][dino_id]
            if 'class' in list(dino.keys()):
                bg_p = Image.open(f"images/remain/{dino['class']}_icon.png")
            else:
                bg_p = Image.open(f"images/remain/None_icon.png")

            class_ = dino['image'][5:8]

            panel_i = Image.open(f"images/remain/{class_}_profile_{lang}.png")

            img = functions.trans_paste(panel_i, bg_p, 1.0)

            dino_image = Image.open("images/"+str(json_f['elements'][dino_id]['image']))

            sz = 412
            dino_image = dino_image.resize((sz, sz), Image.ANTIALIAS)

            xy = -80
            x2 = 80
            img = functions.trans_paste(dino_image, img, 1.0, (xy + x2, xy, sz + xy + x2, sz + xy ))


            idraw = ImageDraw.Draw(img)
            line1 = ImageFont.truetype("fonts/Comic Sans MS.ttf", size = 35)

            idraw.text((530, 110), str(bd_user['dinos'][dino_user_id]['stats']['heal']), font = line1)
            idraw.text((530, 190), str(bd_user['dinos'][dino_user_id]['stats']['eat']), font = line1)

            idraw.text((750, 110), str(bd_user['dinos'][dino_user_id]['stats']['game']), font = line1)
            idraw.text((750, 190), str(bd_user['dinos'][dino_user_id]['stats']['mood']), font = line1)
            idraw.text((750, 270), str(bd_user['dinos'][dino_user_id]['stats']['unv']), font = line1)

            img.save('profile.png')
            profile = open(f"profile.png", 'rb')

            return profile

        if bd_dino['status'] == 'incubation':

            profile, time_end  = egg_profile(bd_user, user, bd_dino)
            if bd_user['language_code'] == 'ru':
                text = f'ü•ö | –Ø–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å: {time_end}'
            else:
                text = f'ü•ö | The egg is incubated, left: {time_end}'

            bot.send_photo(message.chat.id, profile, text, reply_markup = functions.markup(bot, user = user))

        if bd_dino['status'] == 'dino':

            for i in bd_user['dinos'].keys():
                if bd_user['dinos'][i] == bd_dino:
                    dino_user_id = i

            profile = dino_profile(bd_user, user, dino_user_id = dino_user_id )

            if bd_user['language_code'] == 'ru':
                st_t = bd_dino['activ_status']

                dino = json_f['elements'][str(bd_dino['dino_id'])]
                pre_qual = dino['image'][5:8]
                qual = ''
                if pre_qual == 'com':
                    qual = '–û–±—ã—á–Ω—ã–π'
                if pre_qual == 'unc':
                    qual = '–ù–µ–æ–±—ã—á–Ω—ã–π'
                if pre_qual == 'rar':
                    qual = '–†–µ–¥–∫–∏–π'
                if pre_qual == 'myt':
                    qual = '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π'
                if pre_qual == 'leg':
                    qual = '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'

                if bd_dino['activ_status'] == 'pass_active':
                    st_t = '–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç üí≠'
                elif bd_dino['activ_status'] == 'sleep':
                    st_t = '—Å–ø–∏—Ç üåô'
                elif bd_dino['activ_status'] == 'game':
                    st_t = '–∏–≥—Ä–∞–µ—Ç üéÆ'
                elif bd_dino['activ_status'] == 'journey':
                    st_t = '–ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç üé¥'
                elif bd_dino['activ_status'] in ['hunt', 'hunting']:
                    st_t = '—Å–±–æ—Ä –ø–∏—â–∏ ü•û'

                if bd_dino['stats']['heal'] >= 60:
                    h_text = '‚ù§ *‚îå* –î–∏–Ω–æ–∑–∞–≤—Ä –∑–¥–æ—Ä–æ–≤'
                elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                    h_text = '‚ù§ *‚îå* –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏'
                elif bd_dino['stats']['heal'] <= 10:
                    h_text = '‚ù§ *‚îå* –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –∫—Ä–∞–π–Ω–µ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!'

                if bd_dino['stats']['eat'] >= 60:
                    e_text = 'üçï *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç'
                elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                    e_text = 'üçï *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –≥–æ–ª–æ–¥–µ–Ω'
                elif bd_dino['stats']['eat'] <= 10:
                    e_text = 'üçï *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–∏—Ä–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–¥–∞!'

                if bd_dino['stats']['game'] >= 60:
                    g_text = 'üéÆ *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å'
                elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                    g_text = 'üéÆ *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —Å–∫—É—á–∞–µ—Ç...'
                elif bd_dino['stats']['game'] <= 10:
                    g_text = 'üéÆ *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–∏—Ä–∞–µ—Ç –æ—Ç —Å–∫—É–∫–∏!'

                if bd_dino['stats']['mood'] >= 60:
                    m_text = 'üéà *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏'
                elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                    m_text = 'üéà *‚îú* –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
                elif bd_dino['stats']['mood'] <= 10:
                    m_text = 'üéà *‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä –≥—Ä—É—Å—Ç–∏—Ç!'

                if bd_dino['stats']['unv'] >= 60:
                    u_text = 'üåô *‚îî* –î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ–ª–æ–Ω —Å–∏–ª'
                elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                    u_text = 'üåô *‚îî* –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –µ—Å—Ç—å —Å–∏–ª—ã'
                elif bd_dino['stats']['unv'] <= 10:
                    u_text = 'üåô *‚îî* –î–∏–Ω–æ–∑–∞–≤—Ä —É—Å—Ç–∞–ª!'


                text = f'ü¶ñ *‚îå* –ò–º—è: {bd_dino["name"]}\nüëÅ‚Äçüó® *‚îú* –°—Ç–∞—Ç—É—Å: {st_t}\nüßø *‚îî* –†–µ–¥–∫–æ—Å—Ç—å: {qual}\n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                if bd_dino['activ_status'] == 'journey':
                    w_t = bd_dino['journey_time'] - time.time()
                    if w_t < 0:
                        w_t = 0
                    text += f"\n\nüå≥ *‚îå* –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: \n¬∑  –û—Å—Ç–∞–ª–æ—Å—å: { functions.time_end(w_t) }"

                if bd_dino['activ_status'] == 'game':
                    if functions.acc_check(bot, bd_user, '4', dino_user_id, True):
                        w_t = bd_dino['game_time'] - time.time()
                        if w_t < 0:
                            w_t = 0
                        text += f"\n\nüéÆ *‚îå* –ò–≥—Ä–∞: \n¬∑  –û—Å—Ç–∞–ª–æ—Å—å: { functions.time_end(w_t) }"

                d_id = dino_user_id
                act_ii = []
                for itmk in bd_user['activ_items'][d_id].keys():
                    itm = bd_user['activ_items'][d_id][itmk]
                    if itm == None:
                        act_ii.append('-')
                    else:
                        item = items_f['items'][str(itm['item_id'])]['nameru']
                        if 'abilities' in itm.keys() and 'endurance' in itm['abilities'].keys():
                            act_ii.append(f"{item} ({itm['abilities']['endurance']})")
                        else:
                            act_ii.append(f'{item}')

                text += f"\n\nüåô *‚îå* –°–æ–Ω: {act_ii[3]}\n"
                text += f"üéÆ *‚îú* –ò–≥—Ä–∞: {act_ii[0]}\n"
                text += f"üåø *‚îú* –°–±–æ—Ä –ø–∏—â–∏: {act_ii[1]}\n"
                text += f"üéç *‚îî* –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: {act_ii[2]}\n"

            else:

                st_t = bd_dino['activ_status']

                dino = json_f['elements'][str(bd_dino['dino_id'])]
                pre_qual = dino['image'][5:8]
                qual = ''
                if pre_qual == 'com':
                    qual = '–°ommon'
                if pre_qual == 'unc':
                    qual = 'Unusual'
                if pre_qual == 'rar':
                    qual = 'Rare'
                if pre_qual == 'myt':
                    qual = 'Mystical'
                if pre_qual == 'leg':
                    qual = 'Legendary'

                if bd_dino['activ_status'] == 'pass_active':
                    st_t = 'does nothing üí≠'
                elif bd_dino['activ_status'] == 'sleep':
                    st_t = 'sleeping üåô'
                elif bd_dino['activ_status'] == 'game':
                    st_t = 'playing üéÆ'
                elif bd_dino['activ_status'] == 'journey':
                    st_t = 'travels üé¥'
                elif bd_dino['activ_status'] == 'hunting':
                    st_t = 'collecting food ü•û'

                if bd_dino['stats']['heal'] >= 60:
                    h_text = '‚ù§ *‚îå* The dinosaur is healthy'
                elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                    h_text = '‚ù§ *‚îå* Dinosaur in bad condition'
                elif bd_dino['stats']['heal'] <= 10:
                    h_text = '‚ù§ *‚îå* The dinosaur is in extremely bad condition!'

                if bd_dino['stats']['eat'] >= 60:
                    e_text = 'üçï *‚îú* The dinosaur is full'
                elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                    e_text = 'üçï *‚îú* The dinosaur is hungry'
                elif bd_dino['stats']['eat'] <= 10:
                    e_text = 'üçï *‚îú* The dinosaur is starving!'

                if bd_dino['stats']['game'] >= 60:
                    g_text = "üéÆ *‚îú* The dinosaur doesn't want to play"
                elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                    g_text = 'üéÆ *‚îú* The dinosaur is bored...'
                elif bd_dino['stats']['game'] <= 10:
                    g_text = 'üéÆ *‚îú* The dinosaur is dying of boredom!'

                if bd_dino['stats']['mood'] >= 60:
                    m_text = 'üéà *‚îú* The dinosaur is in a good mood'
                elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                    m_text = 'üéà *‚îú* The dinosaur has a normal mood'
                elif bd_dino['stats']['mood'] <= 10:
                    m_text = 'üéà *‚îú* The dinosaur is sad!'

                if bd_dino['stats']['unv'] >= 60:
                    u_text = 'üåô *‚îî* The dinosaur is full of energy'
                elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                    u_text = 'üåô *‚îî* The dinosaur has powers'
                elif bd_dino['stats']['unv'] <= 10:
                    u_text = 'üåô *‚îî* The dinosaur is tired!'

                text = f'ü¶ñ *‚îå* Name: {bd_dino["name"]}\nüëÅ‚Äçüó® *‚îú* Status: {st_t}\nüßø *‚îî* Rare: {qual}\n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                if bd_dino['activ_status'] == 'journey':
                    w_t = bd_dino['journey_time'] - time.time()
                    if w_t < 0:
                        w_t = 0
                    text += f"\n\nüå≥ *‚îå* Journey: \n¬∑  Left: { functions.time_end(w_t, True) }"

                if bd_dino['activ_status'] == 'game':
                    if functions.acc_check(bot, bd_user, '4', dino_user_id, True):
                        w_t = bd_dino['game_time'] - time.time()
                        if w_t < 0:
                            w_t = 0
                        text += f"\n\nüéÆ *‚îå* Game: \n¬∑  Left: { functions.time_end(w_t) }"

            bot.send_photo(message.chat.id, profile, text, reply_markup = functions.markup(bot, user = user), parse_mode = 'Markdown' )

    @staticmethod
    def journey_end_log(bot, user_id, dino_id):
        bd_user = users.find_one({"userid": user_id })

        text = f'ü¶ñ | {bd_user["dinos"][ dino_id ]["name"]} –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!\n–í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏:\n\n'

        if bd_user['dinos'][ dino_id ]['journey_log'] == []:
            text += '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ!'
            bot.send_message(user_id, text, parse_mode = 'Markdown')

        else:
            messages = []

            n = 1
            for el in bd_user['dinos'][ dino_id ]['journey_log']:
                if len(text) >= 3700:
                    messages.append(text)
                    text = ''

                text += f'*{n}.* {el}\n\n'
                n += 1

            messages.append(text)

            for m in messages:
                bot.send_message(user_id, m, parse_mode = 'Markdown')
