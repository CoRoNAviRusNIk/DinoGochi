import telebot
from telebot import types
import config
import random
import json
import pymongo
from PIL import Image, ImageFont, ImageDraw, ImageOps, ImageSequence, ImageFilter
import io
from io import BytesIO
from functions import functions
import time
import os
import threading

bot = telebot.TeleBot(config.TOKEN)

client = pymongo.MongoClient(config.CLUSTER_TOKEN)
users = client.bot.users
items = client.bot.items

def user_dino_pn(user):
    if len(user['dinos'].keys()) == 0:
        return '1'
    else:
        id_list = []
        for i in user['dinos'].keys():
            try:
                id_list.append(int(i))
            except:
                pass
        return str(max(id_list))

def random_dino(user, dino_id_remove):
    r_q = random.randint(1, 10000)
    if r_q in list(range(1, 5001)):
        quality = 'com'
    elif r_q in list(range(5001, 7501)):
        quality = 'unc'
    elif r_q in list(range(7501, 9001)):
        quality = 'rar'
    elif r_q in list(range(9001, 9801)):
        quality = 'myt'
    else:
        quality = 'leg'

    dino_id = None

    while dino_id == None:
        p_var = random.choice(json_f['data']['dino'])
        dino = json_f['elements'][str(p_var)]
        if dino['image'][5:8] == quality:
            dino_id = p_var

    dino = json_f['elements'][str(dino_id)]
    del user['dinos'][dino_id_remove]
    user['dinos'][user_dino_pn(user)] = {'dino_id': dino_id, "status": 'dino', 'activ_status': 'pass_active', 'name': dino['name'], 'stats':  {"heal": 100, "eat": random.randint(70, 100), 'game': random.randint(50, 100), 'mood': random.randint(7, 100), "unv": 100}}

    users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos']}} )


def notifications_manager(notification, user, arg = None):
    if user['settings']['notifications'] == True:
        chat = bot.get_chat(user['userid'])

        if notification == "5_min_incub":

            if user['language_code'] == 'ru':
                text = f'ü•ö | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –≤—ã–ª—É–ø–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!'
            else:
                text = f'ü•ö | {chat.first_name}, your dinosaur will hatch in 5 minutes!'

            bot.send_message(user['userid'], text)

        elif notification == "incub":

            if user['language_code'] == 'ru':
                text = f'ü¶ñ | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä –≤—ã–ª—É–ø–∏–ª—Å—è! üéâ'
            else:
                text = f'ü¶ñ | {chat.first_name}, the dinosaur has hatched! üéâ'

            bot.send_message(user['userid'], text)

        elif notification == "need_eat":

            if user['language_code'] == 'ru':
                text = f'üçï | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å, –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –¥–æ {arg}%!'
            else:
                text = f'üçï | {chat.first_name}, the dinosaur wants to eat, his need for food has dropped to {arg}%!'

            bot.send_message(user['userid'], text)

        elif notification == "need_game":

            if user['language_code'] == 'ru':
                text = f'üéÆ | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å, –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
            else:
                text = f'üéÆ | {chat.first_name}, The dinosaur wants to play, his need for the game has dropped to {arg}%!'

            bot.send_message(user['userid'], text)

        elif notification == "need_mood":

            if user['language_code'] == 'ru':
                text = f'ü¶ñ | {chat.first_name}, —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
            else:
                text = f'ü¶ñ | {chat.first_name}, the dinosaur is in a bad mood, his mood has sunk to {arg}%!'

            bot.send_message(user['userid'], text)

        elif notification == "need_unv":

            if user['language_code'] == 'ru':
                text = f'üåô | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å, –µ–≥–æ —Ö–∞—Ä—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
            else:
                text = f'üåô | {chat.first_name}, the dinosaur wants to sleep, his sleep characteristic dropped to {arg}%!'

            bot.send_message(user['userid'], text)

        elif notification == "dead":

            if user['language_code'] == 'ru':
                text = f'üí• | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫.... –£–º–µ—Ä...'
            else:
                text = f'üí• | {chat.first_name}, your dinosaur.... Died...'

            bot.send_message(user['userid'], text)

        elif notification == "woke_up":

            if user['language_code'] == 'ru':
                text = f'üåô | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –ø–æ–ª–æ–Ω —Å–∏–ª!'
            else:
                text = f'üí• | {chat.first_name}, your dinosaur is awake and full of energy!'

            bot.send_message(user['userid'], text)

        elif notification == "walk_end":

            if user['language_code'] == 'ru':

                text = f'ü¶ñ | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –≤–µ—Ä–Ω—É–ª—Å—è —Å –ø—Ä–æ–≥—É–ª–∫–∏!\n–í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–∫–∞ –æ–Ω –≥—É–ª—è–ª:\n'
                n = 1
                for el in arg:
                    text += f'{n}. {el}\n'
                    n += 1
            else:

                text = f"ü¶ñ | Your dinosaur is back from a walk!\nHere's what happened while he was walking:\n"

                n = 1
                for el in arg:
                    text += f'{n}. {el}\n'
                    n += 1

            bot.send_message(user['userid'], text)

def check(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        time.sleep(10)

        members = users.find({ })
        for user in members:

            for dino_id in user['dinos'].keys():
                dino = user['dinos'][dino_id]
                if dino['status'] == 'incubation': #–∏–Ω–∫—É–±–∞—Ü–∏—è
                    if dino['incubation_time'] - int(time.time()) <= 60*5 and dino['incubation_time'] - int(time.time()) > 0: #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç

                        if 'inc_notification' in list(user['notifications'].keys()):

                            if user['notifications']['inc_notification'] == False:
                                notifications_manager("5_min_incub", user, dino)

                                user['notifications']['inc_notification'] = True
                                users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications']}} )

                        else:
                            user['notifications']['inc_notification'] = True
                            users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications']}} )

                            notifications_manager("5_min_incub", user, dino_id)


                    elif dino['incubation_time'] - int(time.time()) <= 0:

                        if 'inc_notification' in list(user['notifications'].keys()):
                            del user['notifications']['inc_notification']
                            users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications']}} )

                        random_dino(user, dino_id)
                        notifications_manager("incub", user, dino_id)
                        break

                if dino['status'] == 'dino': #–¥–∏–Ω–æ
                #stats  - pass_active (–Ω–∏—á–µ–≥–æ) sleep - (—Å–æ–Ω)

                    #
                    if random.randint(1, 55) == 1: #eat
                        user['dinos'][dino_id]['stats']['eat'] -= random.randint(1,2)

                    if random.randint(1, 28) == 1: #game
                        user['dinos'][dino_id]['stats']['game'] -= random.randint(1,2)

                    if random.randint(1, 130) == 1: #unv
                        user['dinos'][dino_id]['stats']['unv'] -= random.randint(1,2)

                    if dino['activ_status'] == 'pass_active':

                        if user['dinos'][dino_id]['stats']['game'] > 90:
                            if dino['stats']['mood'] < 100:
                                if random.randint(1,30) == 1:
                                    user['dinos'][dino_id]['stats']['mood'] += random.randint(1,2)

                        if user['dinos'][dino_id]['stats']['unv'] <= 20 and user['dinos'][dino_id]['stats']['unv'] != 0:
                            if dino['stats']['mood'] > 0:
                                if random.randint(1,30) == 1:
                                    user['dinos'][dino_id]['stats']['mood'] -= random.randint(1,2)

                            if dino['stats']['heal'] > 0:
                                if random.randint(1,60) == 1:
                                    user['dinos'][dino_id]['stats']['heal'] -= 1
                                    user['dinos'][dino_id]['stats']['mood'] -= random.randint(1,10)

                    if dino['activ_status'] == 'sleep':

                        if user['dinos'][dino_id]['stats']['unv'] < 100:
                            if random.randint(1,45) == 1:
                                user['dinos'][dino_id]['stats']['unv'] += random.randint(1,2)

                        if user['dinos'][dino_id]['stats']['unv'] >= 100:
                            user['dinos'][dino_id]['activ_status'] = 'pass_active'
                            notifications_manager("woke_up", user)

                    if dino['activ_status'] == 'walk':

                        if int(dino['walk_time']-time.time()) <= 0:
                            user['dinos'][dino_id]['activ_status'] = 'pass_active'

                            notifications_manager("walk_end", user, user['dinos'][ dino_id ]['walk_log'])

                            del user['dinos'][ dino_id ]['walk_time']
                            del user['dinos'][ dino_id ]['walk_log']

                        if random.randint(1,60) == 1:
                            if random.randint(1,2) == 1:
                                event = '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ'
                                user['dinos'][ dino_id ]['walk_log'].append(event)

                            else:
                                event = '–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ'
                                user['dinos'][ dino_id ]['walk_log'].append(event)


                    if user['dinos'][dino_id]['stats']['game'] < 40 and user['dinos'][dino_id]['stats']['game'] > 10:
                        if dino['stats']['mood'] > 0:
                            if random.randint(1,30) == 1:
                                user['dinos'][dino_id]['stats']['mood'] -= random.randint(1,2)

                    if user['dinos'][dino_id]['stats']['game'] < 20:
                        if dino['stats']['mood'] > 0:
                            if random.randint(1,15) == 1:
                                user['dinos'][dino_id]['stats']['mood'] -= 5

                    if user['dinos'][dino_id]['stats']['unv'] == 0:
                        if random.randint(1,30) == 1:
                            user['dinos'][dino_id]['stats']['heal'] -= 5

                    if user['dinos'][dino_id]['stats']['eat'] > 90:
                        if dino['stats']['mood'] < 100:
                            if random.randint(1,30) == 1:
                                user['dinos'][dino_id]['stats']['mood'] += random.randint(1,2)

                    if user['dinos'][dino_id]['stats']['eat'] <= 40 and user['dinos'][dino_id]['stats']['eat'] != 0:
                        if dino['stats']['mood'] > 0:
                            if random.randint(1,30) == 1:
                                user['dinos'][dino_id]['stats']['mood'] -= random.randint(1,2)

                        if dino['stats']['heal'] > 0:
                            if random.randint(1,30) == 1:
                                user['dinos'][dino_id]['stats']['heal'] -= random.randint(1,2)

                    if user['dinos'][dino_id]['stats']['eat'] == 0:
                        if dino['stats']['heal'] > 0:
                            if random.randint(1,30) == 1:
                                user['dinos'][dino_id]['stats']['heal'] -= 5


                    if user['dinos'][dino_id]['stats']['eat'] > 80 and user['dinos'][dino_id]['stats']['unv'] > 70 and user['dinos'][dino_id]['stats']['game'] > 70 and user['dinos'][dino_id]['stats']['mood'] > 50:

                        if random.randint(1,6) == 1:
                            user['dinos'][dino_id]['stats']['heal'] += random.randint(1,4)
                            user['dinos'][dino_id]['stats']['eat'] -= random.randint(0,1)
                            user['dinos'][dino_id]['stats']['unv'] -= random.randint(0,1)


                    if user['dinos'][dino_id]['stats']['unv'] >= 100:
                        user['dinos'][dino_id]['stats']['unv'] = 100
                        user['dinos'][dino_id]['activ_status'] = 'pass_active'

                    if user['dinos'][dino_id]['stats']['unv'] >= 40:
                        user['notifications']['need_unv'] = False

                    if user['dinos'][dino_id]['stats']['eat'] >= 100:
                        user['dinos'][dino_id]['stats']['eat'] = 100

                    if user['dinos'][dino_id]['stats']['eat'] >= 50:
                        user['notifications']['need_eat'] = False

                    if user['dinos'][dino_id]['stats']['game'] >= 100:
                        user['dinos'][dino_id]['stats']['game'] = 100

                    if user['dinos'][dino_id]['stats']['game'] >= 80:
                        user['notifications']['need_game'] = False

                    if user['dinos'][dino_id]['stats']['heal'] >= 100:
                        user['dinos'][dino_id]['stats']['heal'] = 100

                    if user['dinos'][dino_id]['stats']['mood'] >= 100:
                        user['dinos'][dino_id]['stats']['mood'] = 100

                    if user['dinos'][dino_id]['stats']['mood'] >= 80:
                        user['notifications']['need_mood'] = False


                    if user['dinos'][dino_id]['stats']['unv'] < 0:
                        user['dinos'][dino_id]['stats']['unv'] = 0

                    if user['dinos'][dino_id]['stats']['unv'] <= 30:
                        if 'need_unv' not in list(user['notifications'].keys()) or user['notifications']['need_unv'] == False:
                            notifications_manager("need_unv", user, user['dinos'][dino_id]['stats']['unv'])
                            user['notifications']['need_unv'] = True

                    if user['dinos'][dino_id]['stats']['eat'] < 0:
                        user['dinos'][dino_id]['stats']['eat'] = 0

                    if user['dinos'][dino_id]['stats']['eat'] <= 40:
                        if 'need_eat' not in list(user['notifications'].keys()) or user['notifications']['need_eat'] == False:
                            notifications_manager("need_eat", user, user['dinos'][dino_id]['stats']['eat'])
                            user['notifications']['need_eat'] = True

                    if user['dinos'][dino_id]['stats']['game'] < 0:
                        user['dinos'][dino_id]['stats']['game'] = 0

                    if user['dinos'][dino_id]['stats']['game'] <= 50:
                        if 'need_game' not in list(user['notifications'].keys()) or user['notifications']['need_game'] == False:
                            notifications_manager("need_game", user, user['dinos'][dino_id]['stats']['game'])
                            user['notifications']['need_game'] = True

                    if user['dinos'][dino_id]['stats']['mood'] < 0:
                        user['dinos'][dino_id]['stats']['mood'] = 0

                    if user['dinos'][dino_id]['stats']['mood'] <= 70:
                        if 'need_mood' not in list(user['notifications'].keys()) or user['notifications']['need_mood'] == False:
                            notifications_manager("need_mood", user, user['dinos'][dino_id]['stats']['mood'])
                            user['notifications']['need_mood'] = True

                    if user['dinos'][dino_id]['stats']['heal'] <= 0:
                        user['dinos'][dino_id]['stats']['heal'] = 0
                        user['dinos'][dino_id]['status'] = 'dead_dino'

                        if 'dead' not in list(user['notifications'].keys()) or user['notifications']['dead'] == False:
                            notifications_manager("dead", user)
                            user['notifications']['dead'] = True


                    users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos'] }} )
                    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )



thr1 = threading.Thread(target = check, daemon=True)


with open('../images/dino_data.json') as f:
    json_f = json.load(f)

def markup(element = 1, user = None):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)

    if element == 1 and users.find_one({"userid": user.id}) != None:

        if user.language_code == 'ru':
            nl = ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'üïπ –î–µ–π—Å—Ç–≤–∏—è', 'üé¢ –†–µ–π—Ç–∏–Ω–≥', 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        else:
            nl = ['ü¶ñ Dinosaur', 'üïπ Actions', 'üé¢ Rating', 'üîß Settings']

        item1 = types.KeyboardButton(nl[0])
        item2 = types.KeyboardButton(nl[1])
        item3 = types.KeyboardButton(nl[2])
        item4 = types.KeyboardButton(nl[3])

        markup.add(item1, item2, item3, item4)

    elif element == 1:
        if user.language_code == 'ru':
            nl = ['üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å']
        else:
            nl = ['üç° Start playing']

        item1 = types.KeyboardButton(nl[0])

        markup.add(item1)

    elif element == "settings":
        bd_user = users.find_one({"userid": user.id})

        if user.language_code == 'ru':
            nl = []

            if bd_user['settings']['notifications'] == True:
                nl.append('‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚ùé')
            else:
                nl.append('‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ')

            nl.append('‚Ü™ –ù–∞–∑–∞–¥')

        else:
            nl = []

            if bd_user['settings']['notifications'] == True:
                nl.append('‚ùó Notifications: ‚ùé')
            else:
                nl.append('‚ùó Notifications: ‚úÖ')

            nl.append('‚Ü™ Back')


        item1 = types.KeyboardButton(nl[0])
        item2 = types.KeyboardButton(nl[1])

        markup.add(item1, item2)

    elif element == 'actions' and users.find_one({"userid": user.id}) != None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)

        bd_user = users.find_one({"userid": user.id})

        if user.language_code == 'ru':
            nl = ['üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å', 'üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å', 'üî™ –ü–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è', '‚Ü™ –ù–∞–∑–∞–¥']

            if len(bd_user['dinos']) == 1:
                dino = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]

                if dino['activ_status'] == 'walk':
                    nl.insert(2, 'üéë –ü–æ–∑–≤–∞—Ç—å')
                else:
                    nl.insert(2, 'üéë –ü–æ–≥—É–ª—è—Ç—å')

                if dino['activ_status'] == 'sleep':
                    nl.insert(3, 'üåô –ü—Ä–æ–±—É–¥–∏—Ç—å')
                else:
                    nl.insert(3, 'üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å')

            else:
                pass
        else:
            nl = ['üéÆ Play', 'üç£ Feed', 'üî™ To hunt', '‚Ü™ Back']

            if len(bd_user['dinos']) == 1:
                dino = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]

                if dino['activ_status'] == 'walk':
                    nl.insert(2, 'üéë Call')
                else:
                    nl.insert(2, 'üéë Walk')

                if dino['activ_status'] == 'sleep':
                    nl.insert(3, 'üåô Awaken')
                else:
                    nl.insert(3, 'üåô Put to bed')

            else:
                pass

        item1 = types.KeyboardButton(nl[0])
        item2 = types.KeyboardButton(nl[1])
        item3 = types.KeyboardButton(nl[2])
        item4 = types.KeyboardButton(nl[3])
        item5 = types.KeyboardButton(nl[4])
        item6 = types.KeyboardButton(nl[5])

        markup.add(item1, item2, item3, item4, item5, item6)

    else:
        print(f'{element}\n{user}')



    return markup


@bot.message_handler(commands=['start', 'help'])
def on_start(message):
    user = message.from_user
    if users.find_one({"userid": user.id}) == None:
        if user.language_code == 'ru':
            text = f"üéã | –•–µ–π <b>{user.first_name}</b>, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è!\n"+ f"<b>‚Ä¢</b> –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –ø–æ —Ç–∏–ø—É —Ç–∞–º–∞–≥–æ—á–∏, —Ç–æ–ª—å–∫–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏!ü¶ñ\n\n"+f"<b>üïπ | –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–º–∞–≥–æ—á–∏?</b>\n"+f'<b>‚Ä¢</b> –¢–∞–º–∞–≥–æ—á–∏ - –∏–≥—Ä–∞ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∫–æ—Ä–º–∏—Ç—å, —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º, –∏–≥—Ä–∞—Ç—å –∏ —Ç–¥.ü•ö\n'+f"<b>‚Ä¢</b> –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ –ª—É—á—à–∏–º!\n\n"+f"<b>üéÆ | –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å?</b>\n"+f'<b>‚Ä¢</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–º–∫—É <b>üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</b>!\n\n'+f'<b>‚ù§ | –ñ–¥—ë–º –≤ –∏–≥—Ä–µ!</b>\n'
        else:
            text = f"üéã | Hey <b>{user.first_name}</b>, I am glad to welcome you!\n" +f"<b>‚Ä¢</b> I'm a small tamagotchi-type game bot, only with dinosaurs!ü¶ñ\n\n"+f"<b>üïπ | What is tamagotchi?</b>\n"+ f'<b>‚Ä¢</b> Tamagotchi is a game with a virtual pet that needs to be fed, cared for, played, and so on.ü•ö\n'+ f"<b>‚Ä¢</b> Compete in the ranking and become the best!\n\n"+ f"<b>üéÆ | How to start playing?</b>\n" + f'<b>‚Ä¢</b> Press the button <b>üç°Start playing</b>!\n\n' + f'<b>‚ù§ | Waiting in the game!</b>\n' +f'<b>‚ùó | In some places, the bot may not be translated!</b>\n'

        bot.reply_to(message, text, reply_markup = markup(user = user), parse_mode = 'html')
    else:
        bot.reply_to(message, 'üëã', reply_markup = markup(user = user), parse_mode = 'html')


@bot.message_handler(content_types = ['text'])
def on_message(message):
    user = message.from_user

    def trans_paste(fg_img,bg_img,alpha=10,box=(0,0)):
        fg_img_trans = Image.new("RGBA",fg_img.size)
        fg_img_trans = Image.blend(fg_img_trans,fg_img,alpha)
        bg_img.paste(fg_img_trans,box,fg_img_trans)
        return bg_img

    if message.chat.type == 'private':

        if message.text in ['üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å', 'üç° Start playing']:
            if users.find_one({"userid": user.id}) == None:

                def photo():
                    global json_f
                    bg_p = Image.open(f"../images/remain/{random.choice(['back', 'back2'])}.png")
                    eg_l = []
                    id_l = []

                    for i in range(3):
                        rid = str(random.choice(list(json_f['data']['egg'])))
                        image = Image.open('../images/'+str(json_f['elements'][rid]['image']))
                        eg_l.append(image)
                        id_l.append(rid)

                    for i in range(3):
                        bg_img = bg_p
                        fg_img = eg_l[i]
                        img = trans_paste(fg_img, bg_img, 1.0, (i*512,0))

                    img.save('eggs.png')
                    photo = open(f"eggs.png", 'rb')

                    return photo, id_l

                if user.language_code == 'ru':
                    text = 'ü•ö | –í—ã–±–µ—Ä–∏—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º!'
                else:
                    text = 'ü•ö | Choose a dinosaur egg!'

                users.insert_one({'userid': user.id, 'dinos': {}, 'eggs': [], 'notifications': {}, 'settings': {'notifications': True}, 'language_code': user.language_code, 'inventory': [], 'coins': 0})

                markup_inline = types.InlineKeyboardMarkup()
                item_1 = types.InlineKeyboardButton( text = 'ü•ö 1', callback_data = 'egg_answer_1')
                item_2 = types.InlineKeyboardButton( text = 'ü•ö 2', callback_data = 'egg_answer_2')
                item_3 = types.InlineKeyboardButton( text = 'ü•ö 3', callback_data = 'egg_answer_3')
                markup_inline.add(item_1, item_2, item_3)

                photo, id_l = photo()
                bot.send_photo(message.chat.id, photo, text, reply_markup = markup_inline)
                users.update_one( {"userid": user.id}, {"$set": {'eggs': id_l}} )

    if message.text in ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'ü¶ñ Dinosaur']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            def egg_profile(bd_user, user):
                egg_id = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['egg_id']

                if user.language_code == 'ru':
                    lang = user.language_code
                else:
                    lang = 'en'

                t_incub = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['incubation_time'] - time.time()
                if t_incub < 0:
                    t_incub = 0

                time_end = functions.time_end(t_incub, True)
                if len(time_end) >= 18:
                    time_end = time_end[:-6]

                bg_p = Image.open(f"../images/remain/egg_profile_{lang}.png")
                egg = Image.open("../images/" + str(json_f['elements'][egg_id]['image']))
                egg = egg.resize((290, 290), Image.ANTIALIAS)

                img = trans_paste(egg, bg_p, 1.0, (-50, 40))

                idraw = ImageDraw.Draw(img)
                line1 = ImageFont.truetype("../fonts/Comic Sans MS.ttf", size = 35)

                idraw.text((430, 220), time_end, font = line1)

                img.save('profile.png')
                profile = open(f"profile.png", 'rb')

                return profile, time_end

            def dino_profile(bd_user, user, dino_user_id):

                dino_id = str(bd_user['dinos'][ dino_user_id ]['dino_id'])

                if user.language_code == 'ru':
                    lang = user.language_code
                else:
                    lang = 'en'

                dino = json_f['elements'][dino_id]
                if 'class' in list(dino.keys()):
                    bg_p = Image.open(f"../images/remain/{dino['class']}_icon.png")
                else:
                    bg_p = Image.open(f"../images/remain/None_icon.png")

                class_ = dino['image'][5:8]

                panel_i = Image.open(f"../images/remain/{class_}_profile_{lang}.png")

                img = trans_paste(panel_i, bg_p, 1.0)

                dino_image = Image.open("../images/"+str(json_f['elements'][dino_id]['image']))

                sz = 412
                dino_image = dino_image.resize((sz, sz), Image.ANTIALIAS)

                xy = -80
                x2 = 80
                img = trans_paste(dino_image, img, 1.0, (xy + x2, xy, sz + xy + x2, sz + xy ))


                idraw = ImageDraw.Draw(img)
                line1 = ImageFont.truetype("../fonts/Comic Sans MS.ttf", size = 35)

                idraw.text((530, 110), str(bd_user['dinos'][dino_user_id]['stats']['heal']), font = line1)
                idraw.text((530, 190), str(bd_user['dinos'][dino_user_id]['stats']['eat']), font = line1)

                idraw.text((750, 110), str(bd_user['dinos'][dino_user_id]['stats']['game']), font = line1)
                idraw.text((750, 190), str(bd_user['dinos'][dino_user_id]['stats']['mood']), font = line1)
                idraw.text((750, 270), str(bd_user['dinos'][dino_user_id]['stats']['unv']), font = line1)

                img.save('profile.png')
                profile = open(f"profile.png", 'rb')

                return profile

            if len(bd_user['dinos'].keys()) == 0:
                pass

            elif len(bd_user['dinos'].keys()) == 1:


                if bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['status'] == 'incubation':

                    profile, time_end  = egg_profile(bd_user, user)
                    if user.language_code == 'ru':
                        text = f'ü•ö | –Ø–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å: {time_end}'
                    else:
                        text = f'ü•ö | The egg is incubated, left: {time_end}'

                    bot.send_photo(message.chat.id, profile, text, reply_markup = markup(user = user))

                if bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['status'] == 'dino':
                    bd_dino = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]

                    profile = dino_profile(bd_user, user, dino_user_id = list(bd_user['dinos'].keys())[0] )

                    if user.language_code == 'ru':

                        if bd_dino['activ_status'] == 'pass_active':
                            st_t = '–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç üí≠'
                        elif bd_dino['activ_status'] == 'sleep':
                            st_t = '—Å–ø–∏—Ç üåô'
                        elif bd_dino['activ_status'] == 'game':
                            st_t = '–∏–≥—Ä–∞–µ—Ç üéÆ'
                        elif bd_dino['activ_status'] == 'walk':
                            st_t = '–≥—É–ª—è–µ—Ç üé¥'
                        elif bd_dino['activ_status'] == 'hunt':
                            st_t = '–æ—Ö–æ—Ç–∏—Ç—Å—è üî™'

                        if bd_dino['stats']['heal'] >= 60:
                            h_text = '‚ù§ | –î–∏–Ω–æ–∑–∞–≤—Ä –∑–¥–æ—Ä–æ–≤'
                        elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                            h_text = '‚ù§ | –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏'
                        elif bd_dino['stats']['heal'] <= 10:
                            h_text = '‚ù§ | –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –∫—Ä–∞–π–Ω–µ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!'

                        if bd_dino['stats']['eat'] >= 60:
                            e_text = 'üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç'
                        elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                            e_text = 'üçï | –î–∏–Ω–æ–∑–∞–≤—Ä –≥–æ–ª–æ–¥–µ–Ω'
                        elif bd_dino['stats']['eat'] <= 10:
                            e_text = 'üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–∏—Ä–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–¥–∞!'

                        if bd_dino['stats']['game'] >= 60:
                            g_text = 'üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å'
                        elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                            g_text = 'üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä —Å–∫—É—á–∞–µ—Ç...'
                        elif bd_dino['stats']['game'] <= 10:
                            g_text = 'üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–µ—Ä–∞–µ—Ç –æ—Ç —Å–∫—É–∫–∏!'

                        if bd_dino['stats']['mood'] >= 60:
                            m_text = 'üéà | –î–∏–Ω–æ–∑–∞–≤—Ä –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏'
                        elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                            m_text = 'üéà | –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
                        elif bd_dino['stats']['mood'] <= 10:
                            m_text = 'üéà | –î–∏–Ω–æ–∑–∞–≤—Ä –≥—Ä—É—Å—Ç–∏—Ç!'

                        if bd_dino['stats']['unv'] >= 60:
                            u_text = 'üåô | –î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ–ª–æ–Ω —Å–∏–ª'
                        elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                            u_text = 'üåô | –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –µ—Å—Ç—å —Å–∏–ª—ã'
                        elif bd_dino['stats']['unv'] <= 10:
                            u_text = 'üåô | –î–∏–Ω–æ–∑–∞–≤—Ä —É—Å—Ç–∞–ª!'


                        text = f'ü¶ñ | –ò–º—è: {bd_dino["name"]}\nüëÅ‚Äçüó® | –°—Ç–∞—Ç—É—Å: {st_t} \n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                        if bd_dino['activ_status'] == 'walk':
                            w_t = bd_dino['walk_time'] - time.time()
                            if w_t < 0:
                                w_t = 0
                            text += f"\n\nüå≥ | –ü—Ä–æ–≥—É–ª–∫–∞: \n¬∑  –û—Å—Ç–∞–ª–æ—Å—å: { functions.time_end(w_t) }"
                    else:

                        if bd_dino['activ_status'] == 'pass_active':
                            st_t = 'does nothing üí≠'
                        elif bd_dino['activ_status'] == 'sleep':
                            st_t = 'sleeping üåô'
                        elif bd_dino['activ_status'] == 'game':
                            st_t = 'playing üéÆ'
                        elif bd_dino['activ_status'] == 'walk':
                            st_t = 'walking üé¥'
                        elif bd_dino['activ_status'] == 'hunt':
                            st_t = 'hunting üî™'

                        if bd_dino['stats']['heal'] >= 60:
                            h_text = '‚ù§ | The dinosaur is healthy'
                        elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                            h_text = '‚ù§ | Dinosaur in bad condition'
                        elif bd_dino['stats']['heal'] <= 10:
                            h_text = '‚ù§ | The dinosaur is in extremely bad condition!'

                        if bd_dino['stats']['eat'] >= 60:
                            e_text = 'üçï | The dinosaur is full'
                        elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                            e_text = 'üçï | The dinosaur is hungry'
                        elif bd_dino['stats']['eat'] <= 10:
                            e_text = 'üçï | The dinosaur is starving!'

                        if bd_dino['stats']['game'] >= 60:
                            g_text = "üéÆ | The dinosaur doesn't want to play"
                        elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                            g_text = 'üéÆ | The dinosaur is bored...'
                        elif bd_dino['stats']['game'] <= 10:
                            g_text = 'üéÆ | The dinosaur is dying of boredom!'

                        if bd_dino['stats']['mood'] >= 60:
                            m_text = 'üéà | The dinosaur is in a good mood'
                        elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                            m_text = 'üéà | The dinosaur has a normal mood'
                        elif bd_dino['stats']['mood'] <= 10:
                            m_text = 'üéà | The dinosaur is sad!'

                        if bd_dino['stats']['unv'] >= 60:
                            u_text = 'üåô | The dinosaur is full of energy'
                        elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                            u_text = 'üåô | The dinosaur has powers'
                        elif bd_dino['stats']['unv'] <= 10:
                            u_text = 'üåô | The dinosaur is tired!'

                        text = f'ü¶ñ | Name: {bd_dino["name"]}\nüëÅ‚Äçüó® | Status: {st_t}\n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                    bot.send_photo(message.chat.id, profile, text, reply_markup = markup(user = user) )

            else:
                pass

    if message.text in ['üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîß Settings']:
        bd_user = users.find_one({"userid": user.id})

        if bd_user != None:

            if user.language_code == 'ru':
                text = 'üîß –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
            else:
                text = 'üîß The settings menu is activated'


            bot.send_message(message.chat.id, text, reply_markup = markup('settings', user))

    if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:

        if user.language_code == 'ru':
            text = '‚Ü™ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        else:
            text = '‚Ü™ Return to the main menu'

        bot.send_message(message.chat.id, text, reply_markup = markup(1, user))

    if message.text in ['‚ùó Notifications: ‚úÖ', '‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if bd_user['settings']['notifications'] == False:
                bd_user['settings']['notifications'] = True
                users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                if user.language_code == 'ru':
                    text = 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã!'
                else:
                    text = 'üîß Settings changed!'

                bot.send_message(message.chat.id, text, reply_markup = markup("settings", user))

    if message.text in ['‚ùó Notifications: ‚ùé', '‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚ùé']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if bd_user['settings']['notifications'] == True:
                bd_user['settings']['notifications'] = False
                users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                if user.language_code == 'ru':
                    text = 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã!'
                else:
                    text = 'üîß Settings changed!'

                bot.send_message(message.chat.id, text, reply_markup = markup("settings", user))

    if message.text in ['üïπ –î–µ–π—Å—Ç–≤–∏—è', 'üïπ Actions']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:

            if user.language_code == 'ru':
                text = 'üïπ –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∞!'
            else:
                text = 'üïπ The action panel is open!'

            bot.send_message(message.chat.id, text, reply_markup = markup("actions", user))

    # nl = ['üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å', 'üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å', 'üéë –ü–æ–≥—É–ª—è—Ç—å', 'üî™ –ü–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è', 'üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']
    #
    # nl = ['üéÆ Play', 'üç£ Feed', 'üéë Walk', 'üî™ To hunt', 'üåô Put to bed', '‚Ü™ Back']

    if message.text in ['üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å', 'üåô Put to bed']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if len(bd_user['dinos']) == 1:
                dino = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]
                if dino['activ_status'] == 'pass_active':
                    if dino['stats']['unv'] >= 90:

                        if user.language_code == 'ru':
                            text = 'üåô –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å!'
                        else:
                            text = "üåô The dinosaur doesn't want to sleep!"

                        bot.send_message(message.chat.id, text, reply_markup = markup("actions", user))

                    else:

                        bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['activ_status'] = 'sleep'
                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                        if user.language_code == 'ru':
                            text = 'üåô –í—ã —É–ª–æ–∂–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Å–ø–∞—Ç—å!'
                        else:
                            text = "üåô You put the dinosaur to sleep!"

                        bot.send_message(message.chat.id, text , reply_markup = markup('actions', user))

            else:
                pass

    if message.text in ['üåô –ü—Ä–æ–±—É–¥–∏—Ç—å', 'üåô Awaken']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if len(bd_user['dinos']) == 1:
                dino = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]
                if dino['activ_status'] == 'sleep':
                    r_n = random.randint(0, 20)

                    bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['activ_status'] = 'pass_active'
                    bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['stats']['mood'] -= r_n

                    if bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['stats']['mood'] < 0:
                        bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['stats']['mood'] = 0

                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                    if user.language_code == 'ru':
                        text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è. –û–Ω —Å–∏–ª—å–Ω–æ –Ω–µ –¥–æ–≤–æ–ª–µ–Ω —á—Ç–æ –≤—ã –µ–≥–æ —Ä–∞–∑–±—É–¥–∏–ª–∏!n\–î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ—Ç–µ—Ä—è–ª {r_n}% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.'
                    else:
                        text = f"üåô Your dinosaur has awakened. He is very unhappy that you woke him up!n\Dinosaur lost {r_n}% of mood."

                    bot.send_message(message.chat.id, text , reply_markup = markup('actions', user))


    if message.text in ['üéë –ü–æ–≥—É–ª—è—Ç—å', 'üéë Walk']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if len(bd_user['dinos']) == 1:
                dino = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]
                if dino['activ_status'] == 'pass_active':
                    markup_inline = types.InlineKeyboardMarkup()

                    if user.language_code == 'ru':
                        text = 'üå≥ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å—Ç–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –ø–æ–≥—É–ª—è—Ç—å?'

                        item_0 = types.InlineKeyboardButton( text = '10 –º–∏–Ω.', callback_data = f"10min_walk_{list(bd_user['dinos'].keys())[0]}")

                        item_1 = types.InlineKeyboardButton( text = '30 –º–∏–Ω.', callback_data = f"30min_walk_{list(bd_user['dinos'].keys())[0]}")

                        item_2 = types.InlineKeyboardButton( text = '60 –º–∏–Ω.', callback_data = f"60min_walk_{list(bd_user['dinos'].keys())[0]}")

                        item_3 = types.InlineKeyboardButton( text = '90 –º–∏–Ω.', callback_data = f"90min_walk_{list(bd_user['dinos'].keys())[0]}")

                    else:
                        text = "üå≥ How long should I let the dinosaur go for a walk?"

                        item_0 = types.InlineKeyboardButton( text = '10 min.', callback_data = f"10min_walk_{list(bd_user['dinos'].keys())[0]}")

                        item_1 = types.InlineKeyboardButton( text = '30 min.', callback_data = f"30min_walk_{list(bd_user['dinos'].keys())[0]}")

                        item_2 = types.InlineKeyboardButton( text = '60 min.', callback_data = f"60min_walk_{list(bd_user['dinos'].keys())[0]}")

                        item_3 = types.InlineKeyboardButton( text = '90 min.', callback_data = f"90min_walk_{list(bd_user['dinos'].keys())[0]}")

                    markup_inline.add(item_0, item_1, item_2, item_3)

                    bot.send_message(message.chat.id, text, reply_markup = markup_inline)

        else:
            pass

    if message.text in ['üéë –ü–æ–∑–≤–∞—Ç—å', 'üéë Call']:
        bd_user = users.find_one({"userid": user.id})
        if bd_user != None:
            if len(bd_user['dinos']) == 1:
                dino = bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]
                if dino['activ_status'] == 'walk':
                    if random.randint(1,2) == 1:

                        if user.language_code == 'ru':
                            text = f'ü¶ñ | –í—ã –ø–æ–∑–≤–∞–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∏ –æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è!\n–í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ–∫–∞ –æ–Ω –≥—É–ª—è–ª:\n'
                            n = 0
                            for el in bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['walk_log']:
                                text += f'{n}. {el}\n'

                        else:
                            text = f"ü¶ñ | You called the dinosaur and it successfully returned!\nHere's what happened while he was walking:\n"

                            n = 0
                            for el in bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['walk_log']:
                                text += f'{n}. {el}\n'

                        bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['activ_status'] = 'pass_active'
                        del bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['walk_time']
                        del bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['walk_log']

                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                        bot.send_message(message.chat.id, text, reply_markup = markup('actions', user))


                    else:
                        if user.language_code == 'ru':
                            text = f'üîá | –í–∞—à –≥–æ–ª–æ—Å –Ω–µ —Å–ª—ã—à–µ–Ω –¥–∏–Ω–æ–∑–∞–≤—Ä—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!'
                        else:
                            text = f"üîá | Your voice is not audible to the dinosaur, try again!"

                        bot.send_message(message.chat.id, text , reply_markup = markup('actions', user))



            else:
                pass





@bot.callback_query_handler(func = lambda call: True)
def answer(call):

    if call.data in ['egg_answer_1', 'egg_answer_2', 'egg_answer_3']:
        user = call.from_user
        bd_user = users.find_one({"userid": user.id})

        if 'eggs' in list(bd_user.keys()):
            egg_n = call.data[11:]

            bd_user['dinos'][ user_dino_pn(bd_user) ] = {'status': 'incubation', 'incubation_time': time.time() + 30 * 60, 'egg_id': bd_user['eggs'][int(egg_n)-1]}

            users.update_one( {"userid": user.id}, {"$unset": {'eggs': None}} )
            users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

            if user.language_code == 'ru':
                text = f'ü•ö | –í—ã–±–µ—Ä–∏—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º!\nü¶ñ | –í—ã –≤—ã–±—Ä–∞–ª–∏ —è–π—Ü–æ ü•ö{egg_n}!'
                text2 = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–∏–Ω–æ–∑–∞–≤—Ä!\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è, –∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∏–∑ –Ω–µ–≥–æ –≤—ã–ª—É–ø–∏—Ç—Å—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫!\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–π—Ü–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä</b>!'
            else:
                text = f'ü•ö | Choose a dinosaur egg!\nü¶ñ | You have chosen an egg ü•ö{egg_n}!'
                text2 = f'Congratulations, you have your first dinosaur!\n At the moment the egg is incubating, and after 12 hours a dinosaur will hatch out of it!To view up-to-date information about the egg, click <b>ü¶ñ Dinosaur</b>!'

            bot.edit_message_caption(text, call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, text2, parse_mode = 'html', reply_markup = markup(1, user))

    if call.data[:10] in ['90min_walk', '60min_walk', '30min_walk', '10min_walk']:
        user = call.from_user
        bd_user = users.find_one({"userid": user.id})

        bd_user['dinos'][ call.data[11:] ]['activ_status'] = 'walk'
        bd_user['dinos'][ call.data[11:] ]['walk_time'] = time.time() + 60 * int(call.data[:2])
        bd_user['dinos'][ call.data[11:] ]['walk_log'] = []
        users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

        if user.language_code == 'ru':
            text = f'üéà | –ï—Å–ª–∏ —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫–∏–µ —Ç–æ –≤–µ—â–∏.\n\nüß∂ | –ï—Å–ª–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ —Å–ª—É—á–∏—Ç—Å—è –∫–∞–∫–∞—è —Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—Å—è –∏–ª–∏ –ø–æ–Ω–∏–∑–∏—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.'
            text2 = f'üå≥ | –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –≤ —Å–≤–æ–±–æ–¥–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ {call.data[:2]} –º–∏–Ω—É—Ç.'

        else:
            text = f"üéà | If the dinosaur is in a good mood, he can bring back some things.\n\nüß∂ | If some unexpected situation happens on a walk, the dinosaur's mood may rise or fall."
            text2 = f"üå≥ | You sent the dinosaur for a free walk for {call.data[:2]} minutes."

        bot.edit_message_text(text2, call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, text, parse_mode = 'html', reply_markup = markup("actions", user))



print(f'–ë–æ—Ç {bot.get_me().first_name} –∑–∞–ø—É—â–µ–Ω!')
thr1.start()

bot.infinity_polling()
