import telebot
from telebot import types
import config
import random
import json
import pymongo
from PIL import Image, ImageFont, ImageDraw, ImageOps, ImageSequence, ImageFilter
import io
from io import BytesIO
import time
import threading
import sys
from memory_profiler import memory_usage
import pprint
from fuzzywuzzy import fuzz

sys.path.append("Cogs")
from commands import commands
from functions import functions
from checks import checks

bot = telebot.TeleBot(config.TOKEN)

client = pymongo.MongoClient(config.CLUSTER_TOKEN)
users = client.bot.users
referal_system = client.bot.referal_system
market = client.bot.market

with open('data/items.json', encoding='utf-8') as f:
    items_f = json.load(f)

with open('data/dino_data.json', encoding='utf-8') as f:
    json_f = json.load(f)


def check(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    def alpha(bot, members): checks.main(bot, members)

    def beta(bot, members): checks.main_hunting(bot, members)

    def beta2(bot, members): checks.main_game(bot, members)

    def gamma(bot, members): checks.main_sleep(bot, members)

    def gamma2(bot, members): checks.main_pass(bot, members)

    def delta(bot, members): checks.main_journey(bot, members)

    def memory(): checks.check_memory()

    non_members = users.find({ })
    chunks_users = list(functions.chunks( list(non_members), 50 ))
    functions.check_data('col', None, int(len(chunks_users)) )

    while True:
        if int(memory_usage()[0]) < 1500:
            st_r_time = int(time.time())
            non_members = users.find({ })
            chunks_users = list(functions.chunks( list(non_members), 50 ))
            sl_time = 10 - ( int(time.time()) - st_r_time )

            if sl_time <= 0:
                print(f'WARNING: sleep time: {sl_time}, time sleep skip to 10')
                sl_time = 10

            for members in chunks_users:

                threading.Thread(target = alpha,  daemon=True, kwargs = {'bot': bot, 'members': members}).start()
                threading.Thread(target = beta,   daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = beta2,  daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = gamma,  daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = gamma2, daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = delta,  daemon=True, kwargs = {'bot': bot, 'members': members}).start()

            threading.Thread(target = memory, daemon=True ).start()

        else:
            print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {int(memory_usage()[0])}')

        time.sleep(sl_time)

main_checks = threading.Thread(target = check, daemon=True)

def check_notif(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    def alpha(bot, members): checks.check_notif(bot, members)

    def beta(bot): checks.check_incub(bot)

    while True:

        if int(memory_usage()[0]) < 1500:
            non_members = users.find({ })
            chunks_users = list(functions.chunks( list(non_members), 50 ))

            for members in chunks_users:
                threading.Thread(target = alpha, daemon=True, kwargs = {'bot': bot, 'members': members}).start()

            threading.Thread(target = beta, daemon=True, kwargs = {'bot': bot}).start()

        else:
            print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {int(memory_usage()[0])}')

        time.sleep(5)

thr_notif = threading.Thread(target = check_notif, daemon=True)

def min10_check(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω

    def alpha(users): checks.rayt(users)

    def dead_users(bot): checks.check_dead_users(bot)

    while True:

        if int(memory_usage()[0]) < 1500:
            uss = users.find({ })
            threading.Thread(target = alpha, daemon=True, kwargs = {'users': uss}).start()

            if bot.get_me().first_name == 'DinoGochi':
                threading.Thread(target = dead_users, daemon=True, kwargs = {'bot': bot} ).start()

        else:
            print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {int(memory_usage()[0])}')

        time.sleep(600)

min10_thr = threading.Thread(target = min10_check, daemon=True)


# @bot.message_handler(commands=['nw'])
# def command_n(message):
#     user = message.from_user
#     if user.id in [5279769615, 1191252229]:
#
#         def work(members, n):
#             for bd_user in members:
#                 nw_inv = bd_user['inventory'].copy()
#
#                 for i in bd_user['inventory']:
#                     if 'abilities' in i.keys():
#                         dt_it = items_f['items'][i['item_id']]
#                         if dt_it['abilities'] != i['abilities']:
#                             nw_inv.remove(i)
#
#                 if nw_inv != bd_user['inventory']:
#                     users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': nw_inv }} )
#
#             print(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Ññ{n} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.')
#
#         non_members = users.find({ })
#         chunks_users = list(functions.chunks( list(non_members), 10 ))
#
#         n = 0
#         for members in chunks_users:
#             n += 1
#             main = threading.Thread(target = work, daemon=True, kwargs = { 'members': members, 'n': n}).start()

@bot.message_handler(commands=['stats'])
def command(message):
    user = message.from_user
    checks_data = functions.check_data(m = 'check')

    def ttx(tm, lst):
        lgs = []
        for i in lst:
            lgs.append(f'{int(tm) - i}s')
        return ', '.join(lgs)


    text = 'STATS\n\n'
    text += f"Memory: {checks_data['memory'][0]}mb\nLast {int(time.time() - checks_data['memory'][1]) }s\n\n"
    text += f"Incub check: {checks_data['incub'][0]}s\nLast {int(time.time() - checks_data['incub'][1])}s\nUsers: {checks_data['incub'][2]}\n\n"
    text += f"Notifications check: {'s, '.join(str(i) for i in checks_data['notif'][0])}\nLast { ttx(time.time(), checks_data['notif'][1]) }\n\n"

    for cls in ['main', 'main_hunt', 'main_game', 'main_sleep', 'main_pass', 'main_journey']:
        text += f"{cls} check: {'s, '.join(str(i) for i in checks_data[cls][0])}\nLast { ttx(time.time(), checks_data[cls][1]) }\nUsers: {str(checks_data[cls][2])}\n\n"


    text += f'Thr.count: {threading.active_count()}'
    bot.send_message(user.id, text)


@bot.message_handler(commands=['dinos'])
def command(message):
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    text = ''
    for i in bd_user['dinos']:
        if 'journey_log' in bd_user["dinos"][i].keys():
            bd_user["dinos"][i]['journey_log'] = f"{len(bd_user['dinos'][i]['journey_log'])} - —Å–æ–±—ã—Ç–∏–π"

        text = f'{bd_user["dinos"][i]}\n\n'
    bot.send_message(user.id, text)

@bot.message_handler(commands=['add_item'])
def command(message):
    user = message.from_user
    if user.id in [5279769615, 1191252229]:
        msg_args = message.text.split()
        bd = users.find_one({"userid": int(msg_args[3])})

        tr = functions.add_item_to_user(bd, msg_args[1], int(msg_args[2]))
        bot.send_message(user.id, str(msg_args))

@bot.message_handler(commands=['dns'])
def command(message):
    user = message.from_user

    for i in users.find({}):

        for ii in i['activ_items'].keys():
            d = i['activ_items'][ii].keys()
            if '1' in d:
                print(i['userid'], 'l-34')
            if '2' in d:
                print(i['userid'], 'l-3934')

    print('all')


# @bot.message_handler(commands=['des_qr'])
# def command(message):
#     user = message.from_user
#     text = functions.des_qr('i23.u12')
#     bot.send_message(user.id, str(text))

@bot.message_handler(commands=['emulate_not'])
def command(message):
    print('emulate_not')
    msg_args = message.text.split()
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    functions.notifications_manager(bot, msg_args[1], bd_user, msg_args[2], dino_id = '1')

@bot.message_handler(commands=['profile', '–ø—Ä–æ—Ñ–∏–ª—å'])
def command(message):
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    if bd_user != None:

        text = functions.member_profile(bot, user.id, bd_user['language_code'])

        bot.reply_to(message, text, parse_mode = 'Markdown')

    else:

        if user.language_code == 'ru':
            text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.'
        else:
            text = 'You do not have a registered account in the bot, please go to the bot and register to get access to this command.'

        bot.reply_to(message, text, parse_mode = 'Markdown')

@bot.message_handler(commands=['add_me', '–¥–æ–±–∞–≤—å_–º–µ–Ω—è'])
def command(message):
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    if message.chat.type != 'private':
        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = f"‚ù§ | –í—Å–µ –∂–µ–ª–∞—é—â–∏–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è <a href='tg://user?id={user.id}'>üåÄ {user.first_name}</a>, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
            else:
                text = f"‚ù§ | Everyone can send a request to friends <a href='tg://user?id={user.id}'>üåÄ{user.first_name}</a> by clicking on the button below!"

            bot.reply_to(message, text, parse_mode = 'HTML', reply_markup = functions.inline_markup(bot, 'send_request', user.id, ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'Send a request']) )

        else:

            if user.language_code == 'ru':
                text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.'
            else:
                text = 'You do not have a registered account in the bot, please go to the bot and register to get access to this command.'

            bot.reply_to(message, text, parse_mode = 'Markdown')

@bot.message_handler(commands=['start', 'main-menu'])
def on_start(message):
    user = message.from_user
    if message.chat.type == 'private':
        if users.find_one({"userid": user.id}) == None:
            if user.language_code == 'ru':
                text = f"üéã | –•–µ–π <b>{user.first_name}</b>, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è!\n"+ f"<b>‚Ä¢</b> –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –ø–æ —Ç–∏–ø—É —Ç–∞–º–∞–≥–æ—á–∏, —Ç–æ–ª—å–∫–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏!ü¶ñ\n\n"+f"<b>üïπ | –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–º–∞–≥–æ—á–∏?</b>\n"+f'<b>‚Ä¢</b> –¢–∞–º–∞–≥–æ—á–∏ - –∏–≥—Ä–∞ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∫–æ—Ä–º–∏—Ç—å, —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º, –∏–≥—Ä–∞—Ç—å –∏ —Ç–¥.ü•ö\n'+f"<b>‚Ä¢</b> –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ –ª—É—á—à–∏–º!\n\n"+f"<b>üéÆ | –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å?</b>\n"+f'<b>‚Ä¢</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–º–∫—É <b>üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</b>!\n\n'+f'<b>‚ù§ | –ñ–¥—ë–º –≤ –∏–≥—Ä–µ!</b>\n'
            else:
                text = f"üéã | Hey <b>{user.first_name}</b>, I am glad to welcome you!\n" +f"<b>‚Ä¢</b> I'm a small tamagotchi-type game bot, only with dinosaurs!ü¶ñ\n\n"+f"<b>üïπ | What is tamagotchi?</b>\n"+ f'<b>‚Ä¢</b> Tamagotchi is a game with a virtual pet that needs to be fed, cared for, played, and so on.ü•ö\n'+ f"<b>‚Ä¢</b> Compete in the ranking and become the best!\n\n"+ f"<b>üéÆ | How to start playing?</b>\n" + f'<b>‚Ä¢</b> Press the button <b>üç°Start playing</b>!\n\n' + f'<b>‚ù§ | Waiting in the game!</b>\n' +f'<b>‚ùó | In some places, the bot may not be translated!</b>\n'

            bot.reply_to(message, text, reply_markup = functions.markup(bot, user = user), parse_mode = 'html')
        else:
            bot.reply_to(message, 'üëã', reply_markup = functions.markup(bot, user = user), parse_mode = 'html')


@bot.message_handler(content_types = ['text'])
def on_message(message):
    user = message.from_user

    if users.find_one({"userid": user.id}) != None:
        bd_user = users.find_one({"userid": user.id})

        # –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        users.update_one( {"userid": bd_user['userid']}, {"$set": {'last_m': int(time.time()) }} )

    if message.chat.type == 'private':

        if users.find_one({"userid": user.id}) != None and bot.get_chat_member(-1001673242031, user.id).status == 'left':
            bd_user = users.find_one({"userid": user.id})
            r = bot.get_chat_member(-1001673242031, user.id)

            if bd_user['language_code'] == 'ru':
                text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüî¥ | –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"* –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Å–ª–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"*, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!'
                b1 = "ü¶ñ | –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                b2 = "üîÑ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
            else:
                text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüî¥ | Click on the *'Subscribe'* button to go to the channel, and then on the *'Check'*, to continue working!"
                b1 = "ü¶ñ | Subscribe"
                b2 = "üîÑ | Check"

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add( types.InlineKeyboardButton(text= b1, url="https://t.me/DinoGochi"))
            markup_inline.add( types.InlineKeyboardButton(text= b2, callback_data = 'checking_the_user_in_the_channel') )

            bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")


        else:

            if message.text in ['üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å', 'üç° Start playing']:

                commands.start_game(bot, message, user)

            if message.text in ["üß© –ü—Ä–æ–µ–∫—Ç: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ", 'üß© Project: Rebirth']:

                commands.project_reb(bot, message, user)

            if message.text in ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'ü¶ñ Dinosaur']:

                commands.dino_prof(bot, message, user)

            if message.text in ['üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîß Settings']:
                bd_user = users.find_one({"userid": user.id})

                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
                    else:
                        text = 'üîß The settings menu is activated'


                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'settings', user))

            if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = '‚Ü™ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                    else:
                        text = '‚Ü™ Return to the main menu'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 1, user))

            if message.text in ['üë• –î—Ä—É–∑—å—è', 'üë• Friends']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = 'üë• | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!'
                    else:
                        text = 'üë• | Redirecting to the friends menu!'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "friends-menu", user))

            if message.text in ['‚ùó FAQ']:

                commands.faq(bot, message, user)

            if message.text in ['‚ùó Notifications', '‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']:

                commands.not_set(bot, message, user)

            if message.text in ["üëÖ –Ø–∑—ã–∫", "üëÖ Language"]:

                commands.lang_set(bot, message, user)

            if message.text in ['‚Åâ –í–∏–¥–∏–º–æ—Å—Ç—å FAQ', '‚Åâ Visibility FAQ']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']
                        text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ FAQ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å >'
                    else:
                        ans = ['‚úÖ Enable', '‚ùå Disable', '‚Ü™ Back']
                        text = '‚ùó Interaction with the FAQ visibility setting, select visibility >'

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0], ans[1])
                    rmk.add(ans[2])

                    def ret(message, ans, bd_user):

                        if message.text not in ans or message.text == ans[2]:
                            res = None
                        else:
                            res = message.text

                        if res == None:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'settings', user))
                            return

                        if res in ['‚úÖ Enable', '‚úÖ –í–∫–ª—é—á–∏—Ç—å']:

                            bd_user['settings']['vis.faq'] = True
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = 'üîß FAQ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!'
                            else:
                                text = 'üîß The FAQ has been activated!'

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "settings", user))

                        if res in ['‚ùå Disable', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å']:

                            bd_user['settings']['vis.faq'] = False
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = 'üîß FAQ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω!'
                            else:
                                text = 'üîß The FAQ has been disabled!'

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "settings", user))

                        else:
                            return

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, ans, bd_user)

            if message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûï Add"]:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                        text = '‚û° | –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ (–≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å > –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ), —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ –µ–≥–æ id (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ —É –±–æ—Ç–∞).\n–í–∞–∂–Ω–æ! –í–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ!'
                    else:
                        ans = ['‚Ü™ Back']
                        text = '‚û° | Forward me any message from the person (in the privacy section > message forwarding - there must be permission) with whom you want to become friends or send me his id (you can find out in your bot profile).\nImportant! Your friend must be registered in the bot!'

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0])

                    def ret(message, ans, bd_user):
                        res = message

                        if message.text in ans:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'friends-menu', user))
                            return

                        try:
                            fr_id = int(res.text)
                        except:

                            if res.text == ans[0] or res.forward_from == None:
                                bot.send_message(message.chat.id, f'‚ùå user forward not found', reply_markup = functions.markup(bot, 'friends-menu', user))
                                fr_id = None

                            else:
                                fr_id = res.forward_from.id


                        two_user = users.find_one({"userid": fr_id})

                        if two_user == None:
                            bot.send_message(message.chat.id, f'‚ùå user not found in base', reply_markup = functions.markup(bot, 'friends-menu', user))
                            return

                        if two_user == bd_user:
                            bot.send_message(message.chat.id, f'‚ùå user == friend', reply_markup = functions.markup(bot, 'friends-menu', user))

                        else:

                            if 'friends_list' not in bd_user['friends']:
                                bd_user['friends']['friends_list'] = []
                                bd_user['friends']['requests'] = []
                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                            if 'friends_list' not in two_user['friends']:
                                two_user['friends']['friends_list'] = []
                                two_user['friends']['requests'] = []
                                users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                            if bd_user['userid'] not in two_user['friends']['requests'] and bd_user['userid'] not in two_user['friends']['friends_list'] and two_user['userid'] not in bd_user['friends']['requests']:

                                two_user['friends']['requests'].append(bd_user['userid'])
                                users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                                bot.send_message(message.chat.id, f'‚úî', reply_markup = functions.markup(bot, 'friends-menu', user))
                                functions.notifications_manager(bot, 'friend_request', two_user)

                            else:

                                if bd_user['language_code'] == 'ru':
                                    text = f"üìú | –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö / –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –æ—Ç –≤–∞—Å!"

                                else:
                                    text = f"üìú | This user is already a friend / has received a request from you!"

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, ans, bd_user)

            if message.text in ["üìú –°–ø–∏—Å–æ–∫", "üìú List"]:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    friends_id = bd_user['friends']['friends_list']
                    page = 1

                    friends_name = []
                    friends_id_d = {}

                    for i in friends_id:
                        try:
                            if users.find_one({"userid": int(i)}) != None:
                                fr_name = bot.get_chat(int(i)).first_name
                                friends_name.append(fr_name)
                                friends_id_d[fr_name] = i
                        except:
                            pass

                    friends_chunks = list(functions.chunks(list(functions.chunks(friends_name, 2)), 3))

                    def work_pr(message, friends_id, page, friends_chunks, friends_id_d, mms = None):
                        global pages

                        if bd_user['language_code'] == 'ru':
                            text = "üìú | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                        else:
                            text = "üìú | Update..."

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                        if friends_chunks == []:

                            if bd_user['language_code'] == 'ru':
                                text = "üë• | –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                            else:
                                text = "üë• | The list is empty!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))

                        else:

                            for el in friends_chunks[page-1]:
                                if len(el) == 2:
                                    rmk.add(el[0], el[1])
                                else:
                                    rmk.add(el[0], ' ')

                            if 3 - len(friends_chunks[page-1]) != 0:
                                for i in list(range(3 - len(friends_chunks[page-1]))):
                                    rmk.add(' ', ' ')

                            if len(friends_chunks) > 1:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                                else:
                                    com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                                rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])
                            else:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                                else:
                                    com_buttons = '‚Ü™ Back'

                                rmk.add(com_buttons)

                            def ret(message, bd_user, page, friends_chunks, friends_id, friends_id_d):
                                if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                    res = None
                                else:
                                    res = message.text

                                if res == None:
                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                                    else:
                                        text = "üë• | Return to the friends menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))

                                else:
                                    mms = None
                                    if res == '‚óÄ':
                                        if page - 1 == 0:
                                            page = 1
                                        else:
                                            page -= 1

                                    if res == '‚ñ∂':
                                        if page + 1 > len(friends_chunks):
                                            page = len(friends_chunks)
                                        else:
                                            page += 1

                                    else:
                                        if res in list(friends_id_d.keys()):
                                            fr_id = friends_id_d[res]
                                            text = functions.member_profile(bot, fr_id, bd_user['language_code'])

                                            mms = bot.send_message(message.chat.id, text, parse_mode = 'Markdown')

                                    work_pr(message, friends_id, page, friends_chunks, friends_id_d, mms = mms)

                            if mms == None:
                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            else:
                                msg = mms
                            bot.register_next_step_handler(msg, ret, bd_user, page, friends_chunks, friends_id, friends_id_d)

                    work_pr(message, friends_id, page, friends_chunks, friends_id_d)

            if message.text in ["üíå –ó–∞–ø—Ä–æ—Å—ã", "üíå Inquiries"]:

                functions.user_requests(bot, user, message)

            if message.text in ['‚ûñ –£–¥–∞–ª–∏—Ç—å', '‚ûñ Delete']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    friends_id = bd_user['friends']['friends_list']
                    page = 1
                    friends_name = []
                    id_names = {}

                    for i in friends_id:
                        try:
                            fr_name = bot.get_chat(int(i)).first_name
                            friends_name.append(fr_name)
                            id_names[bot.get_chat(int(i)).first_name] = i
                        except:
                            pass

                    friends_chunks = list(functions.chunks(list(functions.chunks(friends_name, 2)), 3))

                    if friends_chunks == []:

                        if bd_user['language_code'] == 'ru':
                            text = "üë• | –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                        else:
                            text = "üë• | The list is empty!"

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))
                        return

                    else:
                        if bd_user['language_code'] == 'ru':
                            text = "‚ûñ | –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π > "
                        else:
                            text = "‚ûñ | Select the user to remove from friends >"
                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))

                    def work_pr(message, friends_id, page):

                        if bd_user['language_code'] == 'ru':
                            text = "üíå | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                        else:
                            text = "üíå | Update..."

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                        for el in friends_chunks[page-1]:
                            if len(el) == 2:
                                rmk.add(el[0], el[1])
                            else:
                                rmk.add(el[0], ' ')

                        if 3 - len(friends_chunks[page-1]) != 0:
                            for i in list(range(3 - len(friends_chunks[page-1]))):
                                rmk.add(' ', ' ')

                        if len(friends_chunks) > 1:
                            if bd_user['language_code'] == 'ru':
                                com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                            else:
                                com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                            rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])
                        else:
                            if bd_user['language_code'] == 'ru':
                                com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                            else:
                                com_buttons = '‚Ü™ Back'

                            rmk.add(com_buttons)

                        def ret(message, friends_id, page, bd_user):
                            if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                res = None
                            else:
                                res = message.text

                            if res == None:
                                if bd_user['language_code'] == 'ru':
                                    text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                                else:
                                    text = "üë• | Return to the friends menu!"

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))
                                return None
                            else:
                                if res == '‚óÄ':
                                    if page - 1 == 0:
                                        page = 1
                                    else:
                                        page -= 1

                                elif res == '‚ñ∂':
                                    if page + 1 > len(friends_chunks):
                                        page = len(friends_chunks)
                                    else:
                                        page += 1

                                else:
                                    uid = id_names[res]

                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π!"
                                    else:
                                        text = "üë• | The user has been removed from friends!"

                                    try:
                                        bd_user['friends']['friends_list'].remove(uid)
                                        users.update_one( {"userid": bd_user['userid']}, {"$pull": {'friends.friends_list': uid }} )

                                    except:
                                        pass

                                    try:
                                        users.update_one( {"userid": uid}, {"$pull": {'friends.friends_list': bd_user['userid'] }} )
                                    except:
                                        pass

                                    if bd_user['friends']['friends_list'] == []:
                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'friends-menu', user))
                                        return
                                    else:
                                        bot.send_message(message.chat.id, text)

                            work_pr(message, friends_id, page)

                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                        bot.register_next_step_handler(msg, ret, friends_id, page, bd_user)

                    work_pr(message, friends_id, page)

            if message.text in ['üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å', 'üëÅ‚Äçüó® Profile']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = 'üëÅ‚Äçüó® | –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–∫—Ä—ã—Ç–∞!'
                    else:
                        text = 'üëÅ‚Äçüó® | The profile panel is open!'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "profile", user))


            if message.text in ['üé¢ –†–µ–π—Ç–∏–Ω–≥', 'üé¢ Rating']:
                if bd_user != None:

                    mr_l = functions.rayt_update('check')[0]#list(sorted(list(users.find({})), key=lambda x: x['coins'], reverse=True))
                    lv_l = functions.rayt_update('check')[1]#list(sorted(list(users.find({})), key=lambda x: (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], reverse=True))

                    du_mc, du_lv = [{}, {}, {}, {}, {}], [{}, {}, {}, {}, {}]


                    i = -1
                    us_i_l = []
                    while du_mc[0] == {} or du_mc[1] == {} or du_mc[2] == {} or du_mc[3] == {} or du_mc[4] == {}:
                        i += 1
                        if i >= len(mr_l):
                            break

                        if du_mc[0] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[0] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                        if du_mc[1] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[1] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                        if du_mc[2] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[2] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                        if du_mc[3] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[3] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                        if du_mc[4] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[4] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                    i = -1
                    us_i_m = []
                    while du_lv[0] == {} or du_lv[1] == {} or du_lv[2] == {} or du_lv[3] == {} or du_lv[4] == {}:
                        i += 1
                        if i >= len(lv_l):
                            break

                        if du_lv[0] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[0] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                        if du_lv[1] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[1] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                        if du_lv[2] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[2] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                        if du_lv[3] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[3] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                        if du_lv[4] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[4] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                    lv_ar_id = []
                    for i in lv_l:
                        lv_ar_id.append(i['userid'])

                    mr_ar_id = []
                    for i in mr_l:
                        mr_ar_id.append(i['userid'])


                    if bd_user['language_code'] == 'ru':
                        if bd_user['userid'] in lv_ar_id:
                            ind = lv_ar_id.index(bd_user['userid'])+1
                        else:
                            ind = '-'

                        text =  f'*‚îå* üé¢ –†–µ–π—Ç–∏–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é:\n'
                        text += f"*‚îú* –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #{ind}\n\n"

                        n = 0
                        for i in du_lv:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 5:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* –£—Ä. {i['lvl']} (–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞ {i['exp']})\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* –£—Ä. {i['lvl']} (–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞ {i['exp']})\n"

                        if bd_user['userid'] in mr_ar_id:
                            ind = mr_ar_id.index(bd_user['userid'])+1
                        else:
                            ind = '-'

                        text += f'\n\n*‚îå* üé¢ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –º–æ–Ω–µ—Ç–∞–º:\n'
                        text += f"*‚îú* –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #{ind}\n\n"

                        n = 0
                        for i in du_mc:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 5:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* –ú–æ–Ω–µ—Ç—ã {i['coins']}\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* –ú–æ–Ω–µ—Ç—ã {i['coins']}\n"
                    else:
                        if bd_user['userid'] in lv_ar_id:
                            ind = lv_ar_id.index(bd_user['userid'])+1
                        else:
                            ind = '-'

                        text =  f'*‚îå* üé¢ Rating by level:\n'
                        text += f"*‚îú* Your place in the ranking: #{ind}\n\n"

                        n = 0
                        for i in du_lv:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 5:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* lvl {i['lvl']} (Total experience {i['exp']})\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* lvl {i['lvl']} (Total experience {i['exp']})\n"

                        if bd_user['userid'] in mr_ar_id:
                            ind = mr_ar_id.index(bd_user['userid'])+1
                        else:
                            ind = '-'

                        text += f'\n\n*‚îå* üé¢ Coin Rating:\n'
                        text += f"*‚îú* Your place in the ranking: #{ind}\n\n"

                        n = 0
                        for i in du_mc:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 5:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* Coins {i['coins']}\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* Coins {i['coins']}\n"

                    bot.send_message(message.chat.id, text, parse_mode = "Markdown")

            if message.text in ['üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'üéÆ Inventory']:

                functions.user_inventory(bot, user, message)

            if message.text in ['üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üìú Information']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:
                    text = functions.member_profile(bot, user.id, lang = bd_user['language_code'])
                    bot.send_message(message.chat.id, text, parse_mode = 'Markdown')

            if message.text in ['üïπ –î–µ–π—Å—Ç–≤–∏—è', 'üïπ Actions']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = 'üïπ –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∞!'
                    else:
                        text = 'üïπ The action panel is open!'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "actions", user))

            if message.text[:11] in ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä:'] or message.text[:7] in [ 'ü¶ñ Dino:']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:
                    if bd_user['language_code'] == 'ru':
                        did = int(message.text[12:])
                    else:
                        did = int(message.text[8:])

                    if did == int(bd_user['settings']['dino_id']):
                        ll = list(bd_user['dinos'].keys())
                        ind = list(bd_user['dinos'].keys()).index(str(did))

                        if ind + 1 == len(ll):
                            bd_user['settings']['dino_id'] = ll[0]
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                        else:
                            bd_user['settings']['dino_id'] = list(bd_user['dinos'].keys())[int(ll[did-1])]
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                        if bd_user['language_code'] == 'ru':
                            if bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['status'] == 'incubation':
                                text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ ü•ö"
                            else:
                                text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ {bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['name']}"
                        else:
                            if bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['status'] == 'incubation':
                                text = f"You have chosen ü•ö"
                            else:
                                text = f"You have chosen a dinosaur {bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['name']}"

                        bot.send_message(message.chat.id, text , reply_markup = functions.markup(bot, 'actions', user))

            bd_user = users.find_one({"userid": user.id})
            tr_c = False
            if bd_user != None and len(list(bd_user['dinos'])) > 0:
                if ( len(list(bd_user['dinos'])) == 1 and bd_user['lvl'][0] > 1) :
                    tr_c = True

                else:
                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['status'] == 'dino':
                        tr_c = True

            if tr_c == True:

                if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                    bd_user = users.find_one({"userid": user.id})

                    if bd_user['language_code'] == 'ru':
                        text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                    else:
                        text = '‚Ü© Return to the activity menu'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                if message.text in ['üí¨ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', 'üí¨ Rename']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        n_dp, dp_a = functions.dino_pre_answer(bot, message)

                        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['status'] == 'dino':

                            def rename(message, bd_user, user, dino_user_id, dino):
                                if bd_user['language_code'] == 'ru':
                                    text = f"ü¶ñ | –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è {dino['name']}\n–†–∞–∑–º–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤\n>"
                                    ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                                else:
                                    text = f"ü¶ñ | Enter a new name for {dino['name']}\nSize: no more than 20 characters\n>"
                                    ans = ['‚Ü™ Back']

                                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                rmk.add(ans[0])

                                def ret(message, ans, bd_user):
                                    if message.text == ans[0]:
                                        bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'settings', user))
                                        return

                                    dino_name = message.text

                                    if len(dino_name) > 20:

                                        if bd_user['language_code'] == 'ru':
                                            text = f"ü¶ñ | –ù–æ–≤–æ–µ –∏–º—è –±–æ–ª—å—à–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!"
                                        else:
                                            text = f"ü¶ñ | The new name is more than 20 characters!"

                                        msg = bot.send_message(message.chat.id, text)

                                    else:
                                        if bd_user['language_code'] == 'ru':
                                            text = f"ü¶ñ | –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å {dino['name']} > {dino_name}?"
                                            ans2 = ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '‚Ü™ –ù–∞–∑–∞–¥']
                                        else:
                                            text = f"ü¶ñ | Rename {dino['name']} > {dino_name}?"
                                            ans2 = ['‚úÖ Confirm', '‚Ü™ Back']

                                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                        rmk.add(ans2[0])
                                        rmk.add(ans2[1])

                                        def ret2(message, ans2, bd_user):
                                            if message.text == ans2[1]:
                                                bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'settings', user))
                                                return
                                            else:
                                                res = message.text

                                            if res in ['‚úÖ Confirm', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é']:

                                                bd_user['dinos'][str(dino_user_id)]['name'] = dino_name
                                                users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{dino_user_id}': bd_user['dinos'][str(dino_user_id)] }} )

                                                bot.send_message(message.chat.id, f'‚úÖ', reply_markup = functions.markup(bot, 'settings', user))

                                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                        bot.register_next_step_handler(msg, ret2, ans2, bd_user)

                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                bot.register_next_step_handler(msg, ret, ans, bd_user)

                            if n_dp == 1:
                                bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'settings', user))
                                return

                            if n_dp == 2:
                                bd_dino = dp_a
                                rename(message, bd_user, user, list(bd_user['dinos'].keys())[0], dp_a)

                            if n_dp == 3:
                                rmk = dp_a[0]
                                text = dp_a[1]
                                dino_dict = dp_a[2]

                                def ret(message, dino_dict, user, bd_user):
                                    rename(message, bd_user, user, dino_dict[message.text][1], dino_dict[message.text][0])

                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)

                if message.text in ['üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å', 'üåô Put to bed']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino != None:
                            if dino['activ_status'] == 'pass_active':
                                if dino['stats']['unv'] >= 90:

                                    if bd_user['language_code'] == 'ru':
                                        text = 'üåô –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å!'
                                    else:
                                        text = "üåô The dinosaur doesn't want to sleep!"

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "actions", user))

                                else:
                                    def dl_sleep(bd_user, message):
                                        d_id = bd_user['settings']['dino_id']
                                        bd_user['dinos'][ d_id ]['activ_status'] = 'sleep'
                                        bd_user['dinos'][ d_id ]['sleep_start'] = int(time.time())
                                        bd_user['dinos'][ d_id ]['sleep_type'] = 'long'
                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

                                        if bd_user['language_code'] == 'ru':
                                            text = 'üåô –í—ã —É–ª–æ–∂–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Å–ø–∞—Ç—å!'
                                        else:
                                            text = "üåô You put the dinosaur to sleep!"

                                        bot.send_message(message.chat.id, text , reply_markup = functions.markup(bot, 'actions', user))

                                    if functions.acc_check(bot, bd_user, '16', bd_user['settings']['dino_id'], True) == False:
                                        dl_sleep(bd_user, message)

                                    else:

                                        if bd_user['language_code'] == 'ru':
                                            ans = ['üõå –î–ª–∏–Ω–Ω—ã–π —Å–æ–Ω', 'üõå –ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω', '‚Ü™ –ù–∞–∑–∞–¥']
                                            text = 'üåô | –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–Ω–∞ –¥–ª—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ >'
                                        else:
                                            ans = ['üõå Long Sleep', 'üõå Short Sleep', '‚Ü™ Back']
                                            text = 'üåô | Choose the type of sleep for the dinosaur >'

                                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                        rmk.add(ans[0], ans[1])
                                        rmk.add(ans[2])

                                        def ret(message, ans, bd_user):

                                            if message.text not in ans or message.text == ans[2]:
                                                res = None
                                            else:
                                                res = message.text

                                            if res == None:
                                                bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'actions', user))
                                                return

                                            if res in ['üõå –î–ª–∏–Ω–Ω—ã–π —Å–æ–Ω', 'üõå Long Sleep']:

                                                dl_sleep(bd_user, message)

                                            if res in ['üõå –ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω', 'üõå Short Sleep']:

                                                def ret2(message, ans, bd_user):

                                                    if message.text == ans[0]:
                                                        number = None
                                                    else:

                                                        try:
                                                            number = int(message.text)
                                                        except:
                                                            number = None


                                                    if number == None:
                                                        bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'actions', user))
                                                        return

                                                    if number <= 5 or number > 480:

                                                        if bd_user['language_code'] == 'ru':
                                                            text = '‚ùå | –¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –±–æ–ª—å—à–µ 5-—Ç–∏ –º–∏–Ω—É—Ç –∏ –º–µ–Ω—å—à–µ 8-–º–∏ —á–∞—Å–æ–≤ (480)!'
                                                        else:
                                                            text = '‚ùå | It was required to specify the time in minutes more than 5 minutes and less than 8 hours (480)!'

                                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                                                    else:
                                                        d_id = bd_user['settings']['dino_id']
                                                        bd_user['dinos'][ d_id ]['activ_status'] = 'sleep'
                                                        bd_user['dinos'][ d_id ]['sleep_time'] = int(time.time()) + number * 60
                                                        bd_user['dinos'][ d_id ]['sleep_type'] = 'short'
                                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

                                                        if bd_user['language_code'] == 'ru':
                                                            text = 'üåô –í—ã —É–ª–æ–∂–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Å–ø–∞—Ç—å!'
                                                        else:
                                                            text = "üåô You put the dinosaur to sleep!"

                                                        bot.send_message(message.chat.id, text , reply_markup = functions.markup(bot, 'actions', user))



                                                if bd_user['language_code'] == 'ru':
                                                    ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                                                    text = 'üåô | –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–Ω–∞ (—Å–æ–Ω –∏–¥—ë—Ç –≤ 2 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ –¥–ª–∏–Ω–Ω–æ–≥–æ) –≤ –º–∏–Ω—É—Ç–∞—Ö > '
                                                else:
                                                    ans = ['‚Ü™ Back']
                                                    text = 'üåô | Specify the REM sleep time (sleep is 2 times faster than long sleep) in minutes >'

                                                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                                rmk.add(ans[0])

                                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                                bot.register_next_step_handler(msg, ret2, ans, bd_user)


                                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                        bot.register_next_step_handler(msg, ret, ans, bd_user)



                        else:

                            if bd_user['language_code'] == 'ru':
                                text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

                            else:
                                text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))


                if message.text in ['üåô –ü—Ä–æ–±—É–¥–∏—Ç—å', 'üåô Awaken']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        d_id = str(bd_user['settings']['dino_id'])
                        dino = bd_user['dinos'][ str(d_id) ]

                        if dino['activ_status'] == 'sleep' and dino != None:
                            r_n = random.randint(0, 20)
                            bd_user['dinos'][ d_id ]['activ_status'] = 'pass_active'

                            if 'sleep_type' in bd_user['dinos'][ d_id ] and bd_user['dinos'][ d_id ]['sleep_type'] == 'short':

                                del bd_user['dinos'][ d_id ]['sleep_time']

                                if bd_user['language_code'] == 'ru':
                                    text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è.'
                                else:
                                    text = f"üåô Your dinosaur has awakened."

                                bot.send_message(message.chat.id, text , reply_markup = functions.markup(bot, 'actions', user))

                                try:
                                    del bd_user['dinos'][ d_id ]['sleep_type']
                                except:
                                    pass

                                try:
                                    del bd_user['dinos'][ d_id ]['sleep_start']
                                except:
                                    pass

                                users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

                            elif 'sleep_type' not in bd_user['dinos'][ d_id ] or bd_user['dinos'][ d_id ]['sleep_type'] == 'long':

                                if 'sleep_start' in bd_user['dinos'][ d_id ].keys() and int(time.time()) - bd_user['dinos'][ d_id ]['sleep_start'] >= 8 * 3600:

                                    if bd_user['language_code'] == 'ru':
                                        text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è.'
                                    else:
                                        text = f"üåô Your dinosaur has awakened."

                                    bot.send_message(message.chat.id, text , reply_markup = functions.markup(bot, 'actions', user))

                                else:

                                    bd_user['dinos'][ d_id ]['stats']['mood'] -= r_n

                                    if bd_user['dinos'][ d_id ]['stats']['mood'] < 0:
                                        bd_user['dinos'][ d_id ]['stats']['mood'] = 0

                                    if bd_user['language_code'] == 'ru':
                                        text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è. –û–Ω —Å–∏–ª—å–Ω–æ –Ω–µ –¥–æ–≤–æ–ª–µ–Ω —á—Ç–æ –≤—ã –µ–≥–æ —Ä–∞–∑–±—É–¥–∏–ª–∏!\n–î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ—Ç–µ—Ä—è–ª {r_n}% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.'
                                    else:
                                        text = f"üåô Your dinosaur has awakened. He is very unhappy that you woke him up!\nDinosaur lost {r_n}% of mood."

                                    bot.send_message(message.chat.id, text , reply_markup = functions.markup(bot, 'actions', user))

                                try:
                                    del bd_user['dinos'][ d_id ]['sleep_type']
                                except:
                                    pass

                                try:
                                    del bd_user['dinos'][ d_id ]['sleep_start']
                                except:
                                    pass

                                users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{d_id}': bd_user['dinos'][d_id] }} )

                        else:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'actions', user))
                            return

                if message.text in ['üéë –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üéë Journey']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino['activ_status'] == 'pass_active' and dino != None:
                            markup_inline = types.InlineKeyboardMarkup()

                            if bd_user['language_code'] == 'ru':
                                text = 'üå≥ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?'

                                item_0 = types.InlineKeyboardButton( text = '10 –º–∏–Ω.', callback_data = f"10min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_1 = types.InlineKeyboardButton( text = '30 –º–∏–Ω.', callback_data = f"30min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_2 = types.InlineKeyboardButton( text = '60 –º–∏–Ω.', callback_data = f"60min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_3 = types.InlineKeyboardButton( text = '90 –º–∏–Ω.', callback_data = f"90min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_4 = types.InlineKeyboardButton( text = '120 –º–∏–Ω.', callback_data = f"12min_journey_{str(bd_user['settings']['dino_id'])}")

                            else:
                                text = "üå≥ How long to send a dinosaur on a journey?"

                                item_0 = types.InlineKeyboardButton( text = '10 min.', callback_data = f"10min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_1 = types.InlineKeyboardButton( text = '30 min.', callback_data = f"30min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_2 = types.InlineKeyboardButton( text = '60 min.', callback_data = f"60min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_3 = types.InlineKeyboardButton( text = '90 min.', callback_data = f"90min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_4 = types.InlineKeyboardButton( text = '120 min.', callback_data = f"12min_journey_{str(bd_user['settings']['dino_id'])}")

                            markup_inline.add(item_0, item_1, item_2, item_3, item_4)

                            bot.send_message(message.chat.id, text, reply_markup = markup_inline)

                        else:

                            if bd_user['language_code'] == 'ru':
                                text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

                            else:
                                text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))


                if message.text in ['üéë –í–µ—Ä–Ω—É—Ç—å', 'üéë Call']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino['activ_status'] == 'journey' and dino != None:
                            if random.randint(1,2) == 1:

                                if bd_user['language_code'] == 'ru':
                                    text = f'ü¶ñ | –í—ã –≤–µ—Ä–Ω—É–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!\n–í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏:\n'

                                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['journey_log'] == []:
                                        text += '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ!'
                                    else:
                                        n = 1
                                        for el in bd_user['dinos'][ bd_user['settings']['dino_id'] ]['journey_log']:
                                            text += f'<b>{n}.</b> {el}\n\n'
                                            n += 1
                                else:
                                    text = f"ü¶ñ | Turned the dinosaur out of the journey!\nHere's what happened on his journey:\n"

                                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['journey_log'] == []:
                                        text += 'Nothing happened!'
                                    else:
                                        n = 1
                                        for el in bd_user['dinos'][ bd_user['settings']['dino_id'] ]['journey_log']:
                                            text += f'<b>{n}.</b> {el}\n\n'
                                            n += 1


                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] = 'pass_active'
                                del bd_user['dinos'][ bd_user['settings']['dino_id'] ]['journey_time']
                                del bd_user['dinos'][ bd_user['settings']['dino_id'] ]['journey_log']

                                users.update_one( {"userid": bd_user['userid']}, {"$set": {f"dinos.{bd_user['settings']['dino_id']}": bd_user['dinos'][ bd_user['settings']['dino_id'] ] }} )

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user), parse_mode = 'html')


                            else:
                                if bd_user['language_code'] == 'ru':
                                    text = f'üîá | –í—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'
                                else:
                                    text = f"üîá | You tried to bring the dinosaur back, but something went wrong..."

                                bot.send_message(message.chat.id, text , reply_markup = functions.markup(bot, 'actions', user))
                        else:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'actions', user))
                            return

                if message.text in ['üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üéÆ Entertainments']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino['activ_status'] == 'pass_active':

                            if bd_user['language_code'] == 'ru':
                                text = f"üéÆ | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!"

                            else:
                                text = f"üéÆ | Redirecting to the entertainment menu!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'games', user))

                        else:

                            if bd_user['language_code'] == 'ru':
                                text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

                            else:
                                text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))


                if message.text in ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'ü™Å –ó–º–µ–π', 'üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèê –ú—è—á', 'üéÆ Console', 'ü™Å Snake', 'üèì Ping Pong', 'üèê Ball', 'üß© –ü–∞–∑–ª—ã', '‚ôü –®–∞—Ö–º–∞—Ç—ã', 'üß± –î–∂–µ–Ω–≥–∞', 'üé≤ D&D', 'üß© Puzzles', '‚ôü Chess', 'üß± Jenga']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]
                        if dino['activ_status'] == 'pass_active':

                            markup_inline = types.InlineKeyboardMarkup(row_width=2)

                            if bd_user['language_code'] == 'ru':
                                text = ['15 - 30 –º–∏–Ω.', '30 - 60 –º–∏–Ω.', '60 - 90 –º–∏–Ω.']
                                m_text = 'üéÆ –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã > '
                            else:
                                text = ['15 - 30 min.', '30 - 60 min.', '60 - 90 min.']
                                m_text = 'üéÆ Specify the allowed game time >'

                            if message.text in ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'üéÆ Console']:
                                g = 'con'
                            elif message.text in ['ü™Å –ó–º–µ–π', 'ü™Å Snake']:
                                g = 'sna'
                            elif message.text in ['üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèì Ping Pong']:
                                g = 'pin'
                            elif message.text in ['üèê –ú—è—á', 'üèê Ball']:
                                g = 'bal'

                            else:
                                if functions.acc_check(bot, bd_user, '44', str(bd_user['settings']['dino_id']), True):

                                    if message.text in ['üß© –ü–∞–∑–ª—ã', 'üß© Puzzles']:
                                        g = 'puz'
                                    elif message.text in ['‚ôü –®–∞—Ö–º–∞—Ç—ã', '‚ôü Chess']:
                                        g = 'che'
                                    elif message.text in ['üß± Jenga', 'üß± –î–∂–µ–Ω–≥–∞']:
                                        g = 'jen'
                                    elif message.text in ['üé≤ D&D']:
                                        g = 'ddd'

                                else:
                                    return

                            item_1 = types.InlineKeyboardButton( text = text[0], callback_data = f"1_{g}_game_{str(bd_user['settings']['dino_id'])}")
                            item_2 = types.InlineKeyboardButton( text = text[1], callback_data = f"2_{g}_game_{str(bd_user['settings']['dino_id'])}")
                            item_3 = types.InlineKeyboardButton( text = text[2], callback_data = f"3_{g}_game_{str(bd_user['settings']['dino_id'])}")
                            markup_inline.add(item_1, item_2, item_3)

                            bot.send_message(message.chat.id, m_text, reply_markup = markup_inline)

                if message.text in ['‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', '‚ùå Stop the game']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]
                        if dino['activ_status'] == 'game':

                            if dino['game_%'] == 1:
                                rt = random.randint(1,3)

                            if dino['game_%'] == 0.5:
                                rt = 1

                            if dino['game_%'] == 0.9:
                                rt = random.randint(1,2)

                            if rt == 1:

                                if dino['game_%'] == 1:
                                    bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['stats']['mood'] -= 20

                                    if bd_user['language_code'] == 'ru':
                                        text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å, –Ω–æ –≤—ã –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏, –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–æ –Ω–∞ 20%!"

                                    else:
                                        text = f"üéÆ | The dinosaur liked to play, but you stopped him, his mood is reduced by 20%!"

                                if dino['game_%'] == 0.5:

                                    if bd_user['language_code'] == 'ru':
                                        text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ –æ—Å–æ–±–æ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å, –æ–Ω –Ω–µ —Ç–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ..."

                                    else:
                                        text = f"üéÆ | The dinosaur didn't really like playing, he doesn't lose his mood..."

                                if dino['game_%'] == 0.9:
                                    bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['stats']['mood'] -= 5

                                    if bd_user['language_code'] == 'ru':
                                        text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω —á—Ç–æ –≤—ã –µ–≥–æ –æ—Ç–≤–ª–µ–∫–ª–∏, –æ–Ω —Ç–µ—Ä—è–µ—Ç 5% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è..."

                                    else:
                                        text = f"üéÆ | The dinosaur is a little upset that you distracted him, he loses 5% of his mood..."

                                bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['activ_status'] = 'pass_active'
                                del bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['game_time']
                                del bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['game_%']


                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )
                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'games', user))

                            else:

                                if bd_user['language_code'] == 'ru':
                                    text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ—Ä–≤–∞—Ç—å –æ—Ç –∏–≥—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, –¥–∏–Ω–æ–∑–∞–≤—Ä –±—É–¥–µ—Ç —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω."

                                else:
                                    text = f"üéÆ | It is impossible to tear the dinosaur away from the game, try again. Keep in mind, the dinosaur will be upset."

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'games', user))

                if message.text in ['üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å', 'üç£ Feed']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'sleep':

                            if bd_user['language_code'] == 'ru':
                                text = '–í–æ –≤—Ä–µ–º—è —Å–Ω–∞ –Ω–µ–ª—å–∑—è –∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞.'
                            else:
                                text = 'During sleep, you can not feed the dinosaur.'

                            bot.send_message(message.chat.id, text)
                            return

                        nitems = bd_user['inventory']

                        if nitems == []:

                            if bd_user['language_code'] == 'ru':
                                text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                            else:
                                text = 'Inventory is empty.'

                            bot.send_message(message.chat.id, text)
                            return

                        data_items = items_f['items']
                        items = []
                        items_id = {}
                        page = 1
                        items_names = []

                        for i in nitems:
                            if data_items[str(i['item_id'])]['type'] == "+eat":
                                items.append(i)

                        if items == []:

                            if bd_user['language_code'] == 'ru':
                                text = 'ü•û | –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.'
                            else:
                                text = 'ü•û | There are no food items in the inventory.'

                            bot.send_message(message.chat.id, text)
                            return


                        if bd_user['language_code'] == 'ru':
                            lg = "nameru"
                        else:
                            lg = "nameen"

                        for i in items:
                            items_id[ items_f['items'][str(i['item_id'])][lg] ] = i
                            items_names.append( items_f['items'][str(i['item_id'])][lg] )

                        items_names.sort()

                        items_sort = []
                        d_it_sort = {}
                        ind_sort_it = {}

                        for i in items_names:
                            if i in list(d_it_sort.keys()):
                                d_it_sort[i] += 1
                            else:
                                d_it_sort[i] = 1

                        for n in list(d_it_sort.keys()):
                            col = d_it_sort[n]
                            name = n

                            items_sort.append(f'{n} x{col}')
                            ind_sort_it[f'{n} x{col}'] = n

                        pages = list(functions.chunks(list(functions.chunks(items_sort, 2)), 3))

                        for i in pages:
                            for ii in i:
                                if len(ii) == 1:
                                    ii.append(' ')

                            if len(i) != 3:
                                for iii in range(3 - len(i)):
                                    i.append([' ', ' '])

                        def work_pr(message, pages, page, items_id, ind_sort_it):
                            global l_pages, l_page, l_ind_sort_it
                            a = []
                            l_pages = pages
                            l_page = page
                            l_ind_sort_it = ind_sort_it

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                            for i in pages[page-1]:
                                rmk.add(i[0], i[1])

                            if len(pages) > 1:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = ['‚óÄ', '‚Ü© –ù–∞–∑–∞–¥', '‚ñ∂']
                                    textt = 'üçï | –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
                                else:
                                    com_buttons = ['‚óÄ', '‚Ü© Back', '‚ñ∂']
                                    textt = 'üçï | Choose what you want to feed the dinosaur >'

                                rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                            else:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = '‚Ü© –ù–∞–∑–∞–¥'
                                    textt = 'üçï | –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
                                else:
                                    textt = 'üçï | Choose what you want to feed the dinosaur >'
                                    com_buttons = '‚Ü© Back'

                                rmk.add(com_buttons)

                            def ret(message, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it):
                                if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                                    res = None

                                else:
                                    if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂']:
                                        res = message.text
                                    else:
                                        res = None


                                if res == None:
                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
                                    else:
                                        text = "üë• | Return to the friends menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                                    return '12'
                                else:
                                    if res == '‚óÄ':
                                        if page - 1 == 0:
                                            page = 1
                                        else:
                                            page -= 1

                                        work_pr(message, pages, page, items_id, ind_sort_it)

                                    elif res == '‚ñ∂':
                                        if page + 1 > len(l_pages):
                                            page = len(l_pages)
                                        else:
                                            page += 1

                                        work_pr(message, pages, page, items_id, ind_sort_it)

                                    else:
                                        item_id = items_id[ l_ind_sort_it[res] ]['item_id']
                                        user_item = items_id[ l_ind_sort_it[res] ]
                                        item = items_f['items'][item_id]

                                        bd_dino = bd_user['dinos'][ bd_user['settings']['dino_id'] ]
                                        d_dino = json_f['elements'][ str(bd_dino['dino_id']) ]
                                        col = 1
                                        mx_col = 0
                                        for item_c in bd_user['inventory']:
                                            if item_c == user_item:
                                                mx_col += 1

                                        if bd_user['language_code'] == 'ru':
                                            text_col = f"üßÄ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ >"
                                        else:
                                            text_col = f"üßÄ | Enter the number of uses or select it from the list >"

                                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                                        col_to_full = int( (100 - bd_dino['stats']['eat']) / item['act'])
                                        bt_3 = None

                                        if col_to_full > mx_col:
                                            col_to_full = mx_col

                                        bt_1 = f"{bd_dino['stats']['eat'] + item['act']}% = {item['nameru'][:1]} x1"
                                        bt_2 = f"{bd_dino['stats']['eat'] + item['act'] * col_to_full}% = {item['nameru'][:1]} x{col_to_full}"

                                        col_l = [[], [1, col_to_full]]

                                        col_l[0].append(bt_1), col_l[0].append(bt_2)

                                        if bd_dino['stats']['eat'] + item['act'] * col_to_full < 100:

                                            bt_3 = f"{100}% = {item['nameru'][:1]} x{col_to_full+1}"

                                            col_l[0].append(bt_3)
                                            col_l[1].append(col_to_full+1)

                                        if col_to_full == 1:

                                            if bt_3 != None:
                                                rmk.add(bt_1, bt_3)

                                            else:
                                                rmk.add(bt_1)

                                        elif col_to_full != 1 and col_to_full != 0:

                                            if bt_3 != None:
                                                rmk.add(bt_1, bt_2, bt_3)

                                            else:
                                                rmk.add(bt_1, bt_2)

                                        if bd_user['language_code'] == 'ru':
                                            rmk.add('‚Ü© –ù–∞–∑–∞–¥')
                                        else:
                                            rmk.add('‚Ü© Back')


                                        def corm(message, bd_user, user_item, item, d_dino, mx_col, col_l):

                                            if message.text in ['‚Ü© Back', '‚Ü© –ù–∞–∑–∞–¥']:

                                                if bd_user['language_code'] == 'ru':
                                                    text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
                                                else:
                                                    text = "üë• | Return to the friends menu!"

                                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                                                return '12'

                                            try:
                                                col = int(message.text)
                                            except:
                                                if message.text in col_l[0]:
                                                    col = col_l[1][ col_l[0].index(message.text) ]

                                                else:

                                                    if bd_user['language_code'] == 'ru':
                                                        text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
                                                    else:
                                                        text = f"Enter the correct number!"

                                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                                                    return

                                            if 'abilities' in user_item.keys():
                                                if 'uses' in user_item['abilities'].keys():
                                                    if col > user_item['abilities']['uses']:

                                                        if bd_user['language_code'] == 'ru':
                                                            text = f"–î–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑!"
                                                        else:
                                                            text = f"This item cannot be used so many times!"

                                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                                                        return

                                            if col > mx_col:

                                                if bd_user['language_code'] == 'ru':
                                                    text = f"–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
                                                else:
                                                    text = f"You don't have that many items in your inventory!"

                                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                                                return


                                            if bd_user['language_code'] == 'ru':
                                                if item['class'] == 'ALL':

                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                                    text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {item['nameru']}!\n–î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç –Ω–∞ {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"


                                                elif item['class'] == d_dino['class']:
                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                                    text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {item['nameru']}!\n–î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç –Ω–∞ {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"


                                                else:
                                                    eatr = random.randint( 0, int(item['act'] / 2) )
                                                    moodr = random.randint( 1, 10 )
                                                    text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ –ø–æ –≤–∫—É—Å—É {item['nameru']}, –æ–Ω —Ç–µ—Ä—è–µ—Ç {eatr}% —Å—ã—Ç–æ—Å—Ç–∏ –∏ {moodr}% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!"

                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] -= eatr
                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= moodr

                                            else:
                                                if item['class'] == 'ALL':

                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                                    text = f"üçï | The dinosaur ate it with pleasure {item['nameen']}!\nThe dinosaur is fed up on {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"

                                                elif item['class'] == d_dino['class']:

                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act'] * col

                                                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] > 100:
                                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] = 100

                                                    text = f"üçï | The dinosaur ate it with pleasure {item['nameen']}!\nThe dinosaur is fed up on {bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat']}%"

                                                else:
                                                    eatr = random.randint( 0, int(item['act'] / 2) )
                                                    moodr = random.randint( 1, 10 )
                                                    text = f"üçï | The dinosaur doesn't like {item['nameen']}, it loses {eatr}% satiety and {mood}% mood!"

                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] -= eatr
                                                    bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= moodr

                                            if '+mood' in item.keys():
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] += item['+mood'] * col

                                            if '-mood' in item.keys():
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= item['-mood'] * col

                                            users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{bd_user["settings"]["dino_id"]}': bd_user['dinos'][ bd_user['settings']['dino_id'] ] }} )

                                            if ('abilities' in user_item.keys() and 'uses' not in user_item['abilities'].keys()) or 'abilities' not in user_item.keys():

                                                for i in range(col):
                                                    bd_user['inventory'].remove(user_item)

                                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                            else:
                                                bd_user['inventory'].remove(user_item)
                                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                                user_item['abilities']['uses'] -= 1 * col
                                                if user_item['abilities']['uses'] > 0:
                                                    users.update_one( {"userid": user.id}, {"$push": {f'inventory': user_item }} )

                                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                                        msg = bot.send_message(message.chat.id, text_col, reply_markup = rmk)
                                        bot.register_next_step_handler(msg, corm, bd_user, user_item, item, d_dino, mx_col, col_l)

                            msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it)

                        work_pr(message, pages, page, items_id, ind_sort_it)

                if message.text in ['üçï –°–±–æ—Ä –ø–∏—â–∏', 'üçï Collecting food']:
                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'pass_active':

                        if bd_user['language_code'] == 'ru':
                            bbt = ['üåø | –°–æ–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–æ', 'üçñ | –û—Ö–æ—Ç–∞', 'üç§ | –†—ã–±–∞–ª–∫–∞', 'ü•ó | –í—Å–µ –≤–º–µ—Å—Ç–µ', '‚Ü© –ù–∞–∑–∞–¥']
                            text = 'üå¥ | –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±—ã—á–∏ –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è >'
                        else:
                            bbt = ['üåø | Collecting', 'üçñ | Hunting', 'üç§ | Fishing', 'ü•ó | All together', '‚Ü© Back']
                            text = 'üå¥ | Choose a way to get food >'

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                        rmk.add(bbt[0], bbt[1])
                        rmk.add(bbt[2], bbt[3])
                        rmk.add(bbt[4])

                        def ret(message, ans, bd_user):

                            if message.text not in ans or message.text == ans[4]:
                                res = None
                            else:
                                res = message.text

                            if res == None:
                                if bd_user['language_code'] == 'ru':
                                    text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                                else:
                                    text = '‚Ü© Return to the activity menu'

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                            else:

                                if bd_user['language_code'] == 'ru':
                                    ans = ['‚Ü© –ù–∞–∑–∞–¥']
                                    text = 'üçΩ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä >'
                                else:
                                    ans = ['‚Ü© Back']
                                    text = 'üçΩ | Enter the number of products that the dinosaur must collect >'

                                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                rmk.add(ans[0])

                                def ret2(message, ans, bd_user):
                                    number = message.text
                                    try:
                                        number = int(number)
                                        if number <= 0 or number >= 101:
                                            if bd_user['language_code'] == 'ru':
                                                text = '0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!'
                                            else:
                                                text = '0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | Enter a number from 1 to 100!'

                                            bot.send_message(message.chat.id, text)
                                            number = None
                                    except:
                                        number = None

                                    if number == None:
                                        if bd_user['language_code'] == 'ru':
                                            text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                                        else:
                                            text = '‚Ü© Return to the activity menu'

                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                                    else:
                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] = 'hunting'
                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'] = [0, number]

                                        if res == bbt[0]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'collecting'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üåø | –°–±–æ—Ä —è–≥–æ–¥ –∏ —Ç—Ä–∞–≤ –Ω–∞—á–∞—Ç!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üåø | The gathering of berries and herbs has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        if res == bbt[1]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'hunting'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üçñ | –û—Ö–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üçñ | The hunt has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        if res == bbt[2]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'fishing'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üç£ | –†—ã–±–∞–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üç£ | Fishing has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        if res == bbt[3]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'all'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üç± | –û–±—â–∏–π —Å–±–æ—Ä –ø–∏—â–∏ –Ω–∞—á–∞—Ç!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üç± | The general food collection has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )
                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))

                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                bot.register_next_step_handler(msg, ret2, ans, bd_user)

                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                        bot.register_next_step_handler(msg, ret, bbt, bd_user)

                    else:

                        if bd_user['language_code'] == 'ru':
                            text = f"‚ùó | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä —É–∂–µ —á–µ–º —Ç–æ –∑–∞–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!"

                        else:
                            text = f"‚ùó | Your dinosaur is already busy with something, check the profile!"

                        bot.send_message(message.chat.id, text, reply_markup = functions.inline_markup(bot, f'open_dino_profile', message.chat.id, ['–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Open a profile'], str(bd_user['settings']['dino_id']) ))


                if message.text in ['üçï –ü—Ä–æ–≥—Ä–µ—Å—Å', 'üçï Progress']:

                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'hunting':
                        number = bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'][0]
                        tnumber = bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'][1]
                        prog = number / (tnumber / 100)

                        if bd_user['language_code'] == 'ru':
                            text = f'üç± | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {int( prog )}%\nüé≤ | –¶–µ–ª—å: {tnumber}'
                        else:
                            text = f'üç± | Current progress: {int( prog )}%\nüé≤ | Goal: {tnumber}'

                        bot.send_message(message.chat.id, text)

                if message.text in ['ü§ç –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞', 'ü§ç Invite a friend']:

                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        coins = 200

                        if bd_user['language_code'] == 'ru':
                            text = f"ü§ç | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã!\n\nüíú | –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 5-–≥–æ —É—Ä–æ–≤–Ω—è –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ü•ö –ù–µ–æ–±—ã—á–Ω–æ–µ/–†–µ–¥–∫–æ–µ —è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞!\n\n‚ù§ | –î—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ: {coins} –º–æ–Ω–µ—Ç,\n üçØ –ë–∞–Ω–æ—á–∫–∞ –º—ë–¥–∞ —Ö2, üß∏ –ú–∏—à–∫–∞, üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ x2, üçí –Ø–≥–æ–¥—ã x2, ü¶™ –ú–µ–ª–∫–∞—è —Ä—ã–±–∞ x2, üç™ –ü–µ—á–µ–Ω—å–µ x2"

                        else:
                            text = f"ü§ç | Redirection to the referral system menu!\n\nüíú | When your friend reaches the 5th level, you will receive an Unusual/Rare dinosaur egg!\n\n‚ù§ | Friend will receive a bonus: {coins} coins,\n üçØ Jar of honey x2, üß∏ Bear, üçó Chicken leg x2, üçí Berries x2, ü¶™ Small fish x2, üç™ Cookies x2"

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "referal-system", user))

                if message.text in ['üë• –ú–µ–Ω—é –¥—Ä—É–∑–µ–π', 'üë• Friends Menu']:

                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if bd_user['language_code'] == 'ru':
                            text = f"üë• | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"

                        else:
                            text = f"üë• | Redirecting to the friends menu!"

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "friends-menu", user))

                if message.text in ['üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', 'üé≤ Generate Code']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        if 'referal_system' not in bd_user.keys():
                            rf = referal_system.find_one({"id": 1})
                            def r_cod():
                                code_rf = ''
                                for i in range(6):
                                    code_rf += str(random.randint(0,9))
                                return code_rf

                            rf_code = r_cod()
                            while rf_code in rf['codes']:
                                rf_code = r_cod()

                            rf['codes'].append(rf_code)
                            referal_system.update_one( {"id": 1}, {"$set": {'codes': rf['codes'] }} )

                            bd_user['referal_system'] = {'my_cod': rf_code, 'friend_cod': None}
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'referal_system': bd_user['referal_system'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = f"üé≤ | –í–∞—à –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n–ö–æ–¥: `{rf_code}`"

                            else:
                                text = f"üé≤ | Your code is generated!\n–°ode: `{rf_code}`"

                            bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = functions.markup(bot, "referal-system", user))

                if message.text in ['üéû –í–≤–µ—Å—Ç–∏ –∫–æ–¥', 'üéû Enter Code']:
                    rf = referal_system.find_one({"id": 1})

                    def ret(message, bd_user):
                        if message.text in rf['codes']:
                            if str(bd_user['referal_system']['my_cod']) != message.text:
                                items = ['1', '1', '2', '2', '16', '12', '12', '11', '11', '13', '13']
                                coins = 200
                                bd_user['coins'] += coins
                                for i in items:
                                    functions.add_item_to_user(bd_user, i)

                                members = users.find({ })
                                fr_member = None

                                for i in members:
                                    if fr_member != None:
                                        break
                                    else:
                                        if 'referal_system' in i.keys():
                                            if i['referal_system']['my_cod'] == message.text:
                                                fr_member = i


                                if fr_member['userid'] not in bd_user['friends']['friends_list']:
                                    bd_user['friends']['friends_list'].append(i['userid'])
                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                                if bd_user['userid'] not in fr_member['friends']['friends_list']:
                                    fr_member['friends']['friends_list'].append(bd_user['userid'])
                                    users.update_one( {"userid": fr_member['userid']}, {"$set": {'friends': fr_member['friends'] }} )

                                bd_user['referal_system']['friend_cod'] = message.text
                                bd_user['referal_system']['friend'] = fr_member['userid']

                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'coins': bd_user['coins'] }} )

                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'referal_system': bd_user['referal_system'] }} )

                                if bd_user['language_code'] == 'ru':
                                    text = f"‚ù§ü§çüíú | –ö–æ–¥ –¥—Ä—É–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n‚ù§ | –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –∏ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!\n\nü§ç | –ü–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 5-–≥–æ —É—Ä–æ–≤–Ω—è, –≤–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç ü•ö –ù–µ–æ–±—ã—á–Ω–æ–µ/–†–µ–¥–∫–æ–µ —è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞!\n\nüíú | –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ: {coins} –º–æ–Ω–µ—Ç, üçØ –ë–∞–Ω–æ—á–∫–∞ –º—ë–¥–∞ —Ö2, üß∏ –ú–∏—à–∫–∞, üçó –ö—É—Ä–∏–Ω–∞—è –Ω–æ–∂–∫–∞ x2, üçí –Ø–≥–æ–¥—ã x2, ü¶™ –ú–µ–ª–∫–∞—è —Ä—ã–±–∞ x2, üç™ –ü–µ—á–µ–Ω—å–µ x2"

                                else:
                                    text = f"‚ù§ü§çüíú | The friend's code is activated!\n\n‚ù§ | Thank you for supporting and helping to develop our bot by inviting friends!\n\nü§ç | Upon reaching level 5, your friend will receive an ü•ö Unusual/Rare Dinosaur Egg!\n\nüíú | You get a bonus: {coins} coins, üçØ Jar of honey x2, üß∏ Bear, üçó Chicken leg x2, üçí Berries x2, ü¶™ Small fish x2, üç™ Cookies x2"

                            else:
                                if bd_user['language_code'] == 'ru':
                                    text = f"‚ùó | –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥ –¥—Ä—É–≥–∞!"

                                else:
                                    text = f"‚ùó | You can't activate your friend code!"
                        else:
                            if bd_user['language_code'] == 'ru':
                                text = f"‚ùó | –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!"

                            else:
                                text = f"‚ùó | Code not found!"

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "referal-system", user))



                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        if 'referal_system' not in bd_user.keys():
                            rf = referal_system.find_one({"id": 1})
                            def r_cod():
                                code_rf = ''
                                for i in range(6):
                                    code_rf += str(random.randint(0,9))
                                return code_rf

                            rf_code = r_cod()
                            while rf_code in rf['codes']:
                                rf_code = r_cod()

                            rf['codes'].append(rf_code)
                            referal_system.update_one( {"id": 1}, {"$set": {'codes': rf['codes'] }} )

                            bd_user['referal_system'] = {'my_cod': rf_code, 'friend_cod': None}
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'referal_system': bd_user['referal_system'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = f"üé≤ | –í–∞—à –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n–ö–æ–¥: `{rf_code}`"

                            else:
                                text = f"üé≤ | Your code is generated!\n–°ode: `{rf_code}`"

                            bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = functions.markup(bot, "referal-system", user))

                            if bd_user['language_code'] == 'ru':
                                ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                                text = 'üë• | –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ > '
                            else:
                                ans = ['‚Ü™ Back']
                                text = "üë• | Enter a friend's invitation code >"

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                            rmk.add(ans[0])


                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, bd_user)

                        else:
                            if bd_user['referal_system']['friend_cod'] == None:

                                if bd_user['language_code'] == 'ru':
                                    ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                                    text = 'üë• | –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ > '
                                else:
                                    ans = ['‚Ü™ Back']
                                    text = "üë• | Enter a friend's invitation code >"

                                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                rmk.add(ans[0])


                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                bot.register_next_step_handler(msg, ret, bd_user)

                            else:
                                if bd_user['language_code'] == 'ru':
                                    text = 'üë• | –í—ã —É–∂–µ –≤–≤–µ–ª–∏ –∫–æ–¥ –¥—Ä—É–≥–∞!'
                                else:
                                    text = "üë• | You have already entered a friend's code!"

                                msg = bot.send_message(message.chat.id, text)


                if message.text in ['üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 'üíç Accessories']:
                    bd_user = users.find_one({"useriid": user.id})
                    if bd_user != None:

                        if len(bd_user['dinos']) > 1:
                            for i in bd_user['dinos'].keys():
                                if i not in bd_user['activ_items'].keys():

                                    users.update_one( {"userid": bd_user["userid"] }, {"$set": {f'activ_items.{i}': {'game': None, 'hunt': None, 'journey': None, 'unv': None} }} )

                        def acss(message, dino_id, user, bd_user):

                            if bd_user['dinos'][dino_id]['status'] != 'dino':

                                if bd_user['language_code'] == 'ru':
                                    text = 'üéç | –î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∫—É–±–∏—Ä–æ–≤–∞–Ω!'
                                else:
                                    text = 'üéç | The dinosaur must be incubated!'

                                bot.send_message(message.chat.id, text)
                                return

                            if bd_user['dinos'][dino_id]['activ_status'] != 'pass_active':

                                if bd_user['language_code'] == 'ru':
                                    text = 'üéç | –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã / —Å–Ω–∞ / –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç–¥. - –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä!'
                                else:
                                    text = 'üéç | While playing / sleeping / traveling, etc. - you can not change the accessory!'

                                bot.send_message(message.chat.id, text)
                                return


                            if bd_user['language_code'] == 'ru':
                                ans = ['üïπ –ò–≥—Ä–∞', 'üåô –°–æ–Ω', 'üåø –°–±–æ—Ä –ø–∏—â–∏', 'üèÆ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '‚Ü™ –ù–∞–∑–∞–¥']
                                text = 'üéç | –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä >'
                            else:
                                ans = ['üïπ Game', 'üåô Dream', 'üåø Collecting food', 'üèÆ Journey', '‚Ü™ Back']
                                text = 'üéç | Choose which aspect the accessory should be >'

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                            rmk.add(ans[0], ans[1])
                            rmk.add(ans[2], ans[3])
                            rmk.add(ans[4])

                            def ret_zero(message, ans, bd_user):

                                if message.text not in ans or message.text == ans[4]:
                                    res = None
                                else:
                                    res = message.text

                                if res == None:
                                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 'profile', user))
                                    return

                                if message.text in ['üïπ Game', 'üïπ –ò–≥—Ä–∞']:
                                    ac_type = 'game'
                                if message.text in ['üåô –°–æ–Ω', 'üåô Dream']:
                                    ac_type = 'unv'
                                if message.text in ['üåø –°–±–æ—Ä –ø–∏—â–∏', 'üåø Collecting food']:
                                    ac_type = 'hunt'
                                if message.text in ['üèÆ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üèÆ Journey']:
                                    ac_type = 'journey'

                                if bd_user['language_code'] == 'ru':
                                    text = 'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–≥–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ª–æ—Ç >'
                                else:
                                    text = 'üé¥ | Select an item from the inventory to install it in the active slot >'

                                nitems = bd_user['inventory']

                                if nitems == []:

                                    if bd_user['language_code'] == 'ru':
                                        text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                                    else:
                                        text = 'Inventory is empty.'

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', user))
                                    return

                                data_items = items_f['items']
                                items = []
                                items_id = {}
                                page = 1
                                items_names = []

                                for i in nitems:
                                    if data_items[str(i['item_id'])]['type'] == f"{ac_type}_ac":
                                        items.append(i)

                                if bd_user['language_code'] == 'ru':
                                    lg = "nameru"
                                else:
                                    lg = "nameen"

                                for i in items:
                                    items_id[ items_f['items'][str(i['item_id'])][lg] ] = i
                                    items_names.append( items_f['items'][str(i['item_id'])][lg] )

                                items_sort = []
                                d_it_sort = {}
                                ind_sort_it = {}

                                for i in items_names:
                                    if i in list(d_it_sort.keys()):
                                        d_it_sort[i] += 1
                                    else:
                                        d_it_sort[i] = 1

                                for n in list(d_it_sort.keys()):
                                    col = d_it_sort[n]
                                    name = n
                                    items_sort.append(f'{n} x{col}')
                                    ind_sort_it[f'{n} x{col}'] = n

                                pages = list(functions.chunks(list(functions.chunks(items_sort, 2)), 2))

                                if len(pages) == 0:
                                    pages = [ [ ] ]

                                for i in pages:
                                    for ii in i:
                                        if len(ii) == 1:
                                            ii.append(' ')

                                    if len(i) != 2:
                                        for iii in range(2 - len(i)):
                                            i.append([' ', ' '])

                                def work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type):
                                    global l_pages, l_page, l_ind_sort_it
                                    a = []
                                    l_pages = pages
                                    l_page = page
                                    l_ind_sort_it = ind_sort_it

                                    def ret(message):
                                        global l_pages, l_page, l_ind_sort_it
                                        if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                            a.append(None)
                                            return False
                                        else:
                                            if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂', 'üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä', 'üîª Remove the accessory']:
                                                a.append(message.text)
                                            else:
                                                a.append(None)
                                            return False

                                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                                    for i in pages[page-1]:
                                        rmk.add(i[0], i[1])

                                    act_item = []
                                    if bd_user['activ_items'][ dino_id ][ac_type] == None:
                                        act_item = ['–Ω–µ—Ç', 'no']
                                    else:
                                        act_item = [ items_f['items'][ bd_user['activ_items'][ dino_id ][ac_type]['item_id'] ] ['nameru'], items_f['items'][ bd_user['activ_items'][ dino_id ][ac_type]['item_id'] ]['nameen'] ]

                                    if len(pages) > 1:
                                        if bd_user['language_code'] == 'ru':
                                            com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂', 'üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä']
                                            textt = f'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä >\n–ê–∫—Ç–∏–≤–Ω—ã–π: {act_item[0]}'
                                        else:
                                            com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂', 'üîª Remove the accessory']
                                            textt = f'üé¥ | Choose an accessory >\nActive: {act_item[1]}'

                                        rmk.add(com_buttons[3])
                                        rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                                    else:

                                        if bd_user['language_code'] == 'ru':
                                            com_buttons = ['‚Ü™ –ù–∞–∑–∞–¥', 'üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä']
                                            textt = f'üé¥ | –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä >\n–ê–∫—Ç–∏–≤–Ω—ã–π: {act_item[0]}'
                                        else:
                                            textt = f'üé¥ | Choose an accessory >\nActive: {act_item[1]}'
                                            com_buttons = ['‚Ü™ Back', 'üîª Remove the accessory']

                                        rmk.add(com_buttons[1])
                                        rmk.add(com_buttons[0])

                                    def ret(message, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it, lg, ac_type):
                                        if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                                            res = None

                                        else:
                                            if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂', 'üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä', 'üîª Remove the accessory']:
                                                res = message.text
                                            else:
                                                res = None


                                        if res == None:
                                            if bd_user['language_code'] == 'ru':
                                                text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"
                                            else:
                                                text = "üë• | Return to the profile menu"

                                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', user))
                                            return '12'

                                        else:
                                            if res == '‚óÄ':
                                                if page - 1 == 0:
                                                    page = 1
                                                else:
                                                    page -= 1

                                                work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type)

                                            elif res == '‚ñ∂':
                                                if page + 1 > len(l_pages):
                                                    page = len(l_pages)
                                                else:
                                                    page += 1

                                                work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type)

                                            else:

                                                if res in ['üîª –°–Ω—è—Ç—å –∞–∫—Å–µ—Åc—É–∞—Ä', 'üîª Remove the accessory']:
                                                    if bd_user['activ_items'][ dino_id ][ac_type] != None:
                                                        item = bd_user['activ_items'][ dino_id ][ac_type]
                                                        bd_user['activ_items'][ dino_id ][ac_type] = None

                                                        if bd_user['language_code'] == 'ru':
                                                            text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç"
                                                        else:
                                                            text = "üé¥ | Active item removed"

                                                        users.update_one( {"userid": bd_user['userid']}, {"$push": {'inventory': item }} )
                                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'activ_items': bd_user['activ_items'] }} )

                                                    else:
                                                        if bd_user['language_code'] == 'ru':
                                                            text = "üé¥ | –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!"
                                                        else:
                                                            text = "üé¥ | There is no active item at the moment!"

                                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', user))

                                                else:
                                                    if bd_user['activ_items'][ dino_id ][ac_type] != None:
                                                        bd_user['inventory'].append(bd_user['activ_items'][ dino_id ][ac_type])

                                                    item = items_id[ l_ind_sort_it[res] ]

                                                    bd_user['activ_items'][ dino_id ][ac_type] = item

                                                    if bd_user['language_code'] == 'ru':
                                                        text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
                                                    else:
                                                        text = "üé¥ | The active item is installed!"

                                                    bd_user['inventory'].remove(item)
                                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'activ_items': bd_user['activ_items'] }} )

                                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', user))

                                    msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                                    bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it, lg, ac_type)

                                work_pr(message, pages, page, items_id, ind_sort_it, lg, ac_type)

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret_zero, ans, bd_user)

                        n_dp, dp_a = functions.dino_pre_answer(bot, message)
                        if n_dp == 1:

                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = functions.markup(bot, 1, user))
                            return

                        if n_dp == 2:

                            acss(message, list(bd_user['dinos'].keys())[0], user, bd_user)

                        if n_dp == 3:
                            rmk = dp_a[0]
                            text = dp_a[1]
                            dino_dict = dp_a[2]

                            def ret(message, dino_dict, user, bd_user):

                                try:

                                    acss(message, dino_dict[message.text][1], user, bd_user)
                                except:
                                    bot.send_message(message.chat.id, '‚ùì', reply_markup = functions.markup(bot, "profile", user))

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)

                if message.text in ['üõí –†—ã–Ω–æ–∫', 'üõí Market']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        if bd_user['language_code'] == 'ru':
                            text = 'üõí –ü–∞–Ω–µ–ª—å —Ä—ã–Ω–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!'
                        else:
                            text = 'üõí The market panel is open!'

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, "market", user))

                if message.text in ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûï Add Product']:

                    functions.user_inventory(bot, user, message, 'add_product')

                if message.text in ['üìú –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã', 'üìú My products']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        market_ = market.find_one({"id": 1})
                        if str(user.id) not in market_['products'].keys() or market_['products'][str(user.id)]['products'] == {}:

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ!"
                            else:
                                text = "üõí | You don't have any saleable products on the market!"

                            bot.send_message(message.chat.id, text)

                        else:

                            products = []
                            page = 1

                            for i in market_['products'][str(user.id)]['products'].keys():
                                product = market_['products'][str(user.id)]['products'][i]
                                products.append(product)

                            pages = list(functions.chunks(products, 5))

                            if bd_user['language_code'] == 'ru':
                                text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                            else:
                                text = 'üõí | *Your products*\n\n'

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                            if len(pages) > 1:

                                if bd_user['language_code'] == 'ru':
                                    ans = ['‚óÄ', 'üõí –†—ã–Ω–æ–∫', '‚ñ∂']
                                else:
                                    ans = ['‚óÄ', 'üõí Market', '‚ñ∂']

                                rmk.add(ans[0], ans[1], ans[2])

                            else:

                                if bd_user['language_code'] == 'ru':
                                    ans = ['üõí –†—ã–Ω–æ–∫']
                                else:
                                    ans = ['üõí Market']

                                rmk.add(ans[0])

                            def work_pr(page, pages):

                                if bd_user['language_code'] == 'ru':
                                    text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                                else:
                                    text = 'üõí | *Your products*\n\n'

                                w_page = pages[page-1]

                                nn = (page - 1) * 5
                                for pr in w_page:
                                    item = items_f['items'][ pr['item']['item_id'] ]
                                    nn += 1

                                    if int(w_page.index(pr)) == len(w_page) - 1:
                                        n = '‚îî'
                                    elif int(w_page.index(pr)) == 0:
                                        n = '‚îå'
                                    else:
                                        n = '‚îú'

                                    if bd_user['language_code'] == 'ru':
                                        text += f"*{n}* {nn}# {item['nameru']}\n    *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {pr['price']}\n"
                                        text += f"       *‚îî* –ü—Ä–æ–¥–∞–Ω–æ: {pr['col'][0]} / {pr['col'][1]}"

                                        if 'abilities' in pr['item'].keys():
                                            if 'uses' in pr['item']['abilities'].keys():
                                                text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {pr['item']['abilities']['uses']}"

                                            if 'endurance' in pr['item']['abilities'].keys():
                                                text += f"\n           *‚îî* –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {pr['item']['abilities']['endurance']}"

                                        text += '\n\n'

                                    else:
                                        text += f"*{n}* {nn}# {item['nameen']}\n    *‚îî* Price pay for 1—Ö: {pr['price']}\n"
                                        text += f"        *‚îî* Sold: {pr['col'][0]} / {pr['col'][1]}"

                                        if 'abilities' in pr['item'].keys():
                                            if 'uses' in pr['item']['abilities'].keys():
                                                text += f"\n           *‚îî* Uses: {pr['item']['abilities']['uses']}"

                                            if 'endurance' in pr['item']['abilities'].keys():
                                                text += f"\n           *‚îî* Endurance: {pr['item']['abilities']['endurance']}"

                                        text += '\n\n'

                                if bd_user['language_code'] == 'ru':
                                    text += f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}'
                                else:
                                    text += f'Page: {page}'

                                return text

                            msg_g = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')

                            def check_key(message, page, pages, ans):

                                if message.text in ['üõí –†—ã–Ω–æ–∫', 'üõí Market'] or message.text not in ans:

                                    if bd_user['language_code'] == 'ru':
                                        text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                    else:
                                        text = "üõí | Return to the market menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                    return

                                if len(pages) > 1 and message.text in ['‚óÄ', '‚ñ∂']:
                                    if message.text == '‚óÄ':

                                        if page - 1 == 0:
                                            page = 1
                                        else:
                                            page -= 1

                                    if message.text == '‚ñ∂':

                                        if page + 1 > len(pages):
                                            page = len(pages)
                                        else:
                                            page += 1

                                msg = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')
                                bot.register_next_step_handler(msg, check_key, page, pages, ans)

                            bot.register_next_step_handler(msg_g, check_key, page, pages, ans)

                if message.text in ['‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûñ Delete Product']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        market_ = market.find_one({"id": 1})
                        if str(user.id) not in market_['products'].keys() or market_['products'][str(user.id)]['products'] == {}:

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ!"
                            else:
                                text = "üõí | You don't have any saleable products on the market!"

                            bot.send_message(message.chat.id, text)

                        else:

                            products = []
                            page = 1

                            for i in market_['products'][str(user.id)]['products'].keys():
                                product = market_['products'][str(user.id)]['products'][i]
                                products.append(product)

                            pages = list(functions.chunks(products, 5))

                            if bd_user['language_code'] == 'ru':
                                text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                            else:
                                text = 'üõí | *Your products*\n\n'

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                            lll = []
                            for i in range(1, len(pages[page-1])+1 ):
                                lll.append(str(i + 1 * page + (5 * (page-1))-1 * page ))

                            if len(lll) == 1:
                                rmk.add(lll[0])
                            if len(lll) == 2:
                                rmk.add(lll[0], lll[1])
                            if len(lll) == 3:
                                rmk.row(lll[0], lll[1], lll[2])
                            if len(lll) == 4:
                                rmk.row(lll[0], lll[1], lll[2], lll[3])
                            if len(lll) == 5:
                                rmk.row(lll[0], lll[1], lll[2], lll[3], lll[4])

                            if len(pages) > 1:

                                if bd_user['language_code'] == 'ru':
                                    ans = ['‚óÄ', 'üõí –†—ã–Ω–æ–∫', '‚ñ∂']
                                else:
                                    ans = ['‚óÄ', 'üõí Market', '‚ñ∂']

                                rmk.add(ans[0], ans[1], ans[2])

                            else:

                                if bd_user['language_code'] == 'ru':
                                    ans = ['üõí –†—ã–Ω–æ–∫']
                                else:
                                    ans = ['üõí Market']

                                rmk.add(ans[0])

                            def work_pr(page, pages):

                                if bd_user['language_code'] == 'ru':
                                    text = 'üõí | *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã*\n\n'
                                else:
                                    text = 'üõí | *Your products*\n\n'

                                w_page = pages[page-1]

                                nn = (page - 1) * 5
                                for pr in w_page:
                                    item = items_f['items'][ pr['item']['item_id'] ]
                                    nn += 1

                                    if int(w_page.index(pr)) == len(w_page) - 1:
                                        n = '‚îî'
                                    elif int(w_page.index(pr)) == 0:
                                        n = '‚îå'
                                    else:
                                        n = '‚îú'

                                    if bd_user['language_code'] == 'ru':
                                        text += f"*{n}* {nn}# {item['nameru']}\n    *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {pr['price']}\n"
                                        text += f"       *‚îî* –ü—Ä–æ–¥–∞–Ω–æ: {pr['col'][0]} / {pr['col'][1]}"

                                        if 'abilities' in pr['item'].keys():
                                            if 'uses' in pr['item']['abilities'].keys():
                                                text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {pr['item']['abilities']['uses']}"

                                        text += '\n\n'

                                    else:
                                        text += f"*{n}* {nn}# {item['nameen']}\n    *‚îî* Price pay for 1—Ö: {pr['price']}\n"
                                        text += f"        *‚îî* Sold: {pr['col'][0]} / {pr['col'][1]}"

                                        if 'abilities' in pr['item'].keys():
                                            if 'uses' in pr['item']['abilities'].keys():
                                                text += f"\n           *‚îî* Uses: {pr['item']['abilities']['uses']}"

                                        text += '\n\n'

                                if bd_user['language_code'] == 'ru':
                                    text += f'–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}'
                                else:
                                    text += f'Page: {page}'

                                return text

                            msg_g = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')

                            def check_key(message, page, pages, ans):
                                number = None

                                if message.text in ['üõí –†—ã–Ω–æ–∫', 'üõí Market']:

                                    if bd_user['language_code'] == 'ru':
                                        text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                    else:
                                        text = "üõí | Return to the market menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                    return

                                if message.text not in ans:

                                    try:
                                        number = int(message.text)

                                    except:

                                        if bd_user['language_code'] == 'ru':
                                            text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                        else:
                                            text = "üõí | Return to the market menu!"

                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                        return

                                if number == None:
                                    if len(pages) > 1 and message.text in ['‚óÄ', '‚ñ∂']:
                                        if message.text == '‚óÄ':

                                            if page - 1 == 0:
                                                page = 1
                                            else:
                                                page -= 1

                                        if message.text == '‚ñ∂':

                                            if page + 1 > len(pages):
                                                page = len(pages)
                                            else:
                                                page += 1

                                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                                    lll = []
                                    for i in range(1, len(pages[page-1])+1 ):
                                        lll.append(str(i + 1 * page + (5 * (page-1))-1 * page ))

                                    if len(lll) == 1:
                                        rmk.add(lll[0])
                                    if len(lll) == 2:
                                        rmk.add(lll[0], lll[1])
                                    if len(lll) == 3:
                                        rmk.row(lll[0], lll[1], lll[2])
                                    if len(lll) == 4:
                                        rmk.row(lll[0], lll[1], lll[2], lll[3])
                                    if len(lll) == 5:
                                        rmk.row(lll[0], lll[1], lll[2], lll[3], lll[4])

                                    if len(pages) > 1:

                                        if bd_user['language_code'] == 'ru':
                                            ans = ['‚óÄ', 'üõí –†—ã–Ω–æ–∫', '‚ñ∂']
                                        else:
                                            ans = ['‚óÄ', 'üõí Market', '‚ñ∂']

                                        rmk.add(ans[0], ans[1], ans[2])

                                    else:

                                        if bd_user['language_code'] == 'ru':
                                            ans = ['üõí –†—ã–Ω–æ–∫']
                                        else:
                                            ans = ['üõí Market']

                                        rmk.add(ans[0])

                                    msg = bot.send_message(message.chat.id, work_pr(page, pages), reply_markup = rmk, parse_mode = 'Markdown')
                                    bot.register_next_step_handler(msg, check_key, page, pages, ans)

                                else:

                                    nn_number = list(market_['products'][str(user.id)]['products'].keys())[number-1]

                                    if nn_number not in market_['products'][str(user.id)]['products'].keys():

                                        if bd_user['language_code'] == 'ru':
                                            text = "üõí | –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö!"
                                        else:
                                            text = "üõí | The object with this number is not found in your products!"

                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))

                                    else:

                                        prod = market_['products'][str(user.id)]['products'][nn_number]

                                        for i in range(prod['col'][1] - prod['col'][0]):
                                            bd_user['inventory'].append(prod['item'])

                                        del market_['products'][str(user.id)]['products'][nn_number]

                                        market.update_one( {"id": 1}, {"$set": {'products': market_['products'] }} )
                                        users.update_one( {"userid": user.id}, {"$set": {'inventory': bd_user['inventory']}} )

                                        if bd_user['language_code'] == 'ru':
                                            text = "üõí | –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω!"
                                        else:
                                            text = "üõí | The product has been removed!"

                                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))

                            bot.register_next_step_handler(msg_g, check_key, page, pages, ans)

                if message.text in [ 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', 'üîç Product Search']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        market_ = market.find_one({"id": 1})

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                        if bd_user['language_code'] == 'ru':
                            ans = ['üõí –†—ã–Ω–æ–∫']
                            text = 'üîç | –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–∏—Ç–µ...'
                        else:
                            ans = ['üõí Market']
                            text = 'üîç | Enter the name of the item you are looking for...'

                        rmk.add(ans[0])

                        def name_reg(message):
                            if message.text in ['üõí Market', 'üõí –†—ã–Ω–æ–∫']:

                                if bd_user['language_code'] == 'ru':
                                    text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                else:
                                    text = "üõí | Return to the market menu!"

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                return

                            else:
                                s_i = []
                                for i in items_f['items']:
                                    item = items_f['items'][i]

                                    for inn in [ item['nameru'], item['nameen'] ]:
                                        if fuzz.token_sort_ratio(message.text, inn) > 80 or fuzz.ratio(message.text, inn) > 80 or message.text == inn:
                                            s_i.append(i)

                                if s_i == []:

                                    if bd_user['language_code'] == 'ru':
                                        text = "üõí | –ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                    else:
                                        text = "üõí | An item with that name was not found in the database of sold items!\nreturn to the market menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                    return


                                sear_items = []
                                for uid in market_['products']:
                                    if uid != str(bd_user['userid']):
                                        userser = market_['products'][uid]['products']
                                        for ki in userser:
                                            if userser[ki]['item']['item_id'] in s_i:
                                                sear_items.append( {'user': uid, 'key': ki, 'col': userser[ki]['col'], 'price': userser[ki]['price'], 'item': userser[ki]['item']} )

                                if sear_items == []:
                                    if bd_user['language_code'] == 'ru':
                                        text = "üõí | –ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                    else:
                                        text = "üõí | An item with that name was not found in the database of sold items!\nreturn to the market menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                    return

                                random.shuffle(sear_items)
                                page = list(functions.chunks(sear_items, 10))[0]

                                text = ''
                                a = 0

                                markup_inline = types.InlineKeyboardMarkup()
                                in_l = []

                                if bd_user['language_code'] == 'ru':
                                    text += f"üîç | –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ {len(sear_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤(–∞) >\n\n"
                                    for i in page:
                                        a += 1
                                        text += f"*{a}#* {items_f['items'][i['item']['item_id']]['nameru']}\n     *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {i['price']}\n         *‚îî* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {i['col'][1] - i['col'][0]}"

                                        if 'abilities' in i['item'].keys():
                                            if 'uses' in i['item']['abilities'].keys():
                                                text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {i['item']['abilities']['uses']}"

                                        text += '\n\n'
                                        in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))
                                else:
                                    text += f'üîç | Your search found {len(search_items)} item(s) >\n\n'
                                    for i in page:
                                        a += 1
                                        text += f"*{a}#* {items_f['items'][i['item_id']]['nameen']}\n     *‚îî* Price per 1x: {i['price']}\n         *‚îî* Quantity: {i['col'][1] - i['col'][0]}"

                                        if 'abilities' in i['item'].keys():
                                            if 'uses' in i['item']['abilities'].keys():
                                                text += f"\n           *‚îî* Uses: {i['item']['abilities']['uses']}"

                                        text += '\n\n'
                                        in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))


                                if len(in_l) == 1:
                                    markup_inline.add(in_l[0])
                                if len(in_l) == 2:
                                    markup_inline.add(in_l[0], in_l[1])
                                if len(in_l) == 3:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2])
                                if len(in_l) == 4:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3])
                                if len(in_l) == 5:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                                if len(in_l) == 6:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                                    markup_inline.add(in_l[5])
                                if len(in_l) == 7:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                                    markup_inline.add(in_l[5], in_l[6])
                                if len(in_l) == 8:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                                    markup_inline.add(in_l[5], in_l[6], in_l[7])
                                if len(in_l) == 9:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                                    markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8])
                                if len(in_l) == 10:
                                    markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                                    markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8], in_l[9])

                                msg = bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = markup_inline)

                                if bd_user['language_code'] == 'ru':
                                    text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                else:
                                    text = "üõí | Return to the market menu!"

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                return


                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk, parse_mode = 'Markdown')
                        bot.register_next_step_handler(msg, name_reg )

                if message.text in [ 'üõí –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', 'üõí Random Products']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        market_ = market.find_one({"id": 1})

                        items = []

                        for usk in market_['products']:
                            if usk != str(user.id):
                                for prd in market_['products'][usk]['products']:
                                    market_['products'][usk]['products'][prd]['user'] = usk
                                    market_['products'][usk]['products'][prd]['key'] = prd
                                    items.append(market_['products'][usk]['products'][prd])

                        random.shuffle(items)

                        page = []
                        for i in items:
                            if len(page) != 10:
                                page.append(i)

                        text = ''
                        a = 0
                        markup_inline = types.InlineKeyboardMarkup()
                        in_l = []

                        if bd_user['language_code'] == 'ru':
                            text += f"üîç | –°–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —Ä—ã–Ω–∫–∞ >\n\n"
                            for i in page:
                                a += 1
                                text += f"*{a}#* {items_f['items'][i['item']['item_id']]['nameru']}\n     *‚îî* –¶–µ–Ω–∞ –∑–∞ 1—Ö: {i['price']}\n         *‚îî* –ö–æ–ª–∏—á–µ—Å–≤—Ç–æ: {i['col'][1] - i['col'][0]}"

                                if 'abilities' in i['item'].keys():
                                    if 'uses' in i['item']['abilities'].keys():
                                        text += f"\n           *‚îî* –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {i['item']['abilities']['uses']}"

                                    if 'endurance' in i['item']['abilities'].keys():
                                        text += f"\n           *‚îî* –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {i['item']['abilities']['endurance']}"

                                text += '\n\n'

                                in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))

                        else:
                            text += f'üîç | Your search found {len(search_items)} item(s) >\n\n'
                            for i in page:
                                a += 1
                                text += f"*{a}#* {items_f['items'][i['item_id']]['nameen']}\n     *‚îî* Price per 1x: {i['price']}\n         *‚îî* Quantity: {i['col'][1] - i['col'][0]}"

                                if 'abilities' in i['item'].keys():
                                    if 'uses' in i['item']['abilities'].keys():
                                        text += f"\n           *‚îî* Uses: {i['item']['abilities']['uses']}"

                                    if 'endurance' in i['item']['abilities'].keys():
                                        text += f"\n           *‚îî* Endurance: {i['item']['abilities']['endurance']}"

                                text += '\n\n'

                                in_l.append( types.InlineKeyboardButton( text = str(a) + '#', callback_data = f"market_buy_{i['user']} {i['key']}"))

                        if len(in_l) == 1:
                            markup_inline.add(in_l[0])
                        if len(in_l) == 2:
                            markup_inline.add(in_l[0], in_l[1])
                        if len(in_l) == 3:
                            markup_inline.add(in_l[0], in_l[1], in_l[2])
                        if len(in_l) == 4:
                            markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3])
                        if len(in_l) == 5:
                            markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                        if len(in_l) == 6:
                            markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                            markup_inline.add(in_l[5])
                        if len(in_l) == 7:
                            markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                            markup_inline.add(in_l[5], in_l[6])
                        if len(in_l) == 8:
                            markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                            markup_inline.add(in_l[5], in_l[6], in_l[7])
                        if len(in_l) == 9:
                            markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                            markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8])
                        if len(in_l) == 10:
                            markup_inline.add(in_l[0], in_l[1], in_l[2], in_l[3], in_l[4])
                            markup_inline.add(in_l[5], in_l[6], in_l[7], in_l[8], in_l[9])

                        msg = bot.send_message(message.chat.id, text, parse_mode = 'Markdown', reply_markup = markup_inline)

@bot.callback_query_handler(func = lambda call: True)
def answer(call):
    user = call.from_user
    bd_user = users.find_one({"userid": user.id})

    if call.data == 'start':
        if bot.get_chat_member(-1001673242031, user.id).status != 'left' and bd_user == None:
            message = call
            try:
                message.chat = bot.get_chat(user.id)
            except:
                return

            if user.language_code == 'ru':
                text = f'üìú | –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!'
            else:
                text = f"üìú | Have a nice game!"

            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'Markdown')

            def photo():
                global json_f
                bg_p = Image.open(f"images/remain/{random.choice(['back', 'back2'])}.png")
                eg_l = []
                id_l = []

                for i in range(3):
                    rid = str(random.choice(list(json_f['data']['egg'])))
                    image = Image.open('images/'+str(json_f['elements'][rid]['image']))
                    eg_l.append(image)
                    id_l.append(rid)

                for i in range(3):
                    bg_img = bg_p
                    fg_img = eg_l[i]
                    img = functions.trans_paste(fg_img, bg_img, 1.0, (i*512,0))

                img.save('eggs.png')
                photo = open(f"eggs.png", 'rb')

                return photo, id_l

            if user.language_code == 'ru':
                text = 'ü•ö | –í—ã–±–µ—Ä–∏—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º!'
            else:
                text = 'ü•ö | Choose a dinosaur egg!'

            if user.language_code == 'ru':
                lg = "ru"
            else:
                lg = 'en'

            users.insert_one({'userid': user.id, 'last_m': int(time.time()), 'dinos': {}, 'eggs': [], 'notifications': {}, 'settings': {'notifications': True, 'dino_id': '1', 'iid': 0}, 'language_code': lg, 'inventory': [], 'coins': 0, 'lvl': [1, 0], 'activ_items': { '1': {'game': None, 'hunt': None, 'journey': None, 'unv': None} }, 'friends': { 'friends_list': [], 'requests': [] } })

            markup_inline = types.InlineKeyboardMarkup()
            item_1 = types.InlineKeyboardButton( text = 'ü•ö 1', callback_data = 'egg_answer_1')
            item_2 = types.InlineKeyboardButton( text = 'ü•ö 2', callback_data = 'egg_answer_2')
            item_3 = types.InlineKeyboardButton( text = 'ü•ö 3', callback_data = 'egg_answer_3')
            markup_inline.add(item_1, item_2, item_3)

            photo, id_l = photo()
            bot.send_photo(message.chat.id, photo, text, reply_markup = markup_inline)
            users.update_one( {"userid": user.id}, {"$set": {'eggs': id_l}} )

    elif call.data == 'checking_the_user_in_the_channel':
        if bot.get_chat_member(-1001673242031, user.id).status != 'left':

            if bd_user['language_code'] == 'ru':
                text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüü¢ | –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!'
            else:
                text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüü¢ | Thank you for understanding, enjoy using the bot!"

            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'Markdown')


    elif call.data in ['egg_answer_1', 'egg_answer_2', 'egg_answer_3']:

        if 'eggs' in list(bd_user.keys()):
            egg_n = call.data[11:]

            bd_user['dinos'][ functions.user_dino_pn(bd_user) ] = {'status': 'incubation', 'incubation_time': time.time() + 10 * 60, 'egg_id': bd_user['eggs'][int(egg_n)-1]}

            users.update_one( {"userid": user.id}, {"$unset": {'eggs': None}} )
            users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

            if bd_user['language_code'] == 'ru':
                text = f'ü•ö | –í—ã–±–µ—Ä–∏—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º!\nü¶ñ | –í—ã –≤—ã–±—Ä–∞–ª–∏ —è–π—Ü–æ ü•ö{egg_n}!'
                text2 = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–∏–Ω–æ–∑–∞–≤—Ä!\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è, –∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∏–∑ –Ω–µ–≥–æ –≤—ã–ª—É–ø–∏—Ç—Å—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫!\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–π—Ü–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä*!'
                text2 += "\n\n*–ù–æ–≤–∏—á–æ–∫!*\n\n–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º –º–∏—Ä–µ –∏ –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç!\n"
            else:
                text = f'ü•ö | Choose a dinosaur egg!\nü¶ñ | You have chosen an egg ü•ö{egg_n}!'
                text2 = f'Congratulations, you have your first dinosaur!\n At the moment the egg is incubating, and in 10 minutes a dinosaur will hatch out of it!To view up-to-date information about the egg, click *ü¶ñ Dinosaur*!'
                text2 += '\n\n**Newbie!*\n\nlet me tell you a little about this world and how the bot works!\n'

            if bd_user['language_code'] == 'ru':
                text2 += "*‚îå* *–†–µ–¥–∫–æ—Å—Ç–∏ üéà*\n\n"
                text2 += "*‚îú* –°–æ–±—ã—Ç–∏—è –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏.\n–ß–µ–º –±–æ–ª—å—à–µ —Ä–µ–¥–∫–æ—Å—Ç—å, —Ç–µ–º —Å–ª–∞—â–µ –Ω–∞–≥—Ä–∞–¥–∞.\n\n"
                text2 += "*‚îú*  1. –û–±—ã—á–Ω–∞—è - 50%\n*‚îú*  2. –ù–µ–æ–±—ã—á–Ω–∞—è - 25%\n*‚îú*  3. –†–µ–¥–∫–∞—è - 15%\n*‚îú*  4. –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è - 9%\n*‚îî*  5. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è - 1%\n\n"
                text2 += "*‚îå* *–í–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏—è üïπ*\n\n"
                text2 += "*‚îú* –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∏–Ω–æ–∑–∞—Ä–≤–æ–º –ø–µ—Ä–µ–¥–∏—Ç–µ –≤ `üïπ –î–µ–π—Å—Ç–≤–∏—è`.\n\n"
                text2 += "*‚îú*  1. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±—ã—Ç—å –ø–∏—â—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üçï –°–±–æ—Ä –ø–∏—â–∏` –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
                text2 += "*‚îú*  2. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å` –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∏—â—É.\n\n"
                text2 += "*‚îú*  3. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ç—Ä–µ—É–±–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è` –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
                text2 += "*‚îú*  4. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ —Å–ø–∞—Ç—å, `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å`\n\n"
                text2 += "*‚îî*  5. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ, –∏–≥—Ä—ã, —Å–Ω–∞ –≤ –Ω–æ—Ä–º–µ.\n\n"
                text2 += "*‚îå* *–ü—Ä–æ—Ñ–∏–ª—å üéÆ*\n"
                text2 += "*‚îî*  –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ `üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å`\n\n"
                text2 += "*‚îå* *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß*\n\n"
                text2 += "*‚îî*  –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫.\n\n"
            else:
                text2 += "*‚îå* *Rarities üéà*\n\n"
                text2 += "*‚îú* Events and dinosaurs are divided into rarities.The greater the rarity, the sweeter the reward.\n\n"
                text2 += "*‚îú* 1. Normal - 50%\n*‚îú* 2. Unusual - 25%\n*‚îú* 3. Rare - 15%\n*‚îú* 4. Mystical - 9%\n*‚îî* 5. Legendary - 1%\n\n"
                text2 += "*‚îå* *Interaction üïπ*\n\n"
                text2 += "*‚îú* To interact with dinozarv, pass in `üïπ Actions`.\n\n"
                text2 += "*‚îú* 1. In order to feed the dinosaur, you need to get food, click on `üïπ Actions` > `üçï Food Collection` and follow the instructions.\n\n"
                text2 += "*‚îú*  2. To feed the dinosaur, click on `üïπ Actions` > `üç£ Feed` and choose the appropriate food.\n\n"
                text2 += "*‚îú* 3. To improve the mood of the dinosaur, it is necessary to entertain the dinosaur from time to time. Go to `üïπ Actions` > `üéÆ Entertainment` and follow the instructions.\n\n"
                text2 += "*‚îú* 4. To renew the dinosaur's powers, send it to sleep, `üïπ Action` > `üåô Put to bed`\n\n"
                text2 += "*‚îî* 5. To improve mood, it is required to keep the need for iodine, games, sleep normal.\n\n"
                text2 += "*‚îå* *Profile üéÆ*\n"
                text2 += "*‚îî* To view inventory or find out your statistics, go to `üëÅ Profile`\n\n"
                text2 += "*‚îå* *Settings üîß*\n\n"
                text2 += "*‚îî*  In the settings, you can rename the dinosaur, disable notifications, or switch the language.\n\n"

            bot.edit_message_caption(text, call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, text2, parse_mode = 'Markdown', reply_markup = functions.markup(bot, 1, user))

    elif call.data[:13] in ['90min_journey', '60min_journey', '30min_journey', '10min_journey', '12min_journey']:

        if call.data[:13] == '12min_journey':
            jr_time = 120
        else:
            jr_time = int(call.data[:2])

        bd_user['dinos'][ call.data[14:] ]['activ_status'] = 'journey'
        bd_user['dinos'][ call.data[14:] ]['journey_time'] = time.time() + 60 * jr_time
        bd_user['dinos'][ call.data[14:] ]['journey_log'] = []
        users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

        if bd_user['language_code'] == 'ru':
            text = f'üéà | –ï—Å–ª–∏ —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫–∏–µ —Ç–æ –≤–µ—â–∏.\n\nüß∂ | –í–æ –≤—Ä–µ–º—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Ä–∞–∑–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –æ—Ç –Ω–∏—Ö –∑–∞–≤–∏—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.'
            text2 = f'üå≥ | –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ {jr_time} –º–∏–Ω—É—Ç.'

        else:
            text = f"üéà | If the dinosaur is in a good mood, he can bring back some things.\n\nüß∂ | During the trip, different situations may occur, the result of the trip depends on them."
            text2 = f"üå≥ | You sent a dinosaur on a journey for {jr_time} minutes."

        bot.edit_message_text(text2, call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, text, parse_mode = 'html', reply_markup = functions.markup(bot, "actions", user))

    elif call.data[:10] in ['1_con_game', '2_con_game', '3_con_game', '1_sna_game', '2_sna_game', '3_sna_game', '1_pin_game', '2_pin_game', '3_pin_game', '1_bal_game', '2_bal_game', '3_bal_game', '1_puz_game', '2_puz_game', '3_puz_game', '1_che_game', '2_che_game', '3_che_game', '1_jen_game', '2_jen_game', '3_jen_game', '1_ddd_game', '2_ddd_game', '3_ddd_game']:
        user = call.from_user
        bd_user = users.find_one({"userid": user.id})
        n_s = int(call.data[:1])
        dino_id = str(bd_user['settings']['dino_id'])
        if n_s == 1:
            time_m = random.randint(15, 30) * 60
        if n_s == 2:
            time_m = random.randint(30, 60) * 60
        if n_s == 3:
            time_m = random.randint(60, 90) * 60

        if bd_user['dinos'][dino_id]['activ_status'] != 'pass_active':
            return

        game = call.data[:5][-3:]

        if game == 'con':
            game = 'console'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å...'], ['The dinosaur is tired of playing the console...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å...'], ['The dinosaur is a little tired of playing the console...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å!'], ['The dinosaur is quite playing the game console!'] ] ]

        elif game == 'sna':
            game = 'snake'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –∑–º–µ—è...'], ['The dinosaur is tired of playing kite...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –∑–º–µ—è...'], ['The dinosaur is a little tired of playing kite...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –∑–º–µ—è!'], ['The dinosaur is pretty playing kite!'] ] ]

        elif game == 'pin':
            game = 'ping-pong'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –ø–∏–Ω–≥ –ø–æ–Ω–≥...'], ['The dinosaur is tired of playing ping pong...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –ø–∏–Ω–≥ –ø–æ–Ω–≥...'], ['The dinosaur is a little tired of playing ping pong...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –ø–∏–Ω–≥ –ø–æ–Ω–≥!'], ['Dinosaur is pretty playing ping pong!'] ] ]

        elif game == 'bal':
            game = 'ball'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –º—è—á...'], ['The dinosaur is tired of playing ball...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –º—è—á...'], ['The dinosaur got a little tired of playing ball...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –º—è—á!'], ['The dinosaur is pretty playing ball!'] ] ]

        elif game == 'puz':
            game = 'puzzles'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –ø–∞–∑–ª—ã...'], ['The dinosaur is tired of playing puzzles...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –ø–∞–∑–ª—ã...'], ['The dinosaur got a little tired of playing puzzles...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –ø–∞–∑–ª—ã!'], ['The dinosaur is pretty playing puzzles!'] ] ]

        elif game == 'che':
            game = '—Åhess'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã...'], ['The dinosaur is tired of playing chess...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã...'], ['The dinosaur got a little tired of playing chess...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ —à–∞—Ö–º–∞—Ç—ã!'], ['Dinosaur is playing chess pretty!'] ] ]

        elif game == 'jen':
            game = 'jenga'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –¥–∂–µ–Ω–≥—É...'], ['The dinosaur is tired of playing jenga...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –¥–∂–µ–Ω–≥—É...'], ['The dinosaur got a little tired of playing jenga...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –¥–∂–µ–Ω–≥—É!'], ['Dinosaur is playing jenga pretty!'] ] ]

        elif game == 'ddd':
            game = 'd&d'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ D&D...'], ['The dinosaur is tired of playing D&D...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ D&D...'], ['The dinosaur got a little tired of playing D&D...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ D&D!'], ['Dinosaur is playing D&D pretty!'] ] ]

        bd_user['dinos'][ dino_id ]['activ_status'] = 'game'
        if 'games' not in list(bd_user['dinos'][ dino_id ].keys()):
            bd_user['dinos'][ dino_id ]['games'] = []

        if len(bd_user['dinos'][ dino_id ]['games']) >= 3:
            bd_user['dinos'][ dino_id ]['games'].remove( bd_user['dinos'][ dino_id ]['games'][0] )

        bd_user['dinos'][ dino_id ]['games'].append(game)
        games = bd_user['dinos'][ dino_id ]['games'].copy()
        bd_user['dinos'][ dino_id ]['game_%'] = 1

        if len(games) == 1:
            bd_user['dinos'][ dino_id ]['game_%'] = 1

            if bd_user['language_code'] == 'ru':
                text2 = f'üéÆ | {e_text[2][0][0]}'

            else:
                text2 = f"üéÆ | {e_text[2][1][0]}"

        if len(games) == 2:

            if games[0] == games[1]:
                bd_user['dinos'][ dino_id ]['game_%'] = 0.9
                if bd_user['language_code'] == 'ru':
                    text2 = f"üéÆ | {e_text[0][0][0]}, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ {bd_user['dinos'][ dino_id ]['game_%']}% –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∏–≥—Ä—ã!"

                else:
                    text2 = f"üéÆ | {e_text[0][1][0]}, he gets a {bd_user['dinos'][ dino_id ]['game_%']}% penalty in enjoying the game!"

            if games[0] != games[1]:
                bd_user['dinos'][ dino_id ]['game_%'] = 1

                if bd_user['language_code'] == 'ru':
                    text2 = f'üéÆ | {e_text[2][0][0]}'

                else:
                    text2 = f"üéÆ | {e_text[2][1][0]}"


        if len(games) == 3:

            if games[2] == games[0] and games[2] == games[1]:
                bd_user['dinos'][ dino_id ]['game_%'] = 0.5

                if bd_user['language_code'] == 'ru':
                    text2 = f"üéÆ | {e_text[0][0][0]}, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ {bd_user['dinos'][ dino_id ]['game_%']}% –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∏–≥—Ä—ã!"

                else:
                    text2 = f"üéÆ | {e_text[0][1][0]}, he gets a {bd_user['dinos'][ dino_id ]['game_%']}% penalty in enjoying the game!"

            if ( games[2] == games[0] and games[2] != games[1] ) or ( games[2] != games[0] and games[2] == games[1] ):
                bd_user['dinos'][ dino_id ]['game_%'] = 0.9

                if bd_user['language_code'] == 'ru':
                    text2 = f"üéÆ | {e_text[1][0][0]}, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ {bd_user['dinos'][ dino_id ]['game_%']}% –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∏–≥—Ä—ã!"

                else:
                    text2 = f"üéÆ | {e_text[1][1][0]}, he gets a {bd_user['dinos'][ dino_id ]['game_%']}% penalty in enjoying the game!"

            if games[2] != games[0] and games[2] != games[1]:
                bd_user['dinos'][ dino_id ]['game_%'] = 1

                if bd_user['language_code'] == 'ru':
                    text2 = f'üéÆ | {e_text[2][0][0]}'

                else:
                    text2 = f"üéÆ | {e_text[2][1][0]}"


        bd_user['dinos'][ dino_id ]['game_time'] = time.time() + time_m
        users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

        if bd_user['language_code'] == 'ru':

            text = f'üéÆ | –ß–µ—Ä–µ–¥—É–π—Ç–µ –∏–≥—Ä—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞!'

        else:

            text = f"üéÆ | Alternate games to avoid a penalty!"

        bot.edit_message_text(text2, call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, text, parse_mode = 'html', reply_markup = functions.markup(bot, "games", user))

    elif call.data in ['dead_answer1', 'dead_answer2', 'dead_answer3', 'dead_answer4']:

        user = call.from_user
        bd_user = users.find_one({"userid": user.id})

        if bd_user['language_code'] == 'ru':
            text =  f"–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –≤ —á—ë—Ä–Ω–æ–º –æ–¥–µ—è–Ω–∏–∏.\n\n"
            text += f"–í—ã –≤–∏–¥–∏—Ç–µ, —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ —á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã –∏ –∫–∞–∫–æ–π-—Ç–æ —à—Ä–∞–º –Ω–∞ —â–µ–∫–µ, –Ω–æ –µ–≥–æ –≥–ª–∞–∑–∞ –Ω–µ –≤–∏–¥–Ω—ã –≤ —Ç–µ–Ω–∏ —à–ª—è–ø—ã.\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç { random.choice( ['–º–∏—Å—Ç–µ—Ä', '–¥–æ–∫—Ç–æ—Ä'] ) } { random.choice( ['–î–∂–µ–π–º—Å', '–†–æ–±–µ—Ä—Ç', '–í–∏–Ω—Å–µ–Ω—Ç', '–ê–ª—å–±–µ—Ä—Ç'] ) }, –∞ –≤–∞—Å...\n\n"
            text += f"*–í—ã:* - ... {user.first_name}, {user.first_name} {user.last_name}, —Ç–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ {user.first_name}, –¥–∞–≤–Ω–æ –≤—ã –≤ –Ω–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ? _—É–ª—ã–±–∞–µ—Ç—Å—è_\n\n"
            text += f"*–í—ã:* - ...–ß—Ç–æ? –ë–∏–∑–Ω–µ—Å? –û —á–µ–º, –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?!\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü–æ–Ω—è—Ç–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ... –¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º. _–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤ –±–ª–æ–∫–Ω–æ—Ç_\n\n"
            text += f"*–í—ã:* - ...\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –î–∞–≤–∞–π—Ç–µ –±–ª–∏–∂–µ –∫ –¥–µ–ª—É, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫–ª—é—á–∏—Ç—å —Å –Ω–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –º—ã –ø–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º.\n\n"
            text += f"*–í—ã:* - –Ø—è—è, —è –Ω–µ –∑–Ω–∞—é...\n\n"
            text += f"*–í—ã:* - "
            b1 = ['‚ùì | –ö—Ç–æ –≤—ã —Ç–∞–∫–æ–π?', '‚ùì | –≠—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ?', '‚ùì | –ö—Ç–æ "–º—ã"?', 'üß© | –£ –º–µ–Ω—è –∂–µ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞, —Ç–∞–∫?']

        else:
            text = f"A man in a black robe approaches you.\n\n"
            text += f"You can see that the man has black hair and some kind of scar on his cheek, but his eyes are not visible in the shadow of the hat.\n\n"
            text += f"*Personality:* - Hello, my name is { random.choice(['mister', 'doctor'] ) } { random.choice( ['James', 'Robert', 'Vincent', 'Albert'] ) }, and you...\n\n"
            text += f"*You are:* - ... {user.first_name}, {user.first_name} {user.last_name}, that's my name\n\n"
            text += f"*Personality:* - Fine {user.first_name}, how long have you been in our business? _ulybaet_\n\n"
            text += f"*You are:* - ...What? Business? What are you talking about?!\n\n"
            text += f"*Personality:* - I see, I see... So we'll write it down. _ Writes something in notepad_\n\n"
            text += f"*You are:* - ...\n\n"
            text += f"*Personality:* - Let's get down to business, we offer you to sign a contract with us, we get your coins and resources, you get an egg with a dinosaur.\n\n"
            text += f"*You:* - I know, I don't know...\n\n"
            text += f"*You:* - "
            b1 = ['‚ùì | Who are you?', '‚ùì | Is it legal?', '‚ùì | Who are "we"?', "üß© | I don't have a choice, right?"]

        if call.data == 'dead_answer1':
            text += b1[0]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ö—Ç–æ —è —Ç–∞–∫–æ–π –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –≤–∞–∂–Ω–æ –ª–∏—à—å —Ç–æ... —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –¥–∞—Ç—å...\n–í–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f'\n\n*Personality:* - Who I am does not matter, it only matters... what can I give you...\nHere is the contract, sign it'

        if call.data == 'dead_answer2':
            text += b1[1]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –•–∞, —Ö–∞, —Ö–∞, –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å...\n–í–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f'\n\n*Personality:* - Ha, ha, ha, how to say it...\nHere is the contract, sign it'

        if call.data == 'dead_answer3':
            text += b1[2]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–∞–∂–Ω–æ –ª–∏—à—å —Ç–æ... —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –¥–∞—Ç—å...\n–í–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f"\n\n*Personality:* - It doesn't matter, it just matters... what can I give you...\nHere is the contract, sign it"

        if call.data == 'dead_answer4':
            text += b1[3]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –í—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø—Ä–∞–≤—ã, –≤–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f'\n\n*Personality:* - You are absolutely right, here is the contract, sign it'

        mn = bd_user['coins'] / 100 * 85
        markup_inline = types.InlineKeyboardMarkup()

        if bd_user['language_code'] == 'ru':
            text += "\n\n\n"
            text += "     *–ö–æ–Ω—Ç—Ä–∞–∫—Ç*\n"
            text += f"{user.first_name} –æ—Ç–¥–∞—ë—Ç: –≤–µ—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, {int(mn)} –º–æ–Ω–µ—Ç\n"
            text += f"{user.first_name} –ø–æ–ª—É—á–∞–µ—Ç: 1—Ö —è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞"
            markup_inline.add( types.InlineKeyboardButton(text= '‚úí –ü–æ–¥–ø–∏—Å–∞—Ç—å', callback_data = 'dead_restart') )
        else:
            text += "\n\n\n"
            text += "     *Contract*\n"
            text += f"{user.first_name} gives: all inventory, {int(mn)} coins\n"
            text += f"{user.first_name} receives: 1x dinosaur egg"
            markup_inline.add( types.InlineKeyboardButton(text= '‚úí Sign', callback_data = 'dead_restart') )

        bd_user['notifications']['ans_dead'] = int(mn)
        users.update_one( {"userid": user.id}, {"$set": {'notifications': bd_user['notifications']}} )

        try:
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup = markup_inline, parse_mode = 'Markdown')
        except:
            bot.send_message(call.message.chat.id, text, reply_markup = markup_inline, parse_mode = 'Markdown')

    elif call.data == 'dead_restart':
        user = call.from_user
        bd_user = users.find_one({"userid": user.id})

        if bd_user != None and len(bd_user['dinos']) == 0 and functions.inv_egg(bd_user) == False and bd_user['lvl'][0] < 5:
            egg_n = str(random.choice(list(json_f['data']['egg'])))

            bd_user['dinos'][ functions.user_dino_pn(bd_user) ] = {'status': 'incubation', 'incubation_time': time.time() + 30 * 60, 'egg_id': egg_n}
            bd_user['coins'] -= int(bd_user['notifications']['ans_dead'])
            try:
                del bd_user['notifications']['ans_dead']
                del bd_user['notifications']['1']
            except:
                pass

            users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )
            users.update_one( {"userid": user.id}, {"$set": {'notifications': bd_user['notifications']}} )
            users.update_one( {"userid": user.id}, {"$set": {'coins': bd_user['coins']}} )
            users.update_one( {"userid": user.id}, {"$set": {'inventory': [] }} )

            bd_user = users.find_one({"userid": user.id})


            if bd_user['language_code'] == 'ru':
                text = '‚úí | –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–∏–Ω–æ–∑–∞–≤—Ä –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è.'
            else:
                text = '‚úí | The contract is signed, the dinosaur is incubating.'

            bot.send_message(user.id, text, parse_mode = 'Markdown', reply_markup = functions.markup(bot, 1, user))

    elif call.data[:5] == 'item_':

        data = functions.des_qr(str(call.data[5:]))
        it_id = str(data['id'])
        list_inv = list(bd_user['inventory'])
        list_inv_id = []
        check_n = 0
        dino_id = 1
        col = 1

        for i in list_inv: list_inv_id.append(i['item_id'])

        def n_c_f():
            nonlocal check_n
            check_n += 1

        def re_item():
            nonlocal check_n, data_item

            if check_n == 1:

                if data_item['type'] == '+heal':
                    ans_dino()

                elif data_item['type'] == '+unv':
                    ans_dino()

                elif data_item['type'] == 'recipe':
                    ans_col()

                elif data_item['type'] == '+eat':
                    ans_dino()

                elif data_item['type'] in ['game_ac', "journey_ac", "hunt_ac", "unv_ac"]:
                    ans_dino()

                elif data_item['type'] == 'egg':
                    use_item()

            elif check_n == 2:

                if data_item['type'] == '+heal':
                    ans_col()

                if data_item['type'] == '+unv':
                    ans_col()

                elif data_item['type'] == 'recipe':
                    use_item()

                elif data_item['type'] == '+eat':
                    ans_col()

                elif data_item['type'] in ['game_ac', "journey_ac", "hunt_ac", "unv_ac"]:
                    use_item()

            elif check_n == 3:

                if data_item['type'] == '+heal':
                    use_item()

                elif data_item['type'] == '+unv':
                    use_item()

                elif data_item['type'] == '+eat':
                    use_item()

        def ans_dino():
            global dino_id

            def dino_reg(message, dino_dict):
                global dino_id
                if message.text in dino_dict.keys():
                    dino_id = dino_dict[message.text][1]
                    n_c_f(), re_item()

                else:
                    bot.send_message(user.id, f'‚ùå', reply_markup = functions.markup(bot, functions.last_markup(bd_user, alternative = 'profile'), bd_user ))

            n_dp, dp_a = functions.dino_pre_answer(bot, call, 'noall')

            if n_dp == 1: #–Ω–µ—Ç –¥–∏–Ω–æ

                if functions.inv_egg(bd_user) == True and data_item['type'] == 'egg':
                    n_c_f(), re_item()

                else:
                    bot.send_message(user.id, f'‚ùå', reply_markup = functions.markup(bot, functions.last_markup(bd_user, alternative = 1), bd_user ))

            if n_dp == 2: # 1 –¥–∏–Ω–æ
                dino_dict = [dp_a, list(bd_user['dinos'].keys())[0] ]
                dino_id = list(bd_user['dinos'].keys())[0]
                n_c_f(), re_item()

            if n_dp == 3: # 2 –∏ –±–æ–ª–µ–µ
                rmk = dp_a[0]
                text = dp_a[1]
                dino_dict = dp_a[2]

                msg = bot.send_message(user.id, text, reply_markup = rmk)
                bot.register_next_step_handler(msg, dino_reg, dino_dict)

        def use_item():
            global col, dino_id
            fr_user = users.find_one({"userid": user.id})

            use_st = True

            if data_item['type'] == '+heal':

                if bd_user['language_code'] == 'ru':
                    text = f'‚ù§ | –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {data_item["act"] * col}% –∑–¥–æ—Ä–æ–≤—å—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞!'
                else:
                    text = f"‚ù§ | You have restored {data_item['act'] * col}% of the dinosaur's health!"

                users.update_one( {"userid": user.id}, {"$inc": {f'dinos.{dino_id}.stats.heal': data_item['act'] * col }} )

            elif data_item['type'] == '+unv':

                if bd_user['language_code'] == 'ru':
                    text = f'‚ö° | –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {data_item["act"] * col}% —ç–Ω–µ—Ä–≥–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞!'
                else:
                    text = f"‚ö° | You have recovered {data_item['act'] * col}% of the dinosaur's energy!"

                users.update_one( {"userid": user.id}, {"$inc": {f'dinos.{dino_id}.stats.unv': data_item['act'] * col }} )

            elif data_item['type'] == 'recipe':
                ok = True

                for _ in range(col):
                    for i in data_item['materials']:
                        if i in list_inv_id:
                            try:
                                fr_user['inventory'].remove( fr_user['inventory'][list_inv_id.index(i)] )
                            except:
                                ok = False
                                break
                        else:
                            ok = False
                            break

                if ok == True:

                    if bd_user['language_code'] == 'ru':
                        text = f'üç° | –ü—Ä–µ–¥–º–µ—Ç {data_item["nameru"]} x{col} —Å–æ–∑–¥–∞–Ω!'
                    else:
                        text = f"üç° | The item {data_item['nameen']} x{col} is created!"

                    fr_user = users.find_one({"userid": user.id})

                    for _ in range(col):
                        for i in data_item['materials']:
                            if i not in data_item['create']:
                                lst_ind = list_inv_id.index(i)

                                fr_user['inventory'].remove( fr_user['inventory'][lst_ind] )

                    res = users.update_one( {"userid": user.id}, {"$set": {'inventory': fr_user['inventory'] }} )

                    for i in data_item['create']:
                        if i not in data_item['materials']:
                            ok = functions.add_item_to_user(fr_user, i, col)

                else:

                    if bd_user['language_code'] == 'ru':
                        text = f'‚ùó | –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!'
                    else:
                        text = f"‚ùó | Materials are not enough!"

                    use_st = False

            elif data_item['type'] == '+eat':
                d_dino = json_f['elements'][ str(bd_user['dinos'][dino_id]['dino_id']) ]

                if bd_user['language_code'] == 'ru':
                    if data_item['class'] == 'ALL':

                        bd_user['dinos'][ dino_id ]['stats']['eat'] += data_item['act'] * col

                        if bd_user['dinos'][ dino_id ]['stats']['eat'] > 100:
                            bd_user['dinos'][ dino_id ]['stats']['eat'] = 100

                        text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {data_item['nameru']}!\n–î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç –Ω–∞ {bd_user['dinos'][ dino_id ]['stats']['eat']}%"


                    elif data_item['class'] == d_dino['class']:
                        bd_user['dinos'][ dino_id ]['stats']['eat'] += data_item['act'] * col

                        if bd_user['dinos'][ dino_id ]['stats']['eat'] > 100:
                            bd_user['dinos'][ dino_id ]['stats']['eat'] = 100

                        text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {data_item['nameru']}!\n–î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç –Ω–∞ {bd_user['dinos'][ dino_id ]['stats']['eat']}%"


                    else:
                        eatr = random.randint( 0, int(data_item['act'] / 2) )
                        moodr = random.randint( 1, 10 )
                        text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ –ø–æ –≤–∫—É—Å—É {data_item['nameru']}, –æ–Ω —Ç–µ—Ä—è–µ—Ç {eatr}% —Å—ã—Ç–æ—Å—Ç–∏ –∏ {moodr}% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!"

                        bd_user['dinos'][ dino_id ]['stats']['eat'] -= eatr
                        bd_user['dinos'][ dino_id ]['stats']['mood'] -= moodr

                else:
                    if data_item['class'] == 'ALL':

                        bd_user['dinos'][ dino_id ]['stats']['eat'] += data_item['act'] * col

                        if bd_user['dinos'][ dino_id ]['stats']['eat'] > 100:
                            bd_user['dinos'][ dino_id ]['stats']['eat'] = 100

                        text = f"üçï | The dinosaur ate it with pleasure {data_item['nameen']}!\nThe dinosaur is fed up on {bd_user['dinos'][ dino_id ]['stats']['eat']}%"

                    elif data_item['class'] == d_dino['class']:

                        bd_user['dinos'][ dino_id ]['stats']['eat'] += data_item['act'] * col

                        if bd_user['dinos'][ dino_id ]['stats']['eat'] > 100:
                            bd_user['dinos'][ dino_id ]['stats']['eat'] = 100

                        text = f"üçï | The dinosaur ate it with pleasure {data_item['nameen']}!\nThe dinosaur is fed up on {bd_user['dinos'][ dino_id ]['stats']['eat']}%"

                    else:
                        eatr = random.randint( 0, int(data_item['act'] / 2) )
                        moodr = random.randint( 1, 10 )
                        text = f"üçï | The dinosaur doesn't like {data_item['nameen']}, it loses {eatr}% satiety and {mood}% mood!"

                        bd_user['dinos'][ dino_id ]['stats']['eat'] -= eatr
                        bd_user['dinos'][ dino_id ]['stats']['mood'] -= moodr

                users.update_one( {"userid": bd_user['userid']}, {"$set": {f'dinos.{dino_id}': bd_user['dinos'][ dino_id ] }} )

            elif data_item['type'] in ['game_ac', "journey_ac", "hunt_ac", "unv_ac"]:
                ac_type = data_item['type'][:-3]

                if bd_user['activ_items'][ dino_id ][ac_type] != None:
                    bd_user['inventory'].append(bd_user['activ_items'][ dino_id ][ac_type])

                bd_user['activ_items'][ dino_id ][ac_type] = user_item

                if bd_user['language_code'] == 'ru':
                    text = "üé¥ | –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
                else:
                    text = "üé¥ | The active item is installed!"

                users.update_one( {"userid": bd_user['userid']}, {"$set": {'activ_items': bd_user['activ_items'] }} )

            elif data_item['type'] == 'egg':

                if bd_user['lvl'][0] < 20 and len(bd_user['dinos']) != 0:

                    if bd_user['language_code'] == 'ru':
                        text = f'üîî | –í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–∞–Ω–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è!'
                    else:
                        text = f"üîî | This technology is not available to you!"

                    use_st = False

                else:
                    if int(bd_user['lvl'][0] / 20 + 1) > len(bd_user['dinos']):

                        if data_item['time_tag'] == 'h':
                            inc_time = time.time() + data_item['incub_time'] * 3600

                        if data_item['time_tag'] == 'm':
                            inc_time = time.time() + data_item['incub_time'] * 60

                        if data_item['time_tag'] == 's':
                            inc_time = time.time() + data_item['incub_time']

                        egg_n = str(random.choice(list(json_f['data']['egg'])))

                        bd_user['dinos'][ functions.user_dino_pn(bd_user) ] = {'status': 'incubation', 'incubation_time': inc_time, 'egg_id': egg_n, 'quality': data_item['inc_type']}

                        users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )


                        if bd_user['language_code'] == 'ru':
                            text = f'ü•ö | –Ø–π—Ü–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∏–Ω–∫—É–±–∞—Ü–∏—é!'
                        else:
                            text = f"ü•ö | The egg has been sent for incubation!"

                    else:
                        if bd_user['language_code'] == 'ru':
                            text = f"üîî | –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ {int(bd_user['lvl'][0] / 20)} –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤!"
                        else:
                            text = f"üîî | Only {int(bd_user['lvl'][0] / 20)} dinosaurs are available to you!"

                        use_st = False

            else:

                if bd_user['language_code'] == 'ru':
                    text = f'‚ùó | –î–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!'
                else:
                    text = f"‚ùó | This item is not yet available for use!"

                use_st = False


            if '+mood' in data_item.keys():
                users.update_one( {"userid": user.id}, {"$inc": {f'dinos.{dino_id}.stats.mood': data_item['+mood'] * col }} )

            if '-mood' in data_item.keys():
                users.update_one( {"userid": user.id}, {"$inc": {f'dinos.{dino_id}.stats.mood': (data_item['-mood'] * -1) * col }} )

            if '-eat' in data_item.keys():
                users.update_one( {"userid": user.id}, {"$inc": {f'dinos.{dino_id}.stats.eat': (data_item['-eat'] * -1) * col }} )

            if 'abilities' in user_item.keys():
                if 'uses' in user_item['abilities'].keys():
                    if use_st == True:

                        if user_item['abilities']['uses'] != -100:

                            s_col = user_item['abilities']['uses'] - col

                            if s_col > 0:
                                users.update_one( {"userid": user.id}, {"$set": {f'inventory.{fr_user["inventory"].index(user_item)}.abilities.uses': user_item['abilities']['uses'] - col}} )

                            else:
                                fr_user['inventory'].remove(user_item)
                                users.update_one( {"userid": user.id}, {"$set": {'inventory': fr_user['inventory'] }} )

            else:

                if use_st == True:
                    try:
                        for _ in range(col):
                            fr_user['inventory'].remove(user_item)
                    except:
                        fr_user['inventory'].remove(user_item)

                    users.update_one( {"userid": user.id}, {"$set": {'inventory': fr_user['inventory'] }} )


            bot.send_message(user.id, text, parse_mode = 'Markdown', reply_markup = functions.markup(bot, functions.last_markup(bd_user, alternative = 'profile'), bd_user ))

        def ent_col(message, col_l, mx_col):
            global col

            if message.text in ['‚Ü©Ô∏è –ù–∞–∑–∞–¥', '‚Ü©Ô∏è Back']:

                if bd_user['language_code'] == 'ru':
                    text = f"üéà | –û—Ç–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
                else:
                    text = f"üéà | Cancellation of use!"

                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, functions.last_markup(bd_user, alternative = 'profile'), bd_user ))
                return

            try:
                col = int(message.text)
            except:
                if message.text in col_l[0]:
                    col = col_l[1][ col_l[0].index(message.text) ]

                else:

                    if bd_user['language_code'] == 'ru':
                        text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
                    else:
                        text = f"Enter the correct number!"

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, functions.last_markup(bd_user, alternative = 'profile'), bd_user ))
                    return

            if col > mx_col:

                if bd_user['language_code'] == 'ru':
                    text = f"–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
                else:
                    text = f"You don't have that many items in your inventory!"

                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, functions.last_markup(bd_user, alternative = 'profile'), bd_user ))
                return

            else:
                n_c_f(), re_item()

        def ans_col():

            col = 1
            mx_col = 0

            if 'abilities' in user_item.keys() and 'uses' in user_item['abilities'].keys():
                mx_col = user_item['abilities']['uses']

            else:
                mx_col = list_inv.count(user_item)

            if mx_col == 1:
                call.message.text = '1'
                ent_col(call.message, [[], []], mx_col)

            else:

                if bd_user['language_code'] == 'ru':
                    text_col = f"üïπ | –í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ >"
                else:
                    text_col = f"üïπ | Enter how much you want to use or select from the list >"

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                bt_1 = f"x1"
                bt_2 = f"x{int(mx_col / 2)}"
                bt_3 = f"x{mx_col}"

                col_l = [[], [1, int(mx_col / 2), mx_col]]

                col_l[0].append(bt_1), col_l[0].append(bt_2), col_l[0].append(bt_3)

                if mx_col == 1:

                    rmk.add(bt_1)

                elif mx_col >= 4:

                    rmk.add(bt_1, bt_2, bt_3)

                elif mx_col > 1:

                    rmk.add(bt_1, bt_3)

                if bd_user['language_code'] == 'ru':
                    rmk.add('‚Ü© –ù–∞–∑–∞–¥')
                else:
                    rmk.add('‚Ü© Back')

                msg = bot.send_message(user.id, text_col, reply_markup = rmk)
                bot.register_next_step_handler(msg, ent_col, col_l, mx_col)

        if it_id in list_inv_id:
            data_item = items_f['items'][it_id]

            user_item = None
            if list(set(['abilities']) & set(list(data_item.keys()))) != []:

                abl_it = {}
                for i in data.keys(): abl_it[i] = data[i]
                del abl_it['id']

                for it in list_inv:
                    if user_item == None:
                        if str(it['item_id']) == str(it_id):
                            if 'abilities' in it.keys():
                                for key_c in data.keys():
                                    if key_c != 'id':
                                        if it['abilities'] == abl_it:
                                            user_item = it
                                            break

            else:
                user_item = list_inv[list_inv_id.index(it_id)]

            if user_item == None:

                if bd_user['language_code'] == 'ru':
                    text = f'‚ùå | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!'
                else:
                    text = f"‚ùå | Item not found in inventory!"

                bot.send_message(user.id, text, parse_mode = 'Markdown')

            if user_item != None:
                n_c_f(), re_item()



    elif call.data[:12] == 'remove_item_':
        data = functions.des_qr(str(call.data[12:]))

        it_id = str(data['id'])
        list_inv = list(bd_user['inventory'])
        list_inv_id = []
        for i in list_inv: list_inv_id.append(i['item_id'])

        if it_id in list_inv_id:
            data_item = items_f['items'][it_id]

            user_item = None
            if list(set(['abilities']) & set(list(data_item.keys()))) != []:

                abl_it = {}
                for i in data.keys(): abl_it[i] = data[i]
                del abl_it['id']

                for it in list_inv:
                    if user_item == None:
                        if str(it['item_id']) == str(it_id):
                            if 'abilities' in it.keys():
                                for key_c in data.keys():
                                    if key_c != 'id':
                                        if it['abilities'] == abl_it:
                                            user_item = it
                                            break

            else:
                user_item = list_inv[list_inv_id.index(it_id)]

            if user_item == None:

                if bd_user['language_code'] == 'ru':
                    text = f'‚ùå | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!'
                else:
                    text = f"‚ùå | Item not found in inventory!"

                bot.send_message(user.id, text, parse_mode = 'Markdown')

            if user_item != None:

                if bd_user['language_code'] == 'ru':
                    text = 'üóë | –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?'
                    in_text = ['‚úî –£–¥–∞–ª–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']
                else:
                    text = 'üóë | Are you sure you want to delete this item?'
                    in_text = ['‚úî Delete', '‚ùå Cancel']

                markup_inline = types.InlineKeyboardMarkup()
                markup_inline.add( types.InlineKeyboardButton( text = in_text[0], callback_data = f"remove_{functions.qr_item_code(user_item)}"),  types.InlineKeyboardButton( text = in_text[1], callback_data = f"cancel_remove") )

                bot.send_message(user.id, text, reply_markup = markup_inline)

    elif call.data[:7] == 'remove_':
        data = functions.des_qr(str(call.data[7:]))

        it_id = str(data['id'])
        list_inv = list(bd_user['inventory'])
        list_inv_id = []
        for i in list_inv: list_inv_id.append(i['item_id'])

        if it_id in list_inv_id:
            data_item = items_f['items'][it_id]

            user_item = None
            if list(set(['abilities']) & set(list(data_item.keys()))) != []:

                abl_it = {}
                for i in data.keys(): abl_it[i] = data[i]
                del abl_it['id']

                for it in list_inv:
                    if user_item == None:
                        if str(it['item_id']) == str(it_id):
                            if 'abilities' in it.keys():
                                for key_c in data.keys():
                                    if key_c != 'id':
                                        if it['abilities'] == abl_it:
                                            user_item = it
                                            break

            else:
                user_item = list_inv[list_inv_id.index(it_id)]

            if user_item == None:

                if bd_user['language_code'] == 'ru':
                    text = f'‚ùå | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!'
                else:
                    text = f"‚ùå | Item not found in inventory!"

                bot.send_message(user.id, text, parse_mode = 'Markdown')

            if user_item != None:
                col = 1
                mx_col = 0
                for item_c in bd_user['inventory']:
                    if item_c == user_item:
                        mx_col += 1

                bot.delete_message(user.id, call.message.message_id)

                if bd_user['language_code'] == 'ru':
                    text_col = f"üóë | –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ >"
                else:
                    text_col = f"üóë | Enter how many items you want to remove or select from the list >"

                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                bt_1 = f"x1"
                bt_2 = f"x{int(mx_col / 2)}"
                bt_3 = f"x{mx_col}"

                col_l = [[], [1, int(mx_col / 2), mx_col]]

                col_l[0].append(bt_1), col_l[0].append(bt_2), col_l[0].append(bt_3)

                if mx_col == 1:

                    rmk.add(bt_1)

                elif mx_col >= 4:

                    rmk.add(bt_1, bt_2, bt_3)

                elif mx_col > 1:

                    rmk.add(bt_1, bt_3)

                if bd_user['language_code'] == 'ru':
                    rmk.add('‚Ü© –ù–∞–∑–∞–¥')
                else:
                    rmk.add('‚Ü© Back')


                def tr_complete(message, bd_user, user_item, mx_col, col_l):

                    if message.text in ['‚Ü© Back', '‚Ü© –ù–∞–∑–∞–¥']:

                        if bd_user['language_code'] == 'ru':
                            text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
                        else:
                            text = "üë• | Return to the friends menu!"

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                        return '12'

                    try:
                        col = int(message.text)
                    except:
                        if message.text in col_l[0]:
                            col = col_l[1][ col_l[0].index(message.text) ]

                        else:

                            if bd_user['language_code'] == 'ru':
                                text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!"
                            else:
                                text = f"Enter the correct number!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                            return

                    if col > mx_col:

                        if bd_user['language_code'] == 'ru':
                            text = f"–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
                        else:
                            text = f"You don't have that many items in your inventory!"

                        bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'actions', user))
                        return

                    for i in range(col):
                        bd_user['inventory'].remove(user_item)

                    users.update_one( {"userid": user.id}, {"$set": {f'inventory': bd_user['inventory'] }} )

                    if bd_user['language_code'] == 'ru':
                        text = 'üóë | –ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª—ë–Ω.'
                    else:
                        text = 'üóë | The item has been deleted.'

                    bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'profile', user))

                msg = bot.send_message(user.id, text_col, reply_markup = rmk)
                bot.register_next_step_handler(msg, tr_complete, bd_user, user_item, mx_col, col_l)


    elif call.data == "cancel_remove":
        bot.delete_message(user.id, call.message.message_id)

    elif call.data[:9] == 'exchange_':

        data = functions.des_qr(str(call.data[9:]))

        it_id = str(data['id'])
        list_inv = list(bd_user['inventory'])
        list_inv_id = []
        for i in list_inv: list_inv_id.append(i['item_id'])

        if it_id in list_inv_id:
            data_item = items_f['items'][it_id]

            user_item = None
            if list(set(['abilities']) & set(list(data_item.keys()))) != []:

                abl_it = {}
                for i in data.keys(): abl_it[i] = data[i]
                del abl_it['id']

                for it in list_inv:
                    if user_item == None:
                        if str(it['item_id']) == str(it_id):
                            if 'abilities' in it.keys():
                                for key_c in data.keys():
                                    if key_c != 'id':
                                        if it['abilities'] == abl_it:
                                            user_item = it
                                            break

            else:
                user_item = list_inv[list_inv_id.index(it_id)]

            if user_item == None:

                if bd_user['language_code'] == 'ru':
                    text = f'‚ùå | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!'
                else:
                    text = f"‚ùå | Item not found in inventory!"

                bot.send_message(user.id, text, parse_mode = 'Markdown')

            if user_item != None:

                functions.exchange(bot, call.message, user_item, bd_user)

    elif call.data[:11] == 'market_buy_':
        m_call = call.data.split()

        market_ = market.find_one({"id": 1})
        us_id = m_call[0][11:]
        key_i = m_call[1]

        if str(us_id) in market_['products'].keys():
            ma_d = market_['products'][str(us_id)]['products']

            if str(key_i) in ma_d.keys():
                mmd = market_['products'][str(us_id)]['products'][str(key_i)]

                if mmd['price'] <= bd_user['coins']:

                    def reg0(message, mmd, us_id, key_i):

                        def reg(message, mmd, us_id, key_i):

                            try:
                                number = int(message.text)
                            except:

                                if bd_user['language_code'] == 'ru':
                                    text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                                else:
                                    text = "üõí | Return to the market menu!"

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                return

                            if number <= 0 or number > mmd['col'][1] - mmd['col'][0]:

                                if bd_user['language_code'] == 'ru':
                                    text = "üõí | –ù–∞ —Ä—ã–Ω–∫–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞!"
                                else:
                                    text = "üõí | There is no such amount of item on the market!"

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                return

                            mr_user = users.find_one({"userid": us_id})

                            if mmd['price'] * number > bd_user['coins']:
                                if bd_user['language_code'] == 'ru':
                                    text = "üõí | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!"
                                else:
                                    text = "üõí | You don't have that many coins!"

                                bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                                return

                            for i in range(number):
                                bd_user['inventory'].append(mmd['item'])

                            if mr_user != None:
                                users.update_one( {"userid": us_id}, {"$inc": {'coins': mmd['price'] * number }} )

                            market_['products'][str(us_id)]['products'][str(key_i)]['col'][0] += number

                            if market_['products'][str(us_id)]['products'][str(key_i)]['col'][0] >= market_['products'][str(us_id)]['products'][str(key_i)]['col'][1]:
                                del market_['products'][str(us_id)]['products'][str(key_i)]


                            market.update_one( {"id": 1}, {"$set": {'products': market_['products'] }} )
                            users.update_one( {"userid": user.id}, {"$set": {'inventory': bd_user['inventory']}} )
                            users.update_one( {"userid": user.id}, {"$inc": {'coins': (mmd['price'] * number) * -1 }} )

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –¢–æ–≤–∞—Ä –±—ã–ª –∫—É–ø–ª–µ–Ω!"
                            else:
                                text = "üõí | The product was purchased!"

                            bot.send_message(call.message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))

                        if message.text in [f"Yes, purchase {items_f['items'][mmd['item']['item_id']]['nameru']}", f"–î–∞, –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ {items_f['items'][mmd['item']['item_id']]['nameru']}"]:
                            pass

                        elif message.text in [ 'üõí –†—ã–Ω–æ–∫', 'üõí Market' ]:

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                            else:
                                text = "üõí | Return to the market menu!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                            return

                        else:

                            if bd_user['language_code'] == 'ru':
                                text = "üõí | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä—ã–Ω–∫–∞!"
                            else:
                                text = "üõí | Return to the market menu!"

                            bot.send_message(message.chat.id, text, reply_markup = functions.markup(bot, 'market', user))
                            return


                        if bd_user['language_code'] == 'ru':
                            text = f"üõí | –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å >\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {1} –¥–æ {mmd['col'][1] - mmd['col'][0] }"
                            ans = ['üõí –†—ã–Ω–æ–∫']
                        else:
                            text = f"üõí | Specify how much you want to buy >\enter a number from {1} to {mmd['col'][1] - mmd['col'][0] }"
                            ans = ['üõí Market']

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 1)
                        rmk.add(ans[0])

                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk, parse_mode = 'Markdown')
                        bot.register_next_step_handler(msg, reg, mmd, us_id, key_i)

                    if bd_user['language_code'] == 'ru':
                        text = f"üõí | –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å {items_f['items'][mmd['item']['item_id']]['nameru']}?"
                        ans = [f"–î–∞, –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ {items_f['items'][mmd['item']['item_id']]['nameru']}", 'üõí –†—ã–Ω–æ–∫']
                    else:
                        text = f"üõí | Are you sure you want to buy {items_f['items'][mmd['item']['item_id']]['nameen']}?"
                        ans = [f"Yes, purchase {items_f['items'][mmd['item']['item_id']]['nameru']}", 'üõí Market']

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 1)
                    rmk.add(ans[0], ans[1])

                    msg = bot.send_message(call.message.chat.id, text, reply_markup = rmk, parse_mode = 'Markdown')
                    bot.register_next_step_handler(msg, reg0, mmd, us_id, key_i)

                else:
                    if bd_user['language_code'] == 'ru':
                        text = "üõí | –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
                    else:
                        text = "üõí | You don't have enough coins to buy!"

                    bot.send_message(call.message.chat.id, text)

            else:
                if bd_user['language_code'] == 'ru':
                    text = "üõí | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –±—ã–ª –∫—É–ø–ª–µ–Ω."
                else:
                    text = "üõí | The item was not found on the market, it may have already been purchased."

                bot.send_message(call.message.chat.id, text)

        else:
            if bd_user['language_code'] == 'ru':
                text = "üõí | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –±—ã–ª –∫—É–ø–ª–µ–Ω."
            else:
                text = "üõí | The item was not found on the market, it may have already been purchased."

            bot.send_message(call.message.chat.id, text)

    elif call.data[:7] == 'market_':
        m_call = call.data.split()

        market_ = market.find_one({"id": 1})
        us_id = m_call[0][7:]
        key_i = m_call[1]

        if str(us_id) in market_['products'].keys():
            ma_d = market_['products'][str(us_id)]['products']

            if str(key_i) in ma_d.keys():
                mmd = market_['products'][str(us_id)]['products'][str(key_i)]

            else:
                if bd_user['language_code'] == 'ru':
                    text = "üõí | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –±—ã–ª –∫—É–ø–ª–µ–Ω."
                else:
                    text = "üõí | The item was not found on the market, it may have already been purchased."

                bot.send_message(call.message.chat.id, text)

        else:
            if bd_user['language_code'] == 'ru':
                text = "üõí | –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –±—ã–ª –∫—É–ø–ª–µ–Ω."
            else:
                text = "üõí | The item was not found on the market, it may have already been purchased."

            bot.send_message(call.message.chat.id, text)


    elif call.data[:9] == 'iteminfo_':

        item = functions.get_dict_item(call.data[9:])
        text= functions.item_info(item, bd_user['language_code'])

        bot.send_message(call.message.chat.id, text, parse_mode = 'Markdown')

    elif call.data == 'inventory':

        functions.user_inventory(bot, user, call.message)

    elif call.data == 'requests':

        functions.user_requests(bot, user, call.message)

    elif call.data == 'send_request':
        fr_user = call.message.reply_to_message.from_user

        if bd_user != None:
            two_user = users.find_one({"userid": fr_user.id })
            if two_user != None:
                if bd_user['userid'] != two_user['userid']:

                    if bd_user['userid'] not in two_user['friends']['requests'] and bd_user['userid'] not in two_user['friends']['friends_list'] and two_user['userid'] not in bd_user['friends']['requests']:

                        two_user['friends']['requests'].append(bd_user['userid'])
                        users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                        if bd_user['language_code'] == 'ru':
                            text = f"üéÄ | {user.first_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={fr_user.id}'>üåÄ {fr_user.first_name}</a>"
                        else:
                            text = f"üéÄ | {user.first_name} sent a friend request to the user <a href='tg://user?id={fr_user.id }'>üåÄ {fr_user.first_name}</a>"

                        bot.reply_to(call.message, text, parse_mode = 'HTML')

    elif call.data[:18] == 'open_dino_profile_':
        did = call.data[18:]
        bd_dino = bd_user['dinos'][did]
        functions.p_profile(bot, call.message, bd_dino, user, bd_user, did)

    else:
        print(call.data, 'call.data')


print(f'–ë–æ—Ç {bot.get_me().first_name} –∑–∞–ø—É—â–µ–Ω!')
if bot.get_me().first_name == 'DinoGochi' or False:
    main_checks.start() # –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    thr_notif.start() # –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    min10_thr.start() # –ø—è—Ç–∏-–º–∏–Ω—É—Ç–Ω—ã–π —á–µ–∫

bot.infinity_polling()
