import telebot
from telebot import types
import config
import random
import json
import pymongo
from PIL import Image, ImageFont, ImageDraw, ImageOps, ImageSequence, ImageFilter
import io
from io import BytesIO
from functions import functions
import time
import os
import threading
import sys
from memory_profiler import memory_usage
import pprint


bot = telebot.TeleBot(config.TOKEN)

client = pymongo.MongoClient(config.CLUSTER_TOKEN)
users = client.bot.users

with open('items.json', encoding='utf-8') as f:
    items_f = json.load(f)

with open('dino_data.json', encoding='utf-8') as f:
    json_f = json.load(f)

def dino_pre_answer(message):
    id_dino = {}

    user = message.from_user
    bd_user = users.find_one({"userid": user.id})

    if bd_user == None:
        return 1, None

    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)

    if len(bd_user['dinos'].keys()) == 0:
        return 1, None

    elif len(bd_user['dinos'].keys()) == 1:
        return 2, bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]

    else:
        for dii in bd_user['dinos']:
            rmk.add( f"{dii}# {bd_user['dinos'][dii]['name']}" )
            id_dino[f"{dii}# {bd_user['dinos'][dii]['name']}"] = [bd_user['dinos'][dii], dii]

        if bd_user['language_code'] == 'ru':
            rmk.add('‚Ü™ –ù–∞–∑–∞–¥')
            text = 'ü¶ñ | –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
        else:
            rmk.add('‚Ü™ Back')
            text = 'ü¶ñ | Choose a dinosaur >'

        return 3, [rmk, text, id_dino]


def user_dino_pn(user):
    if len(user['dinos'].keys()) == 0:
        return '1'
    else:
        id_list = []
        for i in user['dinos'].keys():
            try:
                id_list.append(int(i))
            except:
                pass
        return str(max(id_list) + 1)

def random_dino(user, dino_id_remove):
    r_q = random.randint(1, 10000)
    if r_q in list(range(1, 5001)):
        quality = 'com'
    elif r_q in list(range(5001, 7501)):
        quality = 'unc'
    elif r_q in list(range(7501, 9001)):
        quality = 'rar'
    elif r_q in list(range(9001, 9801)):
        quality = 'myt'
    else:
        quality = 'leg'

    dino_id = None

    while dino_id == None:
        p_var = random.choice(json_f['data']['dino'])
        dino = json_f['elements'][str(p_var)]
        if dino['image'][5:8] == quality:
            dino_id = p_var

    dino = json_f['elements'][str(dino_id)]
    del user['dinos'][dino_id_remove]
    user['dinos'][user_dino_pn(user)] = {'dino_id': dino_id, "status": 'dino', 'activ_status': 'pass_active', 'name': dino['name'], 'stats':  {"heal": 100, "eat": random.randint(70, 100), 'game': random.randint(50, 100), 'mood': random.randint(7, 100), "unv": 100}, 'games': []}

    users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos']}} )


def notifications_manager(notification, user, arg = None):
    user['notifications'][notification] = True
    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications'] }} )

    if user['settings']['notifications'] == True:
        try:
            chat = bot.get_chat(user['userid'])
        except:
            return False

        if notification == "5_min_incub":

            if user['language_code'] == 'ru':
                text = f'ü•ö | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –≤—ã–ª—É–ø–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!'
            else:
                text = f'ü•ö | {chat.first_name}, your dinosaur will hatch in 5 minutes!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "incub":

            if user['language_code'] == 'ru':
                text = f'ü¶ñ | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä –≤—ã–ª—É–ø–∏–ª—Å—è! üéâ'
            else:
                text = f'ü¶ñ | {chat.first_name}, the dinosaur has hatched! üéâ'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "need_eat":

            if user['language_code'] == 'ru':
                text = f'üçï | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä —Ö–æ—á–µ—Ç –∫—É—à–∞—Ç—å, –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –¥–æ {arg}%!'
            else:
                text = f'üçï | {chat.first_name}, the dinosaur wants to eat, his need for food has dropped to {arg}%!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "need_game":

            if user['language_code'] == 'ru':
                text = f'üéÆ | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å, –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∏–≥—Ä–µ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
            else:
                text = f'üéÆ | {chat.first_name}, The dinosaur wants to play, his need for the game has dropped to {arg}%!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "need_mood":

            if user['language_code'] == 'ru':
                text = f'ü¶ñ | {chat.first_name}, —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
            else:
                text = f'ü¶ñ | {chat.first_name}, the dinosaur is in a bad mood, his mood has sunk to {arg}%!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "need_unv":

            if user['language_code'] == 'ru':
                text = f'üåô | {chat.first_name}, –¥–∏–Ω–æ–∑–∞–≤—Ä —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å, –µ–≥–æ —Ö–∞—Ä—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞ –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –¥–æ {arg}%!'
            else:
                text = f'üåô | {chat.first_name}, the dinosaur wants to sleep, his sleep characteristic dropped to {arg}%!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "dead":

            if user['language_code'] == 'ru':
                text = f'üí• | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫.... –£–º–µ—Ä...'
            else:
                text = f'üí• | {chat.first_name}, your dinosaur.... Died...'

            try:
                bot.send_message(user['userid'], text, reply_markup = markup(1, user))
            except:
                pass

        elif notification == "woke_up":

            if user['language_code'] == 'ru':
                text = f'üåô | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –ø–æ–ª–æ–Ω —Å–∏–ª!'
            else:
                text = f'üåô | {chat.first_name}, your dinosaur is awake and full of energy!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "game_end":

            if user['language_code'] == 'ru':
                text = f'üéÆ | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –∏–≥—Ä–∞—Ç—å!'
            else:
                text = f'üéÆ | {chat.first_name}, your dinosaur has stopped playing!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass


        elif notification == "journey_end":

            if user['language_code'] == 'ru':

                text = f'ü¶ñ | –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!\n–í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏:\n'

                if user['dinos'][ list(user['dinos'].keys())[0] ]['journey_log'] == []:
                    text += '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ!'
                else:
                    n = 1
                    for el in user['dinos'][ list(user['dinos'].keys())[0] ]['journey_log']:
                        text += f'<b>{n}.</b> {el}\n\n'
                        n += 1
            else:

                text = f"ü¶ñ | Your dinosaur has returned from a journey!\nHere's what happened on his journey:\n"

                if bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_log'] == []:
                    text += 'Nothing happened!'
                else:
                    n = 1
                    for el in bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_log']:
                        text += f'<b>{n}.</b> {el}\n\n'
                        n += 1

            try:
                bot.send_message(user['userid'], text, parse_mode = 'html')
            except:
                pass

        elif notification == "friend_request":

            if user['language_code'] == 'ru':
                text = f'üí¨ | {chat.first_name}, –≤–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!'
            else:
                text = f'üí¨ | {chat.first_name}, you have received a friend request!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "friend_accept":

            if user['language_code'] == 'ru':
                text = f'üí¨ | {chat.first_name}, {arg} –ø—Ä–∏—è–Ω–ª –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!'
            else:
                text = f'üí¨ | {chat.first_name}, {arg} accepted a friend request!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "friend_rejection":

            if user['language_code'] == 'ru':
                text = f'üí¨ | {chat.first_name}, –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è {arg}, –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω...'
            else:
                text = f'üí¨ | {chat.first_name}, your friend request {arg} has been rejected...'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        elif notification == "hunting_end":

            if user['language_code'] == 'ru':
                text = f'üçï | {chat.first_name}, –≤–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –≤–µ—Ä–Ω—É–ª—Å—è —Å–æ —Å–±–æ—Ä–∞ –ø–∏—â–∏!'
            else:
                text = f'üçï | {chat.first_name}, your dinosaur is back from collecting food!'

            try:
                bot.send_message(user['userid'], text)
            except:
                pass

        else:
            print(notification, 'notification')

def check_memory():
    while True:
        time.sleep(5)
        print(int(memory_usage()[0]), 'mb')

thr2 = threading.Thread(target = check_memory, daemon=True)

def check_incub(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    while True:
        nn = 0
        time.sleep(5)
        t_st = int(time.time())

        members = users.find({ })
        for user in members:
            nn += 1
            # try:
            if True:
                dns_l = list(user['dinos'].keys()).copy()

                for dino_id in dns_l:
                    dino = user['dinos'][dino_id]
                    if dino['status'] == 'incubation': #–∏–Ω–∫—É–±–∞—Ü–∏—è
                        if dino['incubation_time'] - int(time.time()) <= 60*5 and dino['incubation_time'] - int(time.time()) > 0: #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç

                            if 'inc_notification' in list(user['notifications'].keys()):

                                if user['notifications']['inc_notification'] == False:
                                    notifications_manager("5_min_incub", user, dino)

                                    user['notifications']['inc_notification'] = True
                                    users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications']}} )

                            else:
                                user['notifications']['inc_notification'] = True
                                users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications']}} )

                                notifications_manager("5_min_incub", user, dino_id)


                        elif dino['incubation_time'] - int(time.time()) <= 0:

                            if 'inc_notification' in list(user['notifications'].keys()):
                                del user['notifications']['inc_notification']
                                users.update_one( {"userid": user['userid']}, {"$set": {'notifications': user['notifications']}} )

                            random_dino(user, dino_id)
                            notifications_manager("incub", user, dino_id)

        print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∫—É–±–∞—Ü–∏–∏ - {int(time.time()) - t_st}s {nn}u')

thr_icub = threading.Thread(target = check_incub, daemon=True)

def check_sleep(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        nn = 0
        time.sleep(10)
        t_st = int(time.time())

        members = users.find({ })
        for user in members:
            nn += 1
            # try:
            if True:
                dns_l = list(user['dinos'].keys()).copy()

                for dino_id in dns_l:
                    dino = user['dinos'][dino_id]

                    if dino['status'] == 'dino': #–¥–∏–Ω–æ

                        if dino['activ_status'] == 'sleep':

                            if user['dinos'][dino_id]['stats']['unv'] < 100:
                                if random.randint(1,45) == 1:
                                    user['dinos'][dino_id]['stats']['unv'] += random.randint(1,2)

                            if user['dinos'][dino_id]['stats']['game'] < 40:
                                if random.randint(1,45) == 1:
                                    user['dinos'][dino_id]['stats']['game'] += random.randint(1,2)

                            if user['dinos'][dino_id]['stats']['mood'] < 50:
                                if random.randint(1,45) == 1:
                                    user['dinos'][dino_id]['stats']['mood'] += random.randint(1,2)

                            if user['dinos'][dino_id]['stats']['heal'] < 100:
                                if user['dinos'][dino_id]['stats']['eat'] > 50:
                                    if random.randint(1,45) == 1:
                                        user['dinos'][dino_id]['stats']['heal'] += random.randint(1,2)
                                        user['dinos'][dino_id]['stats']['eat'] -= random.randint(0,1)

                            if user['dinos'][dino_id]['stats']['unv'] >= 100:
                                user['dinos'][dino_id]['activ_status'] = 'pass_active'
                                notifications_manager("woke_up", user)

                users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos'] }} )

        print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–Ω–∞ - {int(time.time()) - t_st}s {nn}u')

thr_sleep = threading.Thread(target = check_sleep, daemon=True)

def check_game(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        nn = 0
        time.sleep(10)
        t_st = int(time.time())

        members = users.find({ })
        for user in members:
            nn += 1
            # try:
            if True:
                dns_l = list(user['dinos'].keys()).copy()

                for dino_id in dns_l:
                    dino = user['dinos'][dino_id]

                    if dino['status'] == 'dino': #–¥–∏–Ω–æ

                        if dino['activ_status'] == 'game':

                            if random.randint(1, 65) == 1: #unv
                                user['dinos'][dino_id]['stats']['unv'] -= random.randint(0,2)

                            if random.randint(1, 45) == 1: #unv
                                user['lvl'][1] += random.randint(0,20)

                            if user['dinos'][dino_id]['stats']['game'] < 100:
                                if random.randint(1,30) == 1:
                                    user['dinos'][dino_id]['stats']['game'] += int(random.randint(2,15) * user['dinos'][dino_id]['game_%'])

                            if int(dino['game_time']-time.time()) <= 0:
                                user['dinos'][dino_id]['activ_status'] = 'pass_active'
                                notifications_manager("game_end", user)

                                del user['dinos'][ dino_id ]['game_time']
                                del user['dinos'][ dino_id ]['game_%']

                users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos'] }} )
            users.update_one( {"userid": user['userid']}, {"$set": {'lvl': user['lvl'] }} )

        print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä—ã - {int(time.time()) - t_st}s {nn}u')

thr_game = threading.Thread(target = check_game, daemon=True)

def check_hunt(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        nn = 0
        time.sleep(10)
        t_st = int(time.time())

        members = users.find({ })
        for user in members:
            nn += 1
            # try:
            if True:
                dns_l = list(user['dinos'].keys()).copy()

                for dino_id in dns_l:
                    dino = user['dinos'][dino_id]

                    if dino['status'] == 'dino': #–¥–∏–Ω–æ
                        if dino['activ_status'] == 'hunting':

                            if random.randint(1, 65) == 1: #unv
                                user['dinos'][dino_id]['stats']['unv'] -= random.randint(0,2)

                            if random.randint(1, 45) == 1: #unv
                                user['lvl'][1] += random.randint(0,20)

                            r = random.randint(1, 15)
                            if r == 1:

                                if dino['h_type'] == 'all':
                                    items = [2, 5, 6, 7, 8, 9, 10, 11, 12, 13]

                                if dino['h_type'] == 'collecting':
                                    items = [6, 9, 11]

                                if dino['h_type'] == 'hunting':
                                    items = [5, 8, 12]

                                if dino['h_type'] == 'fishing':
                                    items = [7, 10, 13]

                                item = random.choice(items)
                                i_count = random.randint(1, 2)
                                for i in list(range(i_count)):
                                    user['inventory'].append(str(item))
                                    dino['target'][0] += 1

                                if dino['target'][0] >= dino['target'][1]:
                                    del user['dinos'][ dino_id ]['target']
                                    del user['dinos'][ dino_id ]['h_type']
                                    user['dinos'][dino_id]['activ_status'] = 'pass_active'

                                    notifications_manager("hunting_end", user)

                users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos'] }} )
            users.update_one( {"userid": user['userid']}, {"$set": {'lvl': user['lvl'] }} )
            users.update_one( {"userid": user['userid']}, {"$set": {'inventory': user['inventory'] }} )

        print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –ø–∏—â–∏ - {int(time.time()) - t_st}s {nn}u')

thr_hunt = threading.Thread(target = check_hunt, daemon=True)

def check_journey(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        nn = 0
        time.sleep(10)
        t_st = int(time.time())

        members = users.find({ })
        for user in members:
            nn += 1
            # try:
            if True:
                dns_l = list(user['dinos'].keys()).copy()

                for dino_id in dns_l:
                    dino = user['dinos'][dino_id]

                    if dino['status'] == 'dino': #–¥–∏–Ω–æ

                        if dino['activ_status'] == 'journey':

                            if random.randint(1, 65) == 1: #unv
                                user['dinos'][dino_id]['stats']['unv'] -= random.randint(0,2)

                            if random.randint(1, 45) == 1: #unv
                                user['lvl'][1] += random.randint(0,20)

                            if int(dino['journey_time']-time.time()) <= 0:
                                user['dinos'][dino_id]['activ_status'] = 'pass_active'

                                notifications_manager("journey_end", user, user['dinos'][ dino_id ]['journey_log'])

                                del user['dinos'][ dino_id ]['journey_time']
                                del user['dinos'][ dino_id ]['journey_log']

                            r_e_j = random.randint(1,30)
                            if r_e_j == 1:
                                if random.randint(1,3) != 1:

                                    if dino['stats']['mood'] >= 55:
                                        mood_n = True
                                    else:
                                        mood_n = False

                                    r_event = random.randint(1, 100)
                                    if r_event in list(range(1,51)): #–æ–±—ã—á–Ω–æ–µ —Å–æ–±
                                        events = ['sunny', 'm_coins']
                                    elif r_event in list(range(51,76)): #–Ω–µ–æ–±—ã—á–Ω–æ–µ —Å–æ–±
                                        events = ['+eat', 'sleep', 'u_coins']
                                    elif r_event in list(range(76,91)): #—Ä–µ–¥–∫–æ–µ —Å–æ–±
                                        events = ['random_items', 'b_coins']
                                    elif r_event in list(range(91,100)): #–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±
                                        events = ['random_items_leg', 'y_coins']
                                    else: #–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±
                                        events = ['egg', 'l_coins']

                                    event = random.choice(events)
                                    if event == 'sunny':
                                        mood = random.randint(1, 15)
                                        user['dinos'][dino_id]['stats']['mood'] += mood

                                        if user['language_code'] == 'ru':
                                            event = f'‚òÄ | –°–æ–ª–Ω–µ—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –ø–æ–≤—ã—Å–∏–ª–æ—Å—å –Ω–∞ {mood}%'
                                        else:
                                            event = f"‚òÄ | Sunny, the dinosaur's mood has increased by {mood}%"

                                    elif event == '+eat':
                                        eat = random.randint(1, 10)
                                        user['dinos'][dino_id]['stats']['eat'] += eat

                                        if user['language_code'] == 'ru':
                                            event = f'ü•û | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ –∏ —Å—ä–µ–ª —ç—Ç–æ!'
                                        else:
                                            event = f"ü•û | The dinosaur found something delicious and ate it!"

                                    elif event == 'sleep':
                                        unv = random.randint(1, 5)
                                        user['dinos'][dino_id]['stats']['unv'] += unv

                                        if user['language_code'] == 'ru':
                                            event = f'üí≠ | –î–∏–Ω–æ–∑–∞–≤—Ä —Å–º–æ–≥ –≤–∑–¥—Ä–µ–º–Ω—É—Ç—å –ø–æ –¥–æ—Ä–æ–≥–µ.'
                                        else:
                                            event = f"üí≠ | –î–∏–Ω–æ–∑–∞–≤—Ä —Å–º–æ–≥ –≤–∑–¥—Ä–µ–º–Ω—É—Ç—å –ø–æ –¥–æ—Ä–æ–≥–µ."

                                    elif event == 'random_items':
                                        items = ["1", "2", '18', '19', '25', '25']
                                        item = random.choice(items)
                                        if mood_n == True:
                                            user['inventory'].append(item)

                                            if user['language_code'] == 'ru':
                                                event = f"üß∏ | –ë–µ–≥–∞—è –ø–æ –ª–µ—Å–∞–º, –¥–∏–Ω–æ–∑–∞–≤—Ä –≤–∏–¥–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Å—É–Ω–¥—É–∫.\n>  –û—Ç–∫—Ä—ã–≤ –µ–≥–æ, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç: {items_f['items'][item]['nameru']}!"
                                            else:
                                                event = f"üß∏ | Running through the woods, the dinosaur sees something that looks like a chest.\n> Opening it, he finds: {items_f['items'][item]['nameen']}!"

                                        if mood_n == False:

                                            if user['language_code'] == 'ru':
                                                event = '‚ùå | –†–µ–¥–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
                                            else:
                                                event = '‚ùå | A rare event has been canceled due to a bad mood!'

                                    elif event == 'random_items_leg':
                                        items = ["4", "13", "14", "15", "16"]
                                        item = random.choice(items)
                                        if mood_n == True:
                                            user['inventory'].append(item)

                                            if user['language_code'] == 'ru':
                                                event = f"üß∏ | –ë–µ–≥–∞—è –ø–æ –≥–æ—Ä–∞–º, –¥–∏–Ω–æ–∑–∞–≤—Ä –≤–∏–¥–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Å—É–Ω–¥—É–∫.\n>  –û—Ç–∫—Ä—ã–≤ –µ–≥–æ, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç: {items_f['items'][item]['nameru']}!"
                                            else:
                                                event = f"üß∏ | Running through the mountains, the dinosaur sees something similar to a chest.\n> Opening it, he finds: {items_f['items'][item]['nameen']}!"

                                        if mood_n == False:

                                            if user['language_code'] == 'ru':
                                                event = '‚ùå | –ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
                                            else:
                                                event = '‚ùå | The mystical event has been canceled due to a bad mood!'

                                    elif event == 'egg':
                                        eggs = ["3", '20', '21', '22', '23', '24']
                                        egg = random.choice(eggs)
                                        if mood_n == True:
                                            user['inventory'].append(egg)

                                            if user['language_code'] == 'ru':
                                                event = f"üß∏ | –ë–µ–≥–∞—è –ø–æ –ø–æ –ø–µ—â–µ—Ä–∞–º, –¥–∏–Ω–æ–∑–∞–≤—Ä –≤–∏–¥–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Å—É–Ω–¥—É–∫.\n>  –û—Ç–∫—Ä—ã–≤ –µ–≥–æ, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç: {items_f['items'][egg]['nameru']}!"
                                            else:
                                                event = f"üß∏ | Running through the caves, the dinosaur sees something similar to a chest.\n> Opening it, he finds: {items_f['items'][egg]['nameen']}!"

                                        if mood_n == False:

                                            if user['language_code'] == 'ru':
                                                event = '‚ùå | –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
                                            else:
                                                event = '‚ùå | The legendary event has been canceled due to a bad mood!'

                                    elif event[2:] == 'coins':

                                        if mood_n == True:
                                            if event[:1] == 'm':
                                                coins = random.randint(1, 10)
                                            if event[:1] == 'u':
                                                coins = random.randint(10, 50)
                                            if event[:1] == 'b':
                                                coins = random.randint(50, 100)
                                            if event[:1] == 'y':
                                                coins = random.randint(100, 300)
                                            if event[:1] == 'l':
                                                coins = random.randint(300, 500)

                                            user['coins'] += coins

                                            if user['language_code'] == 'ru':
                                                event = f'üíé | –•–æ–¥—è –ø–æ —Ç—Ä–æ–ø–∏–Ω–∫–∞–º, –¥–∏–Ω–æ–∑–∞–≤—Ä –Ω–∞—Ö–æ–¥–∏—Ç –º–µ—à–æ—á–µ–∫ c –º–æ–Ω–µ—Ç–∫–∞–º–∏.\n>   –í—ã –ø–æ–ª—É—á–∏–ª–∏ {coins} –º–æ–Ω–µ—Ç.'
                                            else:
                                                event = f'üíé | Walking along the paths, the dinosaur finds a bag with coins.\n> You have received {coins} coins.'

                                        if mood_n == False:
                                            if user['language_code'] == 'ru':
                                                event = '‚ùå | C–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
                                            else:
                                                event = '‚ùå | Event has been canceled due to a bad mood!'

                                    user['dinos'][ dino_id ]['journey_log'].append(event)

                                else:
                                    if dino['stats']['mood'] >= 55:
                                        mood_n = False
                                    else:
                                        mood_n = True

                                    r_event = random.randint(1, 100)
                                    if r_event in list(range(1,51)): #–æ–±—ã—á–Ω–æ–µ —Å–æ–±
                                        events = ['rain', 'm_coins']
                                    elif r_event in list(range(51,76)): #–Ω–µ–æ–±—ã—á–Ω–æ–µ —Å–æ–±
                                        events = ['fight', '-eat', 'u_coins']
                                    elif r_event in list(range(76,91)): #—Ä–µ–¥–∫–æ–µ —Å–æ–±
                                        events = ['b_coins']
                                    elif r_event in list(range(91,100)): #–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±
                                        events = ['toxic_rain', 'y_coins']
                                    else: #–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Å–æ–±
                                        events = ['lose_item', 'l_coins']


                                    event = random.choice(events)
                                    if event == 'rain':
                                        mood = random.randint(1, 15)
                                        user['dinos'][dino_id]['stats']['mood'] -= mood

                                        if user['language_code'] == 'ru':
                                            event = f'üå® | –ü—Ä–æ—à—ë–ª—Å—è –¥–æ–∂–¥—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–Ω–∏–∂–µ–Ω–æ –Ω–∞ {mood}%'
                                        else:
                                            event = f"üå® | It has rained, the mood is lowered by {mood}%"

                                    elif event == '-eat':
                                        eat = random.randint(1, 10)
                                        heal = random.randint(1, 3)
                                        user['dinos'][dino_id]['stats']['eat'] -= eat
                                        user['dinos'][dino_id]['stats']['heal'] -= heal

                                        if user['language_code'] == 'ru':
                                            event = f'üç§ | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–∞—à—ë–ª —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ –∏ —Å—ä–µ–ª —ç—Ç–æ, –µ–¥–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –∏—Å–ø–æ—Ä—á–µ–Ω–∞. –î–∏–Ω–æ–∑–∞–≤—Ä —Ç–µ—Ä—è–µ—Ç {eat}% –µ–¥—ã –∏ {heal}% –∑–¥–æ—Ä–æ–≤—å—è.'
                                        else:
                                            event = f"üç§ | The dinosaur found something delicious and ate it, the food was spoiled. Dinosaur loses {eat}% of food and {heal}% health."

                                    elif event == 'toxic_rain':
                                        heal = random.randint(1, 5)
                                        user['dinos'][dino_id]['stats']['heal'] -= heal

                                        if user['language_code'] == 'ru':
                                            event = f"‚õà | –î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ–ø–∞–ª –ø–æ–¥ —Ç–æ–∫—Å–∏—á–Ω—ã–π –¥–æ–∂–¥—å!"
                                        else:
                                            event = f"‚õà | The dinosaur got caught in the toxic rain!"


                                    elif event == 'fight':
                                        unv = random.randint(1, 10)
                                        user['dinos'][dino_id]['stats']['unv'] -= unv

                                        if random.randint(1,2) == 1:
                                            heal = random.randint(1, 5)
                                            user['dinos'][dino_id]['stats']['heal'] -= heal
                                            textru = f'\n–î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–Ω, –æ–Ω —Ç–µ—Ä—è–µ—Ç {heal}% –∑–¥–æ—Ä–æ–≤—å—è.'
                                            texten = f"\nThe dinosaur couldn't escape the wounds, it loses {heal}% health."
                                        else:
                                            textru = f'\n–î–∏–Ω–æ–∑–∞–≤—Ä —Å–º–æ–≥ –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–Ω, –æ–Ω –Ω–µ —Ç–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è.'
                                            texten = f"\nThe dinosaur was able to avoid wounds, he does not lose health."

                                        if user['language_code'] == 'ru':
                                            event = f'‚öî | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–∞—Ä–≤–∞–ª—Å—è –Ω–∞ –¥—Ä–∞–∫—É, –æ–Ω —Ç–µ—Ä—è–µ—Ç {unv}% —Å–∏–ª.'
                                            event += textru
                                        else:
                                            event = f"‚öî | The dinosaur ran into a fight, he loses {unv}% of his strength."
                                            event += texten

                                    elif event == 'lose_items':
                                        items = user['inventory']
                                        item = random.choice(items)
                                        if mood_n == True:
                                            user['inventory'].remove(item)

                                            if user['language_code'] == 'ru':
                                                event = f"‚ùó | –ë–µ–≥–∞—è –ø–æ –ª–µ—Å–∞–º, –¥–∏–Ω–æ–∑–∞–≤—Ä –æ–±—Ä–∞–Ω–∏–ª {items_f['items'][item]['nameru']}\n>  –ü—Ä–µ–¥–º–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!"
                                            else:
                                                event = f"üß∏ | Running through the woods, the dinosaur sees something that looks like a chest.\n> Opening it, he finds: {items_f['items'][item]['nameen']}!"

                                        if mood_n == False:

                                            if user['language_code'] == 'ru':
                                                event = 'üç≠ | –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
                                            else:
                                                event = 'üç≠ | Negative event canceled due to good mood!'

                                    elif event[2:] == 'coins':

                                        if mood_n == True:
                                            if event[:1] == 'm':
                                                coins = random.randint(1, 2)
                                            if event[:1] == 'u':
                                                coins = random.randint(5, 10)
                                            if event[:1] == 'b':
                                                coins = random.randint(10, 50)
                                            if event[:1] == 'y':
                                                coins = random.randint(50, 100)
                                            if event[:1] == 'l':
                                                coins = random.randint(100, 150)

                                            user['coins'] += coins

                                            if user['language_code'] == 'ru':
                                                event = f'üíé | –•–æ–¥—è –ø–æ —Ç—Ä–æ–ø–∏–Ω–∫–∞–º, –¥–∏–Ω–æ–∑–∞–≤—Ä –æ–±—Ä–æ–Ω–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –∏–∑ —Ä—é–∫–∑–∞–∫–∞\n>   –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {coins} –º–æ–Ω–µ—Ç.'
                                            else:
                                                event = f'üíé | Walking along the paths, the dinosaur dropped some coins from his backpack.   You have lost {coins} coins.'

                                        if mood_n == False:
                                            if user['language_code'] == 'ru':
                                                event = 'üç≠ | –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!'
                                            else:
                                                event = 'üç≠ | Negative event canceled due to good mood!'

                                    user['dinos'][ dino_id ]['journey_log'].append(event)

                users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos'] }} )
            users.update_one( {"userid": user['userid']}, {"$set": {'lvl': user['lvl'] }} )
            users.update_one( {"userid": user['userid']}, {"$set": {'inventory': user['inventory'] }} )
            users.update_one( {"userid": user['userid']}, {"$set": {'coins': user['coins'] }} )

        print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ - {int(time.time()) - t_st}s {nn}u')

thr_journey = threading.Thread(target = check_journey, daemon=True)

def check(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        nn = 0
        time.sleep(10)
        t_st = int(time.time())

        members = users.find({ })
        for user in members:
            nn += 1
            # try:
            if True:
                dns_l = list(user['dinos'].keys()).copy()

                for dino_id in dns_l:
                    dino = user['dinos'][dino_id]

                    if dino['status'] == 'dino': #–¥–∏–Ω–æ
                    #stats  - pass_active (–Ω–∏—á–µ–≥–æ) sleep - (—Å–æ–Ω) journey - (–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ—Ñ)


                        if dino['activ_status'] != 'sleep':
                            if random.randint(1, 55) == 1: #eat
                                user['dinos'][dino_id]['stats']['eat'] -= random.randint(1,2)
                        else:
                            if random.randint(1, 80) == 1: #eat
                                user['dinos'][dino_id]['stats']['eat'] -= random.randint(1,2)

                        if dino['activ_status'] != 'game':
                            if random.randint(1, 60) == 1: #game
                                user['dinos'][dino_id]['stats']['game'] -= random.randint(1,2)

                        if dino['activ_status'] != 'sleep':
                            if random.randint(1, 130) == 1: #unv
                                user['dinos'][dino_id]['stats']['unv'] -= random.randint(1,2)

                        if dino['activ_status'] == 'pass_active':

                            if user['dinos'][dino_id]['stats']['game'] > 60:
                                if dino['stats']['mood'] < 100:
                                    if random.randint(1,15) == 1:
                                        user['dinos'][dino_id]['stats']['mood'] += random.randint(1,15)

                                    if random.randint(1,60) == 1:
                                        user['coins'] += random.randint(0,100)

                            if user['dinos'][dino_id]['stats']['mood'] > 80:
                                if random.randint(1,60) == 1:
                                    user['coins'] += random.randint(0,100)

                            if user['dinos'][dino_id]['stats']['unv'] <= 20 and user['dinos'][dino_id]['stats']['unv'] != 0:
                                if dino['stats']['mood'] > 0:
                                    if random.randint(1,30) == 1:
                                        user['dinos'][dino_id]['stats']['mood'] -= random.randint(1,2)

                        if user['dinos'][dino_id]['stats']['game'] < 40 and user['dinos'][dino_id]['stats']['game'] > 10:
                            if dino['stats']['mood'] > 0:
                                if random.randint(1,30) == 1:
                                    user['dinos'][dino_id]['stats']['mood'] -= random.randint(1,2)

                        if user['dinos'][dino_id]['stats']['game'] < 10:
                            if dino['stats']['mood'] > 0:
                                if random.randint(1,15) == 1:
                                    user['dinos'][dino_id]['stats']['mood'] -= 3

                        if user['dinos'][dino_id]['stats']['unv'] <= 10 and user['dinos'][dino_id]['stats']['eat'] <= 20:
                            if random.randint(1,30) == 1:
                                user['dinos'][dino_id]['stats']['heal'] -= random.randint(1,2)

                        if user['dinos'][dino_id]['stats']['eat'] <= 20:
                            if user['dinos'][dino_id]['stats']['unv'] <= 10 and user['dinos'][dino_id]['stats']['eat'] <= 20:
                                pass
                            else:
                                if random.randint(1,40) == 1:
                                    user['dinos'][dino_id]['stats']['heal'] -= random.randint(0,1)

                        if user['dinos'][dino_id]['stats']['eat'] > 80:
                            if dino['stats']['mood'] < 100:
                                if random.randint(1,15) == 1:
                                    user['dinos'][dino_id]['stats']['mood'] += random.randint(1,10)

                        if user['dinos'][dino_id]['stats']['eat'] <= 40 and user['dinos'][dino_id]['stats']['eat'] != 0:
                            if dino['stats']['mood'] > 0:
                                if random.randint(1,30) == 1:
                                    user['dinos'][dino_id]['stats']['mood'] -= random.randint(1,2)


                        if user['dinos'][dino_id]['stats']['eat'] > 80 and user['dinos'][dino_id]['stats']['unv'] > 70 and user['dinos'][dino_id]['stats']['mood'] > 50:

                            if random.randint(1,6) == 1:
                                user['dinos'][dino_id]['stats']['heal'] += random.randint(1,4)
                                user['dinos'][dino_id]['stats']['eat'] -= random.randint(0,1)


                        if user['dinos'][dino_id]['stats']['unv'] >= 100:
                            user['dinos'][dino_id]['stats']['unv'] = 100

                        if user['dinos'][dino_id]['stats']['unv'] >= 40:
                            user['notifications']['need_unv'] = False

                        if user['dinos'][dino_id]['stats']['eat'] >= 100:
                            user['dinos'][dino_id]['stats']['eat'] = 100

                        if user['dinos'][dino_id]['stats']['eat'] >= 50:
                            user['notifications']['need_eat'] = False

                        if user['dinos'][dino_id]['stats']['game'] >= 100:
                            user['dinos'][dino_id]['stats']['game'] = 100

                        if user['dinos'][dino_id]['stats']['game'] >= 80:
                            user['notifications']['need_game'] = False

                        if user['dinos'][dino_id]['stats']['heal'] >= 100:
                            user['dinos'][dino_id]['stats']['heal'] = 100

                        if user['dinos'][dino_id]['stats']['mood'] >= 100:
                            user['dinos'][dino_id]['stats']['mood'] = 100

                        if user['dinos'][dino_id]['stats']['mood'] >= 80:
                            user['notifications']['need_mood'] = False


                        if user['dinos'][dino_id]['stats']['unv'] < 0:
                            user['dinos'][dino_id]['stats']['unv'] = 0

                        if user['dinos'][dino_id]['stats']['unv'] <= 30:
                            if 'need_unv' not in list(user['notifications'].keys()) or user['notifications']['need_unv'] == False:
                                notifications_manager("need_unv", user, user['dinos'][dino_id]['stats']['unv'])
                                user['notifications']['need_unv'] = True

                        if user['dinos'][dino_id]['stats']['eat'] < 0:
                            user['dinos'][dino_id]['stats']['eat'] = 0

                        if user['dinos'][dino_id]['stats']['eat'] <= 40:
                            if 'need_eat' not in list(user['notifications'].keys()) or user['notifications']['need_eat'] == False:
                                notifications_manager("need_eat", user, user['dinos'][dino_id]['stats']['eat'])

                        if user['dinos'][dino_id]['stats']['game'] < 0:
                            user['dinos'][dino_id]['stats']['game'] = 0

                        if user['dinos'][dino_id]['stats']['game'] <= 50:
                            if 'need_game' not in list(user['notifications'].keys()) or user['notifications']['need_game'] == False:
                                notifications_manager("need_game", user, user['dinos'][dino_id]['stats']['game'])

                        if user['dinos'][dino_id]['stats']['mood'] < 0:
                            user['dinos'][dino_id]['stats']['mood'] = 0

                        if user['dinos'][dino_id]['stats']['mood'] <= 70:
                            if 'need_mood' not in list(user['notifications'].keys()) or user['notifications']['need_mood'] == False:
                                notifications_manager("need_mood", user, user['dinos'][dino_id]['stats']['mood'])

                        if user['dinos'][dino_id]['stats']['heal'] <= 0:
                            user['dinos'][dino_id]['stats']['heal'] = 0
                            del user['dinos'][dino_id]

                            if 'dead' not in list(user['notifications'].keys()) or user['notifications']['dead'] == False:
                                notifications_manager("dead", user)


                        users.update_one( {"userid": user['userid']}, {"$set": {'dinos': user['dinos'] }} )
                        users.update_one( {"userid": user['userid']}, {"$set": {'coins': user['coins'] }} )

                        expp = 5 * user['lvl'][0] * user['lvl'][0] + 50 * user['lvl'][0] + 100
                        if user['lvl'][1] >= expp:
                            user['lvl'][0] += 1
                            user['lvl'][1] = user['lvl'][1] - expp

                        users.update_one( {"userid": user['userid']}, {"$set": {'lvl': user['lvl'] }} )
            # except:
            #     pass

        print(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ - {int(time.time()) - t_st}s {nn}u')

thr1 = threading.Thread(target = check, daemon=True)


def markup(element = 1, user = None):
    if type(user) == int:
        userid = user
    else:
        userid = user.id

    markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    bd_user = users.find_one({"userid": userid})

    if bd_user != None and len(bd_user['dinos']) == 0 and 'dead' in bd_user['notifications'] and bd_user['notifications']['dead'] == True:

        if bd_user['language_code'] == 'ru':
            nl = "üß© –ü—Ä–æ–µ–∫—Ç: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ"
        else:
            nl = 'üß© Project: Rebirth'

        markup.add(nl)
        return markup

    if element == 1 and bd_user != None:

        if len(list(bd_user['dinos'])) == 1 and bd_user['dinos']['1']['status'] == 'incubation':

            if bd_user['language_code'] == 'ru':
                nl = ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üë• –î—Ä—É–∑—å—è', '‚ùó FAQ']
            else:
                nl = ['ü¶ñ Dinosaur', 'üîß Settings', 'üë• Friends', '‚ùó FAQ']

            item1 = types.KeyboardButton(nl[0])
            item2 = types.KeyboardButton(nl[1])
            item3 = types.KeyboardButton(nl[2])
            item4 = types.KeyboardButton(nl[3])

            markup.add(item1, item2, item3, item4)

        else:

            if bd_user['language_code'] == 'ru':
                nl = ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'üïπ –î–µ–π—Å—Ç–≤–∏—è', 'üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å', 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üë• –î—Ä—É–∑—å—è', '‚ùó FAQ']
            else:
                nl = ['ü¶ñ Dinosaur', 'üïπ Actions', 'üëÅ‚Äçüó® Profile', 'üîß Settings', 'üë• Friends', '‚ùó FAQ']

            item1 = types.KeyboardButton(nl[0])
            item2 = types.KeyboardButton(nl[1])
            item3 = types.KeyboardButton(nl[2])
            item4 = types.KeyboardButton(nl[3])
            item5 = types.KeyboardButton(nl[4])
            item6 = types.KeyboardButton(nl[5])

            markup.add(item1, item2, item3, item4, item5, item6)

    elif element == 1:
        try:
            if user.language_code == 'ru':
                nl = ['üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å']
            else:
                nl = ['üç° Start playing']
        except:
            nl = ['üç° Start playing']

        item1 = types.KeyboardButton(nl[0])

        markup.add(item1)

    elif element == "settings" and bd_user != None:

        if bd_user['language_code'] == 'ru':
            nl = ['‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', "üëÖ –Ø–∑—ã–∫", 'üí¨ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']

        else:
            nl = ['‚ùó Notifications', "üëÖ Language", 'üí¨ Rename', '‚Ü™ Back']

        item1 = types.KeyboardButton(nl[0])
        item2 = types.KeyboardButton(nl[1])
        item3 = types.KeyboardButton(nl[2])
        item4 = types.KeyboardButton(nl[3])

        markup.add(item1, item2, item3, item4)

    elif element == "friends-menu" and bd_user != None:

        if bd_user['language_code'] == 'ru':
            nl = ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", 'üìú –°–ø–∏—Å–æ–∫', '‚ûñ –£–¥–∞–ª–∏—Ç—å', 'üíå –ó–∞–ø—Ä–æ—Å—ã', '‚Ü™ –ù–∞–∑–∞–¥']

        else:
            nl = ["‚ûï Add", 'üìú List', '‚ûñ Delete', 'üíå Inquiries', '‚Ü™ Back']

        item1 = types.KeyboardButton(nl[0])
        item2 = types.KeyboardButton(nl[1])
        item3 = types.KeyboardButton(nl[2])
        item4 = types.KeyboardButton(nl[3])
        item5 = types.KeyboardButton(nl[4])

        markup.add(item1, item2, item3, item4, item5)

    elif element == 'actions' and bd_user != None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)

        if bd_user['language_code'] == 'ru':
            nl = ['üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']

            if len(bd_user['dinos']) == 1:
                nid_dino = list(bd_user['dinos'].keys())[0]
                dino = bd_user['dinos'][ str(nid_dino) ]

            if len(bd_user['dinos']) > 1:
                try:
                    nid_dino = bd_user['settings']['dino_id']
                    dino = bd_user['dinos'][ str(nid_dino) ]
                except:
                    nid_dino = list(bd_user['dinos'].keys())[0]
                    bd_user['settings']['dino_id'] = list(bd_user['dinos'].keys())[0]
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                    dino = bd_user['dinos'][ str(nid_dino) ]

            if len(bd_user['dinos']) == 0:
                return markup

            if dino['activ_status'] == 'journey':
                nl.insert(2, 'üéë –í–µ—Ä–Ω—É—Ç—å')
            else:
                nl.insert(2, 'üéë –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ')

            if dino['activ_status'] == 'sleep':
                nl.insert(3, 'üåô –ü—Ä–æ–±—É–¥–∏—Ç—å')
            else:
                nl.insert(3, 'üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å')

            if dino['activ_status'] != 'hunting':
                nl.insert(4, 'üçï –°–±–æ—Ä –ø–∏—â–∏')

            else:
                nl.insert(4, 'üçï –ü—Ä–æ–≥—Ä–µ—Å—Å')

            if len(bd_user['dinos']) > 1:
                item0 = types.KeyboardButton(f'ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä: {nid_dino}')
                item1 = types.KeyboardButton(nl[0])
                item2 = types.KeyboardButton(nl[1])
                item3 = types.KeyboardButton(nl[2])
                item4 = types.KeyboardButton(nl[3])
                item5 = types.KeyboardButton(nl[4])
                item6 = types.KeyboardButton(nl[5])

                markup.add(item0, item1, item2, item3, item4, item5, item6)

            else:

                item1 = types.KeyboardButton(nl[0])
                item2 = types.KeyboardButton(nl[1])
                item3 = types.KeyboardButton(nl[2])
                item4 = types.KeyboardButton(nl[3])
                item5 = types.KeyboardButton(nl[4])
                item6 = types.KeyboardButton(nl[5])

                markup.add(item1, item2, item3, item4, item5, item6)

        else:
            nl = ['üéÆ Entertainments', 'üç£ Feed', '‚Ü™ Back']

            if len(bd_user['dinos']) == 1:
                nid_dino = list(bd_user['dinos'].keys())[0]
                dino = bd_user['dinos'][ str(nid_dino) ]

            if len(bd_user['dinos']) > 1:
                if 'dino_id' not in bd_user['settings']:
                    bd_user['settings']['dino_id'] = list(bd_user['dinos'].keys())[0]
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                try:
                    nid_dino = bd_user['settings']['dino_id']
                    dino = bd_user['dinos'][ str(nid_dino) ]
                except:
                    nid_dino = list(bd_user['dinos'].keys())[0]
                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                    dino = bd_user['dinos'][ str(nid_dino) ]

            if len(bd_user['dinos']) == 0:
                return markup

            if dino['activ_status'] == 'journey':
                nl.insert(2, 'üéë Call')
            else:
                nl.insert(2, 'üéë Journey')

            if dino['activ_status'] == 'sleep':
                nl.insert(3, 'üåô Awaken')
            else:
                nl.insert(3, 'üåô Put to bed')

            if dino['activ_status'] != 'hunting':
                nl.insert(4, 'üçï Collecting food')

            else:
                nl.insert(4, 'üçï Progress')

            if len(bd_user['dinos']) > 1:
                item0 = types.KeyboardButton(f'ü¶ñ Dino: {nid_dino}')
                item1 = types.KeyboardButton(nl[0])
                item2 = types.KeyboardButton(nl[1])
                item3 = types.KeyboardButton(nl[2])
                item4 = types.KeyboardButton(nl[3])
                item5 = types.KeyboardButton(nl[4])
                item6 = types.KeyboardButton(nl[5])

                markup.add(item0, item1, item2, item3, item4, item5, item6)

            else:

                item1 = types.KeyboardButton(nl[0])
                item2 = types.KeyboardButton(nl[1])
                item3 = types.KeyboardButton(nl[2])
                item4 = types.KeyboardButton(nl[3])
                item5 = types.KeyboardButton(nl[4])
                item6 = types.KeyboardButton(nl[5])

                markup.add(item1, item2, item3, item4, item5, item6)

    elif element == 'games' and bd_user != None:

        if bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['activ_status'] == 'game':
            markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 1)

            if bd_user['language_code'] == 'ru':
                nl = ['‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', '‚Ü™ –ù–∞–∑–∞–¥']
            else:
                nl = ['‚ùå Stop the game', '‚Ü™ Back']

            item1 = types.KeyboardButton(nl[0])
            item2 = types.KeyboardButton(nl[1])

            markup.add(item1, item2)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 2)

            if bd_user['language_code'] == 'ru':
                nl = ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'ü™Å –ó–º–µ–π', 'üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèê –ú—è—á', '‚Ü© –ù–∞–∑–∞–¥']
            else:
                nl = ['üéÆ Console', 'ü™Å Snake', 'üèì Ping Pong', 'üèê Ball', '‚Ü© Back']

            item1 = types.KeyboardButton(nl[0])
            item2 = types.KeyboardButton(nl[1])
            item3 = types.KeyboardButton(nl[2])
            item4 = types.KeyboardButton(nl[3])
            item5 = types.KeyboardButton(nl[4])

            markup.add(item1, item2, item3, item4, item5)

    elif element == "profile" and bd_user != None:

        if bd_user['language_code'] == 'ru':
            nl = ['üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'üé¢ –†–µ–π—Ç–∏–Ω–≥', '‚Ü™ –ù–∞–∑–∞–¥']

        else:
            nl = ['üìú Information', 'üéÆ Inventory', 'üé¢ Rating', '‚Ü™ Back']

        item1 = types.KeyboardButton(nl[0])
        item2 = types.KeyboardButton(nl[1])
        item3 = types.KeyboardButton(nl[2])
        item4 = types.KeyboardButton(nl[3])

        markup.add(item1, item2, item3, item4)


    else:
        print(f'{element}\n{user}')

    return markup

def member_profile(mem_id, lang):
    try:
        user = bot.get_chat(int(mem_id))
        bd_user = users.find_one({"userid": user.id})
        expp = 5 * bd_user['lvl'][0] * bd_user['lvl'][0] + 50 * bd_user['lvl'][0] + 100
        n_d = len(list(bd_user['dinos']))
        t_dinos = ''
        for k in bd_user['dinos']:

            if list( bd_user['dinos']) [ len(bd_user['dinos']) - 1 ] == k:
                n = '‚îî'

            else:
                n = '‚îú'

            i = bd_user['dinos'][k]
            stat = i['activ_status']
            if lang == 'ru':

                if i['activ_status'] == 'pass_active':
                    stat = '–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç'
                elif i['activ_status'] == 'sleep':
                    stat = '—Å–ø–∏—Ç'
                elif i['activ_status'] == 'game':
                    stat = '–∏–≥—Ä–∞–µ—Ç'
                elif i['activ_status'] == 'hunting':
                    stat = '—Å–æ–±–∏—Ä–∞–µ—Ç –µ–¥—É'
                elif i['activ_status'] == 'journey':
                    stat = '–ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç'

                dino = json_f['elements'][str(i['dino_id'])]
                pre_qual = dino['image'][5:8]
                qual = ''
                if pre_qual == 'com':
                    qual = '–û–±—ã—á–Ω—ã–π'
                if pre_qual == 'unc':
                    qual = '–ù–µ–æ–±—ã—á–Ω—ã–π'
                if pre_qual == 'rar':
                    qual = '–†–µ–¥–∫–∏–π'
                if pre_qual == 'myt':
                    qual = '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π'
                if pre_qual == 'leg':
                    qual = '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'

                t_dinos += f"\n   *{n}* {i['name']}\n      *‚îú* –°—Ç–∞—Ç—É—Å: {stat}\n      *‚îî* –†–µ–¥–∫–æ—Å—Ç—å: {qual}\n"

            else:

                if i['activ_status'] == 'pass_active':
                    stat = 'does nothing'
                elif i['activ_status'] == 'sleep':
                    stat = 'sleeping'
                elif i['activ_status'] == 'game':
                    stat = 'is playing'
                elif i['activ_status'] == 'hunting':
                    stat = 'collects food'
                elif i['activ_status'] == 'journey':
                    stat = 'travels'

                t_dinos += f"\n   *{n}* {i['name']}\n      *‚îî* Status: {stat}\n"

        if lang == 'ru':
            text =  f"*‚îå* *üé¥ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n"
            text += f"*‚îú* –ò–º—è: {user.first_name}\n"
            text += f"*‚îî* ID: `{user.id}`\n\n"
            text += f"*‚îå* –£—Ä–æ–≤–µ–Ω—å: {bd_user['lvl'][0]}\n"
            text += f"*‚îú* –û–ø—ã—Ç: {bd_user['lvl'][1]} / {expp}\n"
            text += f"*‚îî* –ú–æ–Ω–µ—Ç—ã: {bd_user['coins']}"
            text += f'\n\n'
            text += f"*‚îå* *ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä—ã*\n"
            text += f"*‚îú* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {n_d}\n"
            text += f"*‚îú* –î–∏–Ω–æ–∑–∞–≤—Ä—ã:\n{t_dinos}"
            text += f'\n\n'
            text += f"*‚îå* *üë• –î—Ä—É–∑—å—è*\n"
            text += f"*‚îî* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(bd_user['friends']['friends_list'])}"
            text += f'\n\n'
            text += f"*‚îå* *üéà –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å*\n"
            text += f"*‚îî* –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(bd_user['inventory'])}"

        else:
            text =  f"*‚îå**üé¥ User profile*\n"
            text += f"*‚îú* Name: {user.first_name}\n"
            text += f"*‚îî* ID: `{user.id}`\n\n"
            text += f"*‚îå* Level: {bd_user['lvl'][0]}\n"
            text += f"*‚îú* Experience: {bd_user['lvl'][1]} / {expp}\n"
            text += f"*‚îî* Coins: {bd_user['coins']}"
            text += f'\n\n'
            text += f"*‚îå**ü¶ñ Dinosaurs*\n"
            text += f"*‚îú* Number: {n_d}\n"
            text += f"*‚îú* Dinosaurs:\n{t_dinos}"
            text += f'\n\n'
            text += f"*‚îå**üë• Friends*\n"
            text += f"*‚îî* Quantity: {len(bd_user['friends']['friends_list'])}"
            text += f'\n\n'
            text += f"*‚îå* *üéà Inventory*\n"
            text += f"*‚îî* Items: {len(bd_user['inventory'])}"
    except:
        text = 'KMk456 jr5uhsd7489 lkjs47609485\n               ERRoR'

    return text

@bot.message_handler(commands=['emulate_not'])
def command(message):
    print('emulate_not')
    time.sleep(60)
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    notifications_manager(message.text[13:][:-3], bd_user, message.text[-2:])

@bot.message_handler(commands=['start', 'main-menu'])
def on_start(message):
    user = message.from_user
    if users.find_one({"userid": user.id}) == None:
        if user.language_code == 'ru':
            text = f"üéã | –•–µ–π <b>{user.first_name}</b>, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è!\n"+ f"<b>‚Ä¢</b> –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –ø–æ —Ç–∏–ø—É —Ç–∞–º–∞–≥–æ—á–∏, —Ç–æ–ª—å–∫–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏!ü¶ñ\n\n"+f"<b>üïπ | –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–º–∞–≥–æ—á–∏?</b>\n"+f'<b>‚Ä¢</b> –¢–∞–º–∞–≥–æ—á–∏ - –∏–≥—Ä–∞ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∫–æ—Ä–º–∏—Ç—å, —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º, –∏–≥—Ä–∞—Ç—å –∏ —Ç–¥.ü•ö\n'+f"<b>‚Ä¢</b> –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ –ª—É—á—à–∏–º!\n\n"+f"<b>üéÆ | –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å?</b>\n"+f'<b>‚Ä¢</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–º–∫—É <b>üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</b>!\n\n'+f'<b>‚ù§ | –ñ–¥—ë–º –≤ –∏–≥—Ä–µ!</b>\n'
        else:
            text = f"üéã | Hey <b>{user.first_name}</b>, I am glad to welcome you!\n" +f"<b>‚Ä¢</b> I'm a small tamagotchi-type game bot, only with dinosaurs!ü¶ñ\n\n"+f"<b>üïπ | What is tamagotchi?</b>\n"+ f'<b>‚Ä¢</b> Tamagotchi is a game with a virtual pet that needs to be fed, cared for, played, and so on.ü•ö\n'+ f"<b>‚Ä¢</b> Compete in the ranking and become the best!\n\n"+ f"<b>üéÆ | How to start playing?</b>\n" + f'<b>‚Ä¢</b> Press the button <b>üç°Start playing</b>!\n\n' + f'<b>‚ù§ | Waiting in the game!</b>\n' +f'<b>‚ùó | In some places, the bot may not be translated!</b>\n'

        bot.reply_to(message, text, reply_markup = markup(user = user), parse_mode = 'html')
    else:
        bot.reply_to(message, 'üëã', reply_markup = markup(user = user), parse_mode = 'html')


@bot.message_handler(content_types = ['text'])
def on_message(message):
    user = message.from_user

    print(user.first_name, message.text)

    def trans_paste(fg_img,bg_img,alpha=10,box=(0,0)):
        fg_img_trans = Image.new("RGBA",fg_img.size)
        fg_img_trans = Image.blend(fg_img_trans,fg_img,alpha)
        bg_img.paste(fg_img_trans,box,fg_img_trans)
        return bg_img


    if users.find_one({"userid": user.id}) != None:
        bd_user = users.find_one({"userid": user.id})
        bd_user['last_m'] = int(time.time())
        users.update_one( {"userid": bd_user['userid']}, {"$set": {'last_m': bd_user['last_m'] }} )

    if message.chat.type == 'private':

        if users.find_one({"userid": user.id}) != None and bot.get_chat_member(-1001673242031, user.id).status == 'left':
            bd_user = users.find_one({"userid": user.id})
            r = bot.get_chat_member(-1001673242031, user.id)

            if bd_user['language_code'] == 'ru':
                text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüî¥ | –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"* –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Å–ª–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"*, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!'
                b1 = "ü¶ñ | –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                b2 = "üîÑ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
            else:
                text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüî¥ | Click on the *'Subscribe'* button to go to the channel, and then on the *'Check'*, to continue working!"
                b1 = "ü¶ñ | Subscribe"
                b2 = "üîÑ | Check"

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add( types.InlineKeyboardButton(text= b1, url="https://t.me/DinoGochi"))
            markup_inline.add( types.InlineKeyboardButton(text= b2, callback_data = 'checking_the_user_in_the_channel') )

            bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")


        else:

            if message.text in ['üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å', 'üç° Start playing']:
                if users.find_one({"userid": user.id}) == None:

                    bd_user = users.find_one({"userid": user.id})
                    try:
                        r = bot.get_chat_member(-1001673242031, user.id)
                    except:
                        return

                    if r.status == 'left':

                        if user.language_code == 'ru':
                            text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüî¥ | –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"* –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Å–ª–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"*, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!'
                            b1 = "ü¶ñ | –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                            b2 = "üîÑ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
                        else:
                            text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüî¥ | Click on the *'Subscribe'* button to go to the channel, and then on the *'Check'*, to continue working!"
                            b1 = "ü¶ñ | Subscribe"
                            b2 = "üîÑ | Check"

                        markup_inline = types.InlineKeyboardMarkup()
                        markup_inline.add( types.InlineKeyboardButton(text= b1, url="https://t.me/DinoGochi"))
                        markup_inline.add( types.InlineKeyboardButton(text= b2, callback_data = 'start') )

                        bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

                    else:

                        if user.language_code == 'ru':
                            text = f'üéç | –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –º–∏—Ä –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π –∂–¥—ë—Ç, —Ç—ã –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∏ —Å—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏?!\n\n–ï—Å–ª–∏ –¥–∞, —Ç–æ —Å–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É!'
                            b1 = "üéã | –ù–∞—á–∞—Ç—å!"
                        else:
                            text = f"üéç | An exciting world of adventures awaits, are you ready to become the owner of a dinosaur and compete in the ranking with other users?!\n\nIf yes, then rather press the button from below!"
                            b1 = "üéã | Start!"


                        markup_inline = types.InlineKeyboardMarkup()
                        markup_inline.add( types.InlineKeyboardButton(text= b1, callback_data = 'start') )

                        bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")


            if message.text in ["üß© –ü—Ä–æ–µ–∫—Ç: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ", 'üß© Project: Rebirth']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text =  f"–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –≤ —á—ë—Ä–Ω–æ–º –æ–¥–µ—è–Ω–∏–∏.\n\n"
                        text += f"–í—ã –≤–∏–¥–∏—Ç–µ, —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ —á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã –∏ –∫–∞–∫–æ–π-—Ç–æ —à—Ä–∞–º –Ω–∞ —â–µ–∫–µ, –Ω–æ –µ–≥–æ –≥–ª–∞–∑–∞ –Ω–µ –≤–∏–¥–Ω—ã –≤ —Ç–µ–Ω–∏ —à–ª—è–ø—ã.\n\n"
                        text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç { random.choice( ['–º–∏—Å—Ç–µ—Ä', '–¥–æ–∫—Ç–æ—Ä'] ) } { random.choice( ['–î–∂–µ–π–º—Å', '–†–æ–±–µ—Ä—Ç', '–í–∏–Ω—Å–µ–Ω—Ç', '–ê–ª—å–±–µ—Ä—Ç'] ) }, –∞ –≤–∞—Å...\n\n"
                        text += f"*–í—ã:* - ... {user.first_name}, {user.first_name} {user.last_name}, —Ç–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç\n\n"
                        text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ {user.first_name}, –¥–∞–≤–Ω–æ –≤—ã –≤ –Ω–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ? _—É–ª—ã–±–∞–µ—Ç—Å—è_\n\n"
                        text += f"*–í—ã:* - ...–ß—Ç–æ? –ë–∏–∑–Ω–µ—Å? –û —á–µ–º, –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?!\n\n"
                        text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü–æ–Ω—è—Ç–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ... –¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º. _–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤ –±–ª–æ–∫–Ω–æ—Ç_\n\n"
                        text += f"*–í—ã:* - ...\n\n"
                        text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –î–∞–≤–∞–π—Ç–µ –±–ª–∏–∂–µ –∫ –¥–µ–ª—É, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫–ª—é—á–∏—Ç—å —Å –Ω–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –º—ã –ø–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º.\n\n"
                        text += f"*–í—ã:* - –Ø—è—è, —è –Ω–µ –∑–Ω–∞—é...\n\n"
                        text += f"*–í—ã:* - \n\n"
                        text += f"‚ùì | –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
                        b1 = ['‚ùì | –ö—Ç–æ –≤—ã —Ç–∞–∫–æ–π?', '‚ùì | –≠—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ?', '‚ùì | –ö—Ç–æ "–º—ã"?', 'üß© | –£ –º–µ–Ω—è –∂–µ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞, —Ç–∞–∫?']
                    else:
                        text = f"A man in a black robe approaches you.\n\n"
                        text += f"You can see that the man has black hair and some kind of scar on his cheek, but his eyes are not visible in the shadow of the hat.\n\n"
                        text += f"*Personality:* - Hello, my name is { random.choice(['mister', 'doctor'] ) } { random.choice( ['James', 'Robert', 'Vincent', 'Albert'] ) }, and you...\n\n"
                        text += f"*You are:* - ... {user.first_name}, {user.first_name} {user.last_name}, that's my name\n\n"
                        text += f"*Personality:* - Fine {user.first_name}, how long have you been in our business? _ulybaet_\n\n"
                        text += f"*You are:* - ...What? Business? What are you talking about?!\n\n"
                        text += f"*Personality:* - I see, I see... So we'll write it down. _ Writes something in notepad_\n\n"
                        text += f"*You are:* - ...\n\n"
                        text += f"*Personality:* - Let's get down to business, we offer you to sign a contract with us, we get your coins and resources, you get an egg with a dinosaur.\n\n"
                        text += f"*You:* - I know, I don't know...\n\n"
                        text += f"*You:* - \n\n"
                        text += f"‚ùì | Choose the answer option'"
                        b1 = ['‚ùì | Who are you?', '‚ùì | Is it legal?', '‚ùì | Who are "we"?', "üß© | I don't have a choice, right?"]

                    markup_inline = types.InlineKeyboardMarkup()
                    markup_inline.add( types.InlineKeyboardButton(text= b1[0], callback_data = 'dead_answer1') )
                    markup_inline.add( types.InlineKeyboardButton(text= b1[1], callback_data = 'dead_answer2') )
                    markup_inline.add( types.InlineKeyboardButton(text= b1[2], callback_data = 'dead_answer3') )
                    markup_inline.add( types.InlineKeyboardButton(text= b1[3], callback_data = 'dead_answer4') )

                    bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")

            if message.text in ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'ü¶ñ Dinosaur']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    def egg_profile(bd_user, user, bd_dino):
                        egg_id = bd_dino['egg_id']

                        if bd_user['language_code'] == 'ru':
                            lang = bd_user['language_code']
                        else:
                            lang = 'en'

                        t_incub = bd_dino['incubation_time'] - time.time()
                        if t_incub < 0:
                            t_incub = 0

                        time_end = functions.time_end(t_incub, True)
                        if len(time_end) >= 18:
                            time_end = time_end[:-6]

                        bg_p = Image.open(f"images/remain/egg_profile_{lang}.png")
                        egg = Image.open("images/" + str(json_f['elements'][egg_id]['image']))
                        egg = egg.resize((290, 290), Image.ANTIALIAS)

                        img = trans_paste(egg, bg_p, 1.0, (-50, 40))

                        idraw = ImageDraw.Draw(img)
                        line1 = ImageFont.truetype("fonts/Comic Sans MS.ttf", size = 35)

                        idraw.text((430, 220), time_end, font = line1)

                        img.save('profile.png')
                        profile = open(f"profile.png", 'rb')

                        return profile, time_end

                    def dino_profile(bd_user, user, dino_user_id):

                        dino_id = str(bd_user['dinos'][ dino_user_id ]['dino_id'])

                        if bd_user['language_code'] == 'ru':
                            lang = bd_user['language_code']
                        else:
                            lang = 'en'

                        dino = json_f['elements'][dino_id]
                        if 'class' in list(dino.keys()):
                            bg_p = Image.open(f"images/remain/{dino['class']}_icon.png")
                        else:
                            bg_p = Image.open(f"images/remain/None_icon.png")

                        class_ = dino['image'][5:8]

                        panel_i = Image.open(f"images/remain/{class_}_profile_{lang}.png")

                        img = trans_paste(panel_i, bg_p, 1.0)

                        dino_image = Image.open("images/"+str(json_f['elements'][dino_id]['image']))

                        sz = 412
                        dino_image = dino_image.resize((sz, sz), Image.ANTIALIAS)

                        xy = -80
                        x2 = 80
                        img = trans_paste(dino_image, img, 1.0, (xy + x2, xy, sz + xy + x2, sz + xy ))


                        idraw = ImageDraw.Draw(img)
                        line1 = ImageFont.truetype("fonts/Comic Sans MS.ttf", size = 35)

                        idraw.text((530, 110), str(bd_user['dinos'][dino_user_id]['stats']['heal']), font = line1)
                        idraw.text((530, 190), str(bd_user['dinos'][dino_user_id]['stats']['eat']), font = line1)

                        idraw.text((750, 110), str(bd_user['dinos'][dino_user_id]['stats']['game']), font = line1)
                        idraw.text((750, 190), str(bd_user['dinos'][dino_user_id]['stats']['mood']), font = line1)
                        idraw.text((750, 270), str(bd_user['dinos'][dino_user_id]['stats']['unv']), font = line1)

                        img.save('profile.png')
                        profile = open(f"profile.png", 'rb')

                        return profile

                    if len(bd_user['dinos'].keys()) == 0:
                        pass

                    elif len(bd_user['dinos'].keys()) > 0:

                        def p_profile(message, bd_dino, user, bd_user, dino_user_id):

                            if bd_dino['status'] == 'incubation':

                                profile, time_end  = egg_profile(bd_user, user, bd_dino)
                                if bd_user['language_code'] == 'ru':
                                    text = f'ü•ö | –Ø–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–ª–æ—Å—å: {time_end}'
                                else:
                                    text = f'ü•ö | The egg is incubated, left: {time_end}'

                                bot.send_photo(message.chat.id, profile, text, reply_markup = markup(user = user))

                            if bd_dino['status'] == 'dino':

                                for i in bd_user['dinos'].keys():
                                    if bd_user['dinos'][i] == bd_dino:
                                        dino_user_id = i

                                profile = dino_profile(bd_user, user, dino_user_id = dino_user_id )

                                if bd_user['language_code'] == 'ru':
                                    st_t = bd_dino['activ_status']

                                    dino = json_f['elements'][str(bd_dino['dino_id'])]
                                    pre_qual = dino['image'][5:8]
                                    qual = ''
                                    if pre_qual == 'com':
                                        qual = '–û–±—ã—á–Ω—ã–π'
                                    if pre_qual == 'unc':
                                        qual = '–ù–µ–æ–±—ã—á–Ω—ã–π'
                                    if pre_qual == 'rar':
                                        qual = '–†–µ–¥–∫–∏–π'
                                    if pre_qual == 'myt':
                                        qual = '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π'
                                    if pre_qual == 'leg':
                                        qual = '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'

                                    if bd_dino['activ_status'] == 'pass_active':
                                        st_t = '–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç üí≠'
                                    elif bd_dino['activ_status'] == 'sleep':
                                        st_t = '—Å–ø–∏—Ç üåô'
                                    elif bd_dino['activ_status'] == 'game':
                                        st_t = '–∏–≥—Ä–∞–µ—Ç üéÆ'
                                    elif bd_dino['activ_status'] == 'journey':
                                        st_t = '–ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç üé¥'
                                    elif bd_dino['activ_status'] in ['hunt', 'hunting']:
                                        st_t = '—Å–±–æ—Ä –ø–∏—â–∏ ü•û'

                                    if bd_dino['stats']['heal'] >= 60:
                                        h_text = '‚ù§ | –î–∏–Ω–æ–∑–∞–≤—Ä –∑–¥–æ—Ä–æ–≤'
                                    elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                                        h_text = '‚ù§ | –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏'
                                    elif bd_dino['stats']['heal'] <= 10:
                                        h_text = '‚ù§ | –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –∫—Ä–∞–π–Ω–µ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!'

                                    if bd_dino['stats']['eat'] >= 60:
                                        e_text = 'üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å—ã—Ç'
                                    elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                                        e_text = 'üçï | –î–∏–Ω–æ–∑–∞–≤—Ä –≥–æ–ª–æ–¥–µ–Ω'
                                    elif bd_dino['stats']['eat'] <= 10:
                                        e_text = 'üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–∏—Ä–∞–µ—Ç –æ—Ç –≥–æ–ª–æ–¥–∞!'

                                    if bd_dino['stats']['game'] >= 60:
                                        g_text = 'üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å'
                                    elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                                        g_text = 'üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä —Å–∫—É—á–∞–µ—Ç...'
                                    elif bd_dino['stats']['game'] <= 10:
                                        g_text = 'üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä —É–º–µ—Ä–∞–µ—Ç –æ—Ç —Å–∫—É–∫–∏!'

                                    if bd_dino['stats']['mood'] >= 60:
                                        m_text = 'üéà | –î–∏–Ω–æ–∑–∞–≤—Ä –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏'
                                    elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                                        m_text = 'üéà | –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
                                    elif bd_dino['stats']['mood'] <= 10:
                                        m_text = 'üéà | –î–∏–Ω–æ–∑–∞–≤—Ä –≥—Ä—É—Å—Ç–∏—Ç!'

                                    if bd_dino['stats']['unv'] >= 60:
                                        u_text = 'üåô | –î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ–ª–æ–Ω —Å–∏–ª'
                                    elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                                        u_text = 'üåô | –£ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –µ—Å—Ç—å —Å–∏–ª—ã'
                                    elif bd_dino['stats']['unv'] <= 10:
                                        u_text = 'üåô | –î–∏–Ω–æ–∑–∞–≤—Ä —É—Å—Ç–∞–ª!'


                                    text = f'ü¶ñ | –ò–º—è: {bd_dino["name"]}\nüëÅ‚Äçüó® | –°—Ç–∞—Ç—É—Å: {st_t}\nüßø | –†–µ–¥–∫–æ—Å—Ç—å: {qual}\n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                                    if bd_dino['activ_status'] == 'journey':
                                        w_t = bd_dino['journey_time'] - time.time()
                                        if w_t < 0:
                                            w_t = 0
                                        text += f"\n\nüå≥ | –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ: \n¬∑  –û—Å—Ç–∞–ª–æ—Å—å: { functions.time_end(w_t) }"
                                else:

                                    dino = json_f['elements'][str(bd_dino['dino_id'])]
                                    pre_qual = dino['image'][5:8]
                                    qual = ''
                                    if pre_qual == 'com':
                                        qual = '–°ommon'
                                    if pre_qual == 'unc':
                                        qual = 'Unusual'
                                    if pre_qual == 'rar':
                                        qual = 'Rare'
                                    if pre_qual == 'myt':
                                        qual = 'Mystical'
                                    if pre_qual == 'leg':
                                        qual = 'Legendary'

                                    if bd_dino['activ_status'] == 'pass_active':
                                        st_t = 'does nothing üí≠'
                                    elif bd_dino['activ_status'] == 'sleep':
                                        st_t = 'sleeping üåô'
                                    elif bd_dino['activ_status'] == 'game':
                                        st_t = 'playing üéÆ'
                                    elif bd_dino['activ_status'] == 'journey':
                                        st_t = 'travels üé¥'
                                    elif bd_dino['activ_status'] == 'hunt':
                                        st_t = 'collecting food ü•û'

                                    if bd_dino['stats']['heal'] >= 60:
                                        h_text = '‚ù§ | The dinosaur is healthy'
                                    elif bd_dino['stats']['heal'] < 60 and bd_dino['stats']['heal'] > 10:
                                        h_text = '‚ù§ | Dinosaur in bad condition'
                                    elif bd_dino['stats']['heal'] <= 10:
                                        h_text = '‚ù§ | The dinosaur is in extremely bad condition!'

                                    if bd_dino['stats']['eat'] >= 60:
                                        e_text = 'üçï | The dinosaur is full'
                                    elif bd_dino['stats']['eat'] < 60 and bd_dino['stats']['eat'] > 10:
                                        e_text = 'üçï | The dinosaur is hungry'
                                    elif bd_dino['stats']['eat'] <= 10:
                                        e_text = 'üçï | The dinosaur is starving!'

                                    if bd_dino['stats']['game'] >= 60:
                                        g_text = "üéÆ | The dinosaur doesn't want to play"
                                    elif bd_dino['stats']['game'] < 60 and bd_dino['stats']['game'] > 10:
                                        g_text = 'üéÆ | The dinosaur is bored...'
                                    elif bd_dino['stats']['game'] <= 10:
                                        g_text = 'üéÆ | The dinosaur is dying of boredom!'

                                    if bd_dino['stats']['mood'] >= 60:
                                        m_text = 'üéà | The dinosaur is in a good mood'
                                    elif bd_dino['stats']['mood'] < 60 and bd_dino['stats']['mood'] > 10:
                                        m_text = 'üéà | The dinosaur has a normal mood'
                                    elif bd_dino['stats']['mood'] <= 10:
                                        m_text = 'üéà | The dinosaur is sad!'

                                    if bd_dino['stats']['unv'] >= 60:
                                        u_text = 'üåô | The dinosaur is full of energy'
                                    elif bd_dino['stats']['unv'] < 60 and bd_dino['stats']['unv'] > 10:
                                        u_text = 'üåô | The dinosaur has powers'
                                    elif bd_dino['stats']['unv'] <= 10:
                                        u_text = 'üåô | The dinosaur is tired!'

                                    text = f'ü¶ñ | Name: {bd_dino["name"]}\nüëÅ‚Äçüó® | Status: {st_t}\nüßø | Rare: {qual}\n\n{h_text}\n{e_text}\n{g_text}\n{m_text}\n{u_text}'

                                    if bd_dino['activ_status'] == 'journey':
                                        w_t = bd_dino['journey_time'] - time.time()
                                        if w_t < 0:
                                            w_t = 0
                                        text += f"\n\nüå≥ | Journey: \n¬∑  Left: { functions.time_end(w_t, True) }"

                                bot.send_photo(message.chat.id, profile, text, reply_markup = markup(user = user) )

                        n_dp, dp_a = dino_pre_answer(message)
                        if n_dp == 1:

                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup(1, user))
                            return

                        if n_dp == 2:
                            bd_dino = dp_a
                            try:
                                p_profile(message, bd_dino, user, bd_user, list(bd_user['dinos'].keys())[0])
                            except:
                                print('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ')

                        if n_dp == 3:
                            rmk = dp_a[0]
                            text = dp_a[1]
                            dino_dict = dp_a[2]

                            def ret(message, dino_dict, user, bd_user):
                                try:
                                    p_profile(message, dino_dict[message.text][0], user, bd_user, dino_dict[message.text][1])
                                except:
                                    print('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ')

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)



            if message.text in ['üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîß Settings']:
                bd_user = users.find_one({"userid": user.id})

                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = 'üîß –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
                    else:
                        text = 'üîß The settings menu is activated'


                    bot.send_message(message.chat.id, text, reply_markup = markup('settings', user))

            if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = '‚Ü™ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                    else:
                        text = '‚Ü™ Return to the main menu'

                    bot.send_message(message.chat.id, text, reply_markup = markup(1, user))

            if message.text in ['üë• –î—Ä—É–∑—å—è', 'üë• Friends']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = 'üë• | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!'
                    else:
                        text = 'üë• | Redirecting to the friends menu!'

                    bot.send_message(message.chat.id, text, reply_markup = markup("friends-menu", user))

            if message.text in ['‚ùó FAQ']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text2  = '*‚ùó FAQ*\n\n'
                        text2 += "*‚îå* *–†–µ–¥–∫–æ—Å—Ç–∏ üéà*\n\n"
                        text2 += "*‚îú* –°–æ–±—ã—Ç–∏—è –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏.\n–ß–µ–º –±–æ–ª—å—à–µ —Ä–µ–¥–∫–æ—Å—Ç—å, —Ç–µ–º —Å–ª–∞—â–µ –Ω–∞–≥—Ä–∞–¥–∞.\n\n"
                        text2 += "*‚îú*  1. –û–±—ã—á–Ω–∞—è - 50%\n*‚îú*  2. –ù–µ–æ–±—ã—á–Ω–∞—è - 25%\n*‚îú*  3. –†–µ–¥–∫–∞—è - 15%\n*‚îú*  4. –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è - 9%\n*‚îî*  5. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è - 1%\n\n"
                        text2 += "*‚îå* *–í–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏—è üïπ*\n\n"
                        text2 += "*‚îú* –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∏–Ω–æ–∑–∞—Ä–≤–æ–º –ø–µ—Ä–µ–¥–∏—Ç–µ –≤ `üïπ –î–µ–π—Å—Ç–≤–∏—è`.\n\n"
                        text2 += "*‚îú*  1. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±—ã—Ç—å –ø–∏—â—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üçï –°–±–æ—Ä –ø–∏—â–∏` –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
                        text2 += "*‚îú*  2. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å` –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∏—â—É.\n\n"
                        text2 += "*‚îú*  3. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ç—Ä–µ—É–±–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è` –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
                        text2 += "*‚îú*  4. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ —Å–ø–∞—Ç—å, `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å`\n\n"
                        text2 += "*‚îî*  5. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ, –∏–≥—Ä—ã, —Å–Ω–∞ –≤ –Ω–æ—Ä–º–µ.\n\n"
                        text2 += "*‚îå* *–ü—Ä–æ—Ñ–∏–ª—å üéÆ*\n"
                        text2 += "*‚îî*  –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ `üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å`\n\n"
                        text2 += "*‚îå* *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß*\n\n"
                        text2 += "*‚îî*  –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫.\n\n"
                    else:
                        text2  = '*‚ùó FAQ*\n\n'
                        text2 += "*‚îå* *Rarities üéà*\n\n"
                        text2 += "*‚îú* Events and dinosaurs are divided into rarities.The greater the rarity, the sweeter the reward.\n\n"
                        text2 += "*‚îú* 1. Normal - 50%\n*‚îú* 2. Unusual - 25%\n*‚îú* 3. Rare - 15%\n*‚îú* 4. Mystical - 9%\n*‚îî* 5. Legendary - 1%\n\n"
                        text2 += "*‚îå* *Interaction üïπ*\n\n"
                        text2 += "*‚îú* To interact with dinozarv, pass in `üïπ Actions`.\n\n"
                        text2 += "*‚îú* 1. In order to feed the dinosaur, you need to get food, click on `üïπ Actions` > `üçï Food Collection` and follow the instructions.\n\n"
                        text2 += "*‚îú*  2. To feed the dinosaur, click on `üïπ Actions` > `üç£ Feed` and choose the appropriate food.\n\n"
                        text2 += "*‚îú* 3. To improve the mood of the dinosaur, it is necessary to entertain the dinosaur from time to time. Go to `üïπ Actions` > `üéÆ Entertainment` and follow the instructions.\n\n"
                        text2 += "*‚îú* 4. To renew the dinosaur's powers, send it to sleep, `üïπ Action` > `üåô Put to bed`\n\n"
                        text2 += "*‚îî* 5. To improve mood, it is required to keep the need for iodine, games, sleep normal.\n\n"
                        text2 += "*‚îå* *Profile üéÆ*\n"
                        text2 += "*‚îî* To view inventory or find out your statistics, go to `üëÅ Profile`\n\n"
                        text2 += "*‚îå* *Settings üîß*\n\n"
                        text2 += "*‚îî*  In the settings, you can rename the dinosaur, disable notifications, or switch the language.\n\n"

                    bot.send_message(message.chat.id, text2, parse_mode = 'Markdown')


            if message.text in ['‚ùó Notifications', '‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚úÖ –í–∫–ª—é—á–∏—Ç—å', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å', '‚Ü™ –ù–∞–∑–∞–¥']
                        text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π >'
                    else:
                        ans = ['‚úÖ Enable', '‚ùå Disable', '‚Ü™ Back']
                        text = '‚ùó Interaction with notification settings, select notification activity >'

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0], ans[1])
                    rmk.add(ans[2])

                    def ret(message, ans, bd_user):

                        if message.text not in ans or message.text == ans[2]:
                            res = None
                        else:
                            res = message.text

                        if res == None:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('settings', user))
                            return

                        if res in ['‚úÖ Enable', '‚úÖ –í–∫–ª—é—á–∏—Ç—å']:

                            bd_user['settings']['notifications'] = True
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = 'üîß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!'
                            else:
                                text = 'üîß Notifications have been activated!'

                            bot.send_message(message.chat.id, text, reply_markup = markup("settings", user))

                        if res in ['‚ùå Disable', '‚ùå –í—ã–∫–ª—é—á–∏—Ç—å']:

                            bd_user['settings']['notifications'] = False
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = 'üîß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã!'
                            else:
                                text = 'üîß Notifications have been disabled!'

                            bot.send_message(message.chat.id, text, reply_markup = markup("settings", user))

                        else:
                            return

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, ans, bd_user)

            if message.text in ["üëÖ –Ø–∑—ã–∫", "üëÖ Language"]:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        ans = ['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', '‚Ü™ –ù–∞–∑–∞–¥']
                        text = '‚ùó –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —è–∑—ã–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ >'
                    else:
                        ans = ['üá¨üáß English', 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', '‚Ü™ Back']
                        text = '‚ùó Interaction with the language setting, select the language >'

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0], ans[1])
                    rmk.add(ans[2])

                    def ret(message, ans, bd_user):

                        if message.text not in ans or message.text == ans[2]:
                            res = None
                        else:
                            res = message.text

                        if res == None:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('settings', user))
                            return

                        if res == ans[0]:
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'language_code': 'en' }} )
                        if res == ans[1]:
                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'language_code': 'ru' }} )
                        bd_user = users.find_one({"userid": user.id})

                        if bd_user['language_code'] == 'ru':
                            text = 'üîß –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ üá∑üá∫ –†—É—Å—Å–∫–∏–π!'
                        else:
                            text = 'üîß The language is set to üá¨üáß English!'

                        bot.send_message(message.chat.id, text, reply_markup = markup("settings", user))

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, ans, bd_user)

            if message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûï Add"]:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                        text = '‚û° | –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –¥—Ä—É–∑—å—è–º–∏.\n–í–∞–∂–Ω–æ! –í–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ!'
                    else:
                        ans = ['‚Ü™ Back']
                        text = '‚û° | Forward me any message from the person you want to become friends with.\nImportant! Your friend must be registered in the bot!'

                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                    rmk.add(ans[0])

                    def ret(message, ans, bd_user):
                        res = message
                        if res.text == ans[0] or res.forward_from == None:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('friends-menu', user))

                        else:
                            two_user = users.find_one({"userid": res.forward_from.id})
                            if two_user == None:
                                bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('friends-menu', user))

                            if two_user == bd_user:
                                bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('friends-menu', user))

                            else:

                                if 'friends_list' not in bd_user['friends']:
                                    bd_user['friends']['friends_list'] = []
                                    bd_user['friends']['requests'] = []
                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                                if 'friends_list' not in two_user['friends']:
                                    two_user['friends']['friends_list'] = []
                                    two_user['friends']['requests'] = []
                                    users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                                if bd_user['userid'] not in two_user['friends']['requests'] and bd_user['userid'] not in bd_user['friends']['friends_list']:

                                    two_user['friends']['requests'].append(bd_user['userid'])
                                    users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                                    bot.send_message(message.chat.id, f'‚úî', reply_markup = markup('friends-menu', user))
                                    notifications_manager('friend_request', two_user)

                                else:

                                    if bd_user['language_code'] == 'ru':
                                        text = f"üìú | –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö / –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –æ—Ç –≤–∞—Å!"

                                    else:
                                        text = f"üìú | This user is already a friend / has received a request from you!"

                                    bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))

                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                    bot.register_next_step_handler(msg, ret, ans, bd_user)

            if message.text in ["üìú –°–ø–∏—Å–æ–∫", "üìú List"]:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    def chunks(lst, n):
                        for i in range(0, len(lst), n):
                            yield lst[i:i + n]

                    friends_id = bd_user['friends']['friends_list']
                    page = 1

                    friends_name = []
                    friends_id_d = {}

                    for i in friends_id:
                        try:
                            if users.find_one({"userid": int(i)}) != None:
                                fr_name = bot.get_chat(int(i)).first_name
                                friends_name.append(fr_name)
                                friends_id_d[fr_name] = i
                        except:
                            pass

                    friends_chunks = list(chunks(list(chunks(friends_name, 2)), 3))

                    def work_pr(message, friends_id, page, friends_chunks, friends_id_d, mms = None):
                        global pages

                        if bd_user['language_code'] == 'ru':
                            text = "üìú | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                        else:
                            text = "üìú | Update..."

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)

                        if friends_chunks == []:

                            if bd_user['language_code'] == 'ru':
                                text = "üë• | –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                            else:
                                text = "üë• | The list is empty!"

                            bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))

                        else:

                            for el in friends_chunks[page-1]:
                                if len(el) == 2:
                                    rmk.add(el[0], el[1])
                                else:
                                    rmk.add(el[0], ' ')

                            if 3 - len(friends_chunks[page-1]) != 0:
                                for i in list(range(3 - len(friends_chunks[page-1]))):
                                    rmk.add(' ', ' ')

                            if len(friends_chunks) > 1:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                                else:
                                    com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                                rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])
                            else:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                                else:
                                    com_buttons = '‚Ü™ Back'

                                rmk.add(com_buttons)

                            def ret(message, bd_user, page, friends_chunks, friends_id, friends_id_d):
                                if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                    res = None
                                else:
                                    res = message.text

                                if res == None:
                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                                    else:
                                        text = "üë• | Return to the friends menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))

                                else:
                                    mms = None
                                    if res == '‚óÄ':
                                        if page - 1 == 0:
                                            page = 1
                                        else:
                                            page -= 1

                                    if res == '‚ñ∂':
                                        if page + 1 > len(friends_chunks):
                                            page = len(friends_chunks)
                                        else:
                                            page += 1

                                    else:
                                        if res in list(friends_id_d.keys()):
                                            fr_id = friends_id_d[res]
                                            text = member_profile(fr_id, bd_user['language_code'])
                                            mms = bot.send_message(message.chat.id, text, parse_mode = 'Markdown')

                                    work_pr(message, friends_id, page, friends_chunks, friends_id_d, mms = mms)

                            if mms == None:
                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            else:
                                msg = mms
                            bot.register_next_step_handler(msg, ret, bd_user, page, friends_chunks, friends_id, friends_id_d)

                    work_pr(message, friends_id, page, friends_chunks, friends_id_d)

            if message.text in ["üíå –ó–∞–ø—Ä–æ—Å—ã", "üíå Inquiries"]:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:
                    if 'requests' in bd_user['friends']:
                        id_friends = bd_user['friends']['requests']

                        if bd_user['language_code'] == 'ru':
                            text = "üíå | –ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ!"
                        else:
                            text = "üíå | The query menu is open!"

                        msg = bot.send_message(message.chat.id, text)

                        def work_pr(message, id_friends):
                            global pages, pagen
                            a = []

                            id_names = {}
                            friends = []
                            for i in id_friends:
                                try:
                                    userr = bot.get_chat(int(i))
                                    id_names[userr.first_name] = int(i)
                                    friends.append(userr.first_name)
                                except:
                                    pass

                            def chunks(lst, n):
                                for i in range(0, len(lst), n):
                                    yield lst[i:i + n]

                            fr_pages = list(chunks(friends, 3))
                            page = 1

                            pages_buttons = []
                            for i in range(len(fr_pages)):
                                pages_buttons.append([])

                            page_n = 0
                            for el in fr_pages:
                                for i in el:
                                    pages_buttons[page_n].append([f"‚úÖ {i}", f'‚ùå {i}'])
                                page_n += 1

                            if bd_user['language_code'] == 'ru':

                                com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                            else:

                                com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)

                            if pages_buttons != []:
                                for i in pages_buttons[page-1]:
                                    rmk.add( i[0], i[1] )

                                for nn in range(3 - int(len(pages_buttons[page-1]))):
                                    rmk.add( ' ', ' ')

                            else:
                                for i in range(3):
                                    rmk.add( ' ', ' ')

                            if len(pages_buttons) > 1:
                                rmk.add( com_buttons[0], com_buttons[1], com_buttons[2] )
                            else:
                                rmk.add( com_buttons[1] )

                            pages = []
                            if pages_buttons != []:
                                for ii in pages_buttons[page-1]:
                                    for iii in ii:
                                        pages.append(iii)

                            pagen = page

                            if bd_user['language_code'] == 'ru':
                                text = "üíå | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                            else:
                                text = "üíå | Update..."

                            def ret(message, id_friends, bd_user, user):
                                if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                    res = None

                                else:
                                    if message.text in pages or message.text in ['‚óÄ', '‚ñ∂']:
                                        res = message.text

                                    else:
                                        res = None

                                if res == None:
                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                                    else:
                                        text = "üë• | Return to the friends menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))
                                    return None
                                else:
                                    if res == '‚óÄ':
                                        if page - 1 == 0:
                                            page = 1
                                        else:
                                            page -= 1

                                    if res == '‚ñ∂':
                                        if page + 1 > len(pages_buttons):
                                            page = len(pages_buttons)
                                        else:
                                            page += 1

                                    else:
                                        uid = id_names[res[2:]]

                                        if list(res)[0] == '‚ùå':
                                            notifications_manager("friend_rejection", users.find_one({"userid": int(uid) }), user.first_name)

                                            if bd_user['language_code'] == 'ru':
                                                text = "üë• | –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω—ë–Ω!"
                                            else:
                                                text = "üë• | Friend request rejected!"

                                            bot.send_message(message.chat.id, text)

                                            bd_user['friends']['requests'].remove(uid)
                                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )


                                        if list(res)[0] == '‚úÖ':
                                            notifications_manager("friend_accept", users.find_one({"userid": int(uid) }), user.first_name)

                                            if bd_user['language_code'] == 'ru':
                                                text = "üë• | –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ–¥–æ–±—Ä–µ–Ω!"
                                            else:
                                                text = "üë• | The friend request is approved!"

                                            bot.send_message(message.chat.id, text)

                                            bd_user['friends']['requests'].remove(uid)
                                            bd_user['friends']['friends_list'].append(uid)
                                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                                            two_user = users.find_one({"userid": int(uid) })
                                            two_user['friends']['friends_list'].append(bd_user['userid'])
                                            users.update_one( {"userid": int(uid) }, {"$set": {'friends': two_user['friends'] }} )

                                    work_pr(message, id_friends)

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, id_friends, bd_user, user)

                        work_pr(message, id_friends)

            if message.text in ['‚ûñ –£–¥–∞–ª–∏—Ç—å', '‚ûñ Delete']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    friends_id = bd_user['friends']['friends_list']
                    page = 1

                    if friends_id != []:
                        if bd_user['language_code'] == 'ru':
                            text = "‚ûñ | –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–∑–µ–π > "
                        else:
                            text = "‚ûñ | Select the user to remove from friends >"
                        bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))

                    def work_pr(message, friends_id, page):
                        global pages
                        a = []

                        def ret(message):
                            if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                a.append(None)
                                return False
                            else:
                                a.append(message.text)

                            return False

                        if bd_user['language_code'] == 'ru':
                            text = "üíå | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                        else:
                            text = "üíå | Update..."

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                        friends_name = []
                        id_names = {}

                        def chunks(lst, n):
                            for i in range(0, len(lst), n):
                                yield lst[i:i + n]

                        for i in friends_id:
                            try:
                                fr_name = bot.get_chat(int(i)).first_name
                                friends_name.append(fr_name)
                                id_names[bot.get_chat(int(i)).first_name] = i
                            except:
                                pass

                        friends_chunks = list(chunks(list(chunks(friends_name, 2)), 3))

                        if friends_chunks == []:

                            if bd_user['language_code'] == 'ru':
                                text = "üë• | –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!"
                            else:
                                text = "üë• | The list is empty!"

                            bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))
                            return

                        else:

                            for el in friends_chunks[page-1]:
                                if len(el) == 2:
                                    rmk.add(el[0], el[1])
                                else:
                                    rmk.add(el[0], ' ')

                            if 3 - len(friends_chunks[page-1]) != 0:
                                for i in list(range(3 - len(friends_chunks[page-1]))):
                                    rmk.add(' ', ' ')

                            if len(friends_chunks) > 1:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                                else:
                                    com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']

                                rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])
                            else:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                                else:
                                    com_buttons = '‚Ü™ Back'

                                rmk.add(com_buttons)

                            def ret(message, friends_id, page, bd_user):
                                if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                    res = None
                                else:
                                    res = message.text

                                if res == None:
                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –¥—Ä—É–∑–µ–π!"
                                    else:
                                        text = "üë• | Return to the friends menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))
                                    return None
                                else:
                                    if res == '‚óÄ':
                                        if page - 1 == 0:
                                            page = 1
                                        else:
                                            page -= 1

                                    if res == '‚ñ∂':
                                        if page + 1 > len(friends_chunks):
                                            page = len(friends_chunks)
                                        else:
                                            page += 1

                                    else:
                                        uid = id_names[res]

                                        if bd_user['language_code'] == 'ru':
                                            text = "üë• | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π!"
                                        else:
                                            text = "üë• | The user has been removed from friends!"

                                        bd_user['friends']['friends_list'].remove(uid)
                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'friends': bd_user['friends'] }} )

                                        two_user = users.find_one({"userid": uid})
                                        two_user['friends']['friends_list'].remove(bd_user['userid'])
                                        users.update_one( {"userid": two_user['userid']}, {"$set": {'friends': two_user['friends'] }} )

                                        if bd_user['friends']['friends_list'] == []:
                                            bot.send_message(message.chat.id, text, reply_markup = markup('friends-menu', user))
                                            return
                                        else:
                                            bot.send_message(message.chat.id, text)

                                work_pr(message, friends_id, page)

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, friends_id, page, bd_user)

                    work_pr(message, friends_id, page)

            if message.text in ['üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å', 'üëÅ‚Äçüó® Profile']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    if bd_user['language_code'] == 'ru':
                        text = 'üëÅ‚Äçüó® | –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–∫—Ä—ã—Ç–∞!'
                    else:
                        text = 'üëÅ‚Äçüó® | The profile panel is open!'

                    bot.send_message(message.chat.id, text, reply_markup = markup("profile", user))

            # nl = ['üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'üé¢ –†–µ–π—Ç–∏–Ω–≥', '‚Ü™ –ù–∞–∑–∞–¥']
            # nl = ['üìú Information', 'üéÆ Inventory', 'üé¢ Rating', '‚Ü™ Back']

            if message.text in ['üé¢ –†–µ–π—Ç–∏–Ω–≥', 'üé¢ Rating']:
                if bd_user != None:

                    def f_m(x):
                        return 5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100

                    mr_l = list(sorted(list(users.find({})), key=lambda x: x['coins'], reverse=True))
                    lv_l = list(sorted(list(users.find({})), key=lambda x: (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], reverse=True))

                    du_mc, du_lv = [{}, {}, {}], [{}, {}, {}]


                    i = -1
                    us_i_l = []
                    while du_mc[0] == {} or du_mc[1] == {} or du_mc[2] == {}:
                        i += 1
                        if i >= len(mr_l):
                            break

                        if du_mc[0] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[0] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                        if du_mc[1] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[1] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                        if du_mc[2] == {} and mr_l[i]['userid'] not in us_i_l:
                            try:
                                m = bot.get_chat(mr_l[i]['userid'])
                                du_mc[2] = {'ui': mr_l[i]['userid'], 'coins': mr_l[i]['coins'], 'mn': m.first_name}

                                us_i_l.append(mr_l[i]['userid'])
                            except:
                                pass

                    i = -1
                    us_i_m = []
                    while du_lv[0] == {} or du_lv[1] == {} or du_lv[2] == {}:
                        i += 1
                        if i >= len(lv_l):
                            break

                        if du_lv[0] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[0] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                        if du_lv[1] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[1] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                        if du_lv[2] == {} and lv_l[i]['userid'] not in us_i_m:
                            try:
                                m = bot.get_chat(lv_l[i]['userid'])
                                x = lv_l[i]
                                du_lv[2] = {'ui': lv_l[i]['userid'], 'lvl': lv_l[i]['lvl'][0], 'exp': (x['lvl'][0] - 1) * (5 * x['lvl'][0] * x['lvl'][0] + 50 * x['lvl'][0] + 100) +  x['lvl'][1], 'mn': m.first_name }

                                us_i_m.append(lv_l[i]['userid'])
                            except:
                                pass

                    if bd_user['language_code'] == 'ru':
                        text =  f'*‚îå* üé¢ –†–µ–π—Ç–∏–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é:\n'
                        text += f"*‚îú* –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #{lv_l.index(bd_user)+1}\n\n"

                        n = 0
                        for i in du_lv:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 3:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* –£—Ä. {i['lvl']} (–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞ {i['exp']})\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* –£—Ä. {i['lvl']} (–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞ {i['exp']})\n"

                        text += f'\n\n*‚îå* üé¢ –†–µ–π—Ç–∏–Ω–≥ –ø–æ –º–æ–Ω–µ—Ç–∞–º:\n'
                        text += f"*‚îú* –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #{mr_l.index(bd_user)+1}\n\n"

                        n = 0
                        for i in du_mc:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 3:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* –ú–æ–Ω–µ—Ç—ã {i['coins']}\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* –ú–æ–Ω–µ—Ç—ã {i['coins']}\n"
                    else:
                        text =  f'*‚îå* üé¢ Rating by level:\n'
                        text += f"*‚îú* Your place in the ranking: #{lv_l.index(bd_user)+1}\n\n"

                        n = 0
                        for i in du_lv:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 3:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* lvl {i['lvl']} (Total experience {i['exp']})\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* lvl {i['lvl']} (Total experience {i['exp']})\n"

                        text += f'\n\n*‚îå* üé¢ Coin Rating:\n'
                        text += f"*‚îú* Your place in the ranking: #{mr_l.index(bd_user)+1}\n\n"

                        n = 0
                        for i in du_mc:
                            n += 1
                            if i == {}:
                                pass
                            else:
                                if n != 3:
                                    text += f"*‚îú* #{n} *{i['mn']}*:\n      *‚îî* Coins {i['coins']}\n"
                                else:
                                    text += f"*‚îî* #{n} *{i['mn']}*:\n      *‚îî* Coins {i['coins']}\n"

                    bot.send_message(message.chat.id, text, parse_mode = "Markdown")



            if message.text in ['üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'üéÆ Inventory']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:

                    def chunks(lst, n):
                        for i in range(0, len(lst), n):
                            yield lst[i:i + n]

                    data_items = items_f['items']
                    items = bd_user['inventory']

                    if items == []:

                        if bd_user['language_code'] == 'ru':
                            text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                        else:
                            text = 'Inventory is empty.'

                        bot.send_message(message.chat.id, text)

                        return

                    items_id = {}
                    page = 1
                    items_names = []

                    if bd_user['language_code'] == 'ru':
                        lg = "nameru"
                    else:
                        lg = "nameen"

                    for i in items:
                        items_id[ items_f['items'][str(i)][lg] ] = i
                        items_names.append( items_f['items'][str(i)][lg] )

                    items_sort = []
                    d_it_sort = {}
                    ind_sort_it = {}

                    for i in items_names:
                        if i in list(d_it_sort.keys()):
                            d_it_sort[i] += 1
                        else:
                            d_it_sort[i] = 1

                    for n in list(d_it_sort.keys()):
                        col = d_it_sort[n]
                        name = n
                        items_sort.append(f'{n} x{col}')
                        ind_sort_it[f'{n} x{col}'] = n

                    pages = list(chunks(list(chunks(items_sort, 2)), 3))

                    for i in pages:
                        for ii in i:
                            if len(ii) == 1:
                                ii.append(' ')

                        if len(i) != 3:
                            for iii in range(3 - len(i)):
                                i.append([' ', ' '])

                    if bd_user['language_code'] == 'ru':
                        textt = 'üéà | –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç–∫—Ä—ã—Ç'
                    else:
                        textt = 'üéà | Inventory is open'

                    bot.send_message(message.chat.id, textt)

                    def work_pr(message, pages, page, items_id, ind_sort_it):
                        a = []
                        l_pages = pages
                        l_page = page
                        l_ind_sort_it = ind_sort_it

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                        for i in pages[page-1]:
                            rmk.add(i[0], i[1])

                        if len(pages) > 1:
                            if bd_user['language_code'] == 'ru':
                                com_buttons = ['‚óÄ', '‚Ü™ –ù–∞–∑–∞–¥', '‚ñ∂']
                                textt = 'üéà | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...'
                            else:
                                com_buttons = ['‚óÄ', '‚Ü™ Back', '‚ñ∂']
                                textt = 'üéà | Update...'

                            rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                        else:
                            if bd_user['language_code'] == 'ru':
                                com_buttons = '‚Ü™ –ù–∞–∑–∞–¥'
                                textt = 'üéà | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...'
                            else:
                                textt = 'üéà | Update...'
                                com_buttons = '‚Ü™ Back'

                            rmk.add(com_buttons)

                        def ret(message, l_pages, l_page, l_ind_sort_it, pages, page, items_id, ind_sort_it, bd_user, user):
                            if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back']:
                                res = None
                            else:
                                if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂']:
                                    res = message.text
                                else:
                                    res = None

                            if res == None:
                                if bd_user['language_code'] == 'ru':
                                    text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è!"
                                else:
                                    text = "üë• | Return to the profile menu!"

                                bot.send_message(message.chat.id, text, reply_markup = markup('profile', user))
                                return '12'

                            else:
                                if res == '‚óÄ':
                                    if page - 1 == 0:
                                        page = 1
                                    else:
                                        page -= 1

                                    work_pr(message, pages, page, items_id, ind_sort_it)

                                elif res == '‚ñ∂':
                                    if page + 1 > len(l_pages):
                                        page = len(l_pages)
                                    else:
                                        page += 1

                                    work_pr(message, pages, page, items_id, ind_sort_it)

                                else:
                                    item_id = items_id[ l_ind_sort_it[res] ]
                                    item = items_f['items'][item_id]
                                    type = item['type']

                                    if bd_user['language_code'] == 'ru':
                                        if item['type'] == '+heal':
                                            type = '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ'
                                            d_text = f"*‚îî* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {item['act']}"

                                        elif item['type'] == '+eat':
                                            type = '–µ–¥–∞'
                                            d_text = f"*‚îî* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {item['act']}"

                                        elif item['type'] == 'egg':
                                            if item['inc_type'] == 'random': eg_q = '—Ä–∞–Ω–¥–æ–º'
                                            if item['inc_type'] == 'com': eg_q = '–æ–±—ã—á–Ω–∞—è'
                                            if item['inc_type'] == 'unc': eg_q = '–Ω–µ–æ–±—ã—á–Ω–∞—è'
                                            if item['inc_type'] == 'rare': eg_q = '—Ä–µ–¥–∫–∞—è'
                                            if item['inc_type'] == 'myt': eg_q = '–º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è'
                                            if item['inc_type'] == 'legendary': eg_q = '–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è'

                                            type = '—è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞'
                                            d_text = f"*‚îú* –ò–Ω–∫—É–±–∞—Ü–∏—è: {item['incub_time']}{item['time_tag']}\n"
                                            d_text += f"*‚îî* –†–µ–¥–∫–æ—Å—Ç—å —è–π—Ü–∞: {eg_q}"

                                        elif item['type'] in ['game_ac', 'unv_ac', 'journey_ac', 'hunt_ac']:
                                            type = '–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'
                                            d_text = f"*‚îî* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {item['act']}"

                                        elif item['type'] == 'None':
                                            type = '–ø—É—Å—Ç—ã—à–∫–∞'
                                            d_text = f"*‚îî* –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –∏ –Ω–µ –¥–ª—è —á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–∞"

                                        text =  f"*‚îå* *üé¥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ*\n"
                                        text += f"*‚îú* –ù–∞–∑–≤–∞–Ω–∏–µ: {item['nameru']}\n"
                                        text += f"*‚îú* –¢–∏–ø: {type}\n"
                                        text += d_text

                                    else:
                                        if item['type'] == '+heal':
                                            type = 'medicine'
                                            d_text = f"*‚îî* Effectiveness: {item['act']}"

                                        elif item['type'] == '+eat':
                                            type = 'eat'
                                            d_text = f"*‚îî* Effectiveness: {item['act']}"

                                        elif item['type'] == 'egg':
                                            if item['inc_type'] == 'random': eg_q = 'random'
                                            if item['inc_type'] == 'com': eg_q = 'common'
                                            if item['inc_type'] == 'unc': eg_q = 'uncommon'
                                            if item['inc_type'] == 'rare': eg_q = 'rare'
                                            if item['inc_type'] == 'myt': eg_q = 'mystical'
                                            if item['inc_type'] == 'legendary': eg_q = 'legendary'

                                            type = 'dinosaur egg'
                                            d_text = f"*‚îî* Incubation: {item['incub_time']}{item['time_tag']}\n"
                                            d_text += f"*‚îî* The rarity of eggs: {eg_q}"

                                        elif item['type'] in ['game_ac', 'unv_ac', 'journey_ac', 'hunt_ac']:
                                            type = 'active game item'
                                            d_text = f"*‚îî* Effectiveness: {item['act']}"

                                        elif item['type'] == 'None':
                                            type = 'dummy'
                                            d_text = f"*‚îî* Does nothing and is not needed for anything"

                                        text =  f"*‚îå* *üé¥ Subject information*\n"
                                        text += f"*‚îú* Name: {item['nameen']}\n"
                                        text += f"*‚îú* Type: {type}\n"
                                        text += d_text


                                    bot.send_message(message.chat.id, text, reply_markup = markup('profile', user), parse_mode = 'Markdown')

                        msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                        bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, pages, page, items_id, ind_sort_it, bd_user, user)



                    work_pr(message, pages, page, items_id, ind_sort_it)

            if message.text in ['üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üìú Information']:
                bd_user = users.find_one({"userid": user.id})
                if bd_user != None:
                    text = member_profile(user.id, lang = bd_user['language_code'])
                    bot.send_message(message.chat.id, text, parse_mode = 'Markdown')


            bd_user = users.find_one({"userid": user.id})
            tr_c = False
            if bd_user != None and len(list(bd_user['dinos'])) > 0:
                if len(list(bd_user['dinos'])) > 1:
                    tr_c = True

                else:
                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['status'] == 'dino':
                        tr_c = True

            if tr_c == True:

                if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                    bd_user = users.find_one({"userid": user.id})

                    if bd_user['language_code'] == 'ru':
                        text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                    else:
                        text = '‚Ü© Return to the activity menu'

                    bot.send_message(message.chat.id, text, reply_markup = markup('actions', user))

                if message.text in ['üí¨ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', 'üí¨ Rename']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        n_dp, dp_a = dino_pre_answer(message)

                        def rename(message, bd_user, user, dino_user_id, dino):
                            if bd_user['language_code'] == 'ru':
                                text = f"ü¶ñ | –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è {dino['name']}\n–†–∞–∑–º–µ—Ä: –Ω–µ –±–æ–ª–µ–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤\n>"
                                ans = ['‚Ü™ –ù–∞–∑–∞–¥']
                            else:
                                text = f"ü¶ñ | Enter a new name for {dino['name']}\nSize: no more than 20 characters\n>"
                                ans = ['‚Ü™ Back']

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                            rmk.add(ans[0])

                            def ret(message, ans, bd_user):
                                if message.text == ans[0]:
                                    bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('settings', user))
                                    return

                                dino_name = message.text

                                if len(dino_name) > 20:

                                    if bd_user['language_code'] == 'ru':
                                        text = f"ü¶ñ | –ù–æ–≤–æ–µ –∏–º—è –±–æ–ª—å—à–µ 20-—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤!"
                                    else:
                                        text = f"ü¶ñ | The new name is more than 20 characters!"

                                    msg = bot.send_message(message.chat.id, text)

                                else:
                                    if bd_user['language_code'] == 'ru':
                                        text = f"ü¶ñ | –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å {dino['name']} > {dino_name}?"
                                        ans2 = ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '‚Ü™ –ù–∞–∑–∞–¥']
                                    else:
                                        text = f"ü¶ñ | Rename {dino['name']} > {dino_name}?"
                                        ans2 = ['‚úÖ Confirm', '‚Ü™ Back']

                                    rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                    rmk.add(ans2[0])
                                    rmk.add(ans2[1])

                                    def ret2(message, ans2, bd_user):
                                        if message.text == ans2[1]:
                                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('settings', user))
                                            return
                                        else:
                                            res = message.text

                                        if res in ['‚úÖ Confirm', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é']:

                                            bd_user['dinos'][str(dino_user_id)]['name'] = dino_name
                                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                                            bot.send_message(message.chat.id, f'‚úÖ', reply_markup = markup('settings', user))

                                    msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                    bot.register_next_step_handler(msg, ret2, ans2, bd_user)

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, ans, bd_user)

                        if n_dp == 1:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('settings', user))
                            return

                        if n_dp == 2:
                            bd_dino = dp_a
                            rename(message, bd_user, user, list(bd_user['dinos'].keys())[0], dp_a)

                        if n_dp == 3:
                            rmk = dp_a[0]
                            text = dp_a[1]
                            dino_dict = dp_a[2]

                            def ret(message, dino_dict, user, bd_user):
                                rename(message, bd_user, user, dino_dict[message.text][1], dino_dict[message.text][0])

                            msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, dino_dict, user, bd_user)


                if message.text in ['üïπ –î–µ–π—Å—Ç–≤–∏—è', 'üïπ Actions']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        if bd_user['language_code'] == 'ru':
                            text = 'üïπ –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∞!'
                        else:
                            text = 'üïπ The action panel is open!'

                        bot.send_message(message.chat.id, text, reply_markup = markup("actions", user))

                if message.text in ['üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å', 'üåô Put to bed']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino != None:
                            if dino['activ_status'] == 'pass_active':
                                if dino['stats']['unv'] >= 90:

                                    if bd_user['language_code'] == 'ru':
                                        text = 'üåô –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Ö–æ—á–µ—Ç —Å–ø–∞—Ç—å!'
                                    else:
                                        text = "üåô The dinosaur doesn't want to sleep!"

                                    bot.send_message(message.chat.id, text, reply_markup = markup("actions", user))

                                else:

                                    bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['activ_status'] = 'sleep'
                                    users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                                    if bd_user['language_code'] == 'ru':
                                        text = 'üåô –í—ã —É–ª–æ–∂–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Å–ø–∞—Ç—å!'
                                    else:
                                        text = "üåô You put the dinosaur to sleep!"

                                    bot.send_message(message.chat.id, text , reply_markup = markup('actions', user))

                        else:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('actions', user))
                            return


                if message.text in ['üåô –ü—Ä–æ–±—É–¥–∏—Ç—å', 'üåô Awaken']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino['activ_status'] == 'sleep' and dino != None:
                            r_n = random.randint(0, 20)

                            bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['activ_status'] = 'pass_active'
                            bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['stats']['mood'] -= r_n

                            if bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['stats']['mood'] < 0:
                                bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['stats']['mood'] = 0

                            users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = f'üåô –í–∞—à –¥–∏–Ω–æ–∑–∞–≤—Ä –ø—Ä–æ–±—É–¥–∏–ª—Å—è. –û–Ω —Å–∏–ª—å–Ω–æ –Ω–µ –¥–æ–≤–æ–ª–µ–Ω —á—Ç–æ –≤—ã –µ–≥–æ —Ä–∞–∑–±—É–¥–∏–ª–∏!\n–î–∏–Ω–æ–∑–∞–≤—Ä –ø–æ—Ç–µ—Ä—è–ª {r_n}% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.'
                            else:
                                text = f"üåô Your dinosaur has awakened. He is very unhappy that you woke him up!\nDinosaur lost {r_n}% of mood."

                            bot.send_message(message.chat.id, text , reply_markup = markup('actions', user))

                        else:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('actions', user))
                            return

                if message.text in ['üéë –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üéë Journey']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino['activ_status'] == 'pass_active' and dino != None:
                            markup_inline = types.InlineKeyboardMarkup()

                            if bd_user['language_code'] == 'ru':
                                text = 'üå≥ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?'

                                item_0 = types.InlineKeyboardButton( text = '10 –º–∏–Ω.', callback_data = f"10min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_1 = types.InlineKeyboardButton( text = '30 –º–∏–Ω.', callback_data = f"30min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_2 = types.InlineKeyboardButton( text = '60 –º–∏–Ω.', callback_data = f"60min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_3 = types.InlineKeyboardButton( text = '90 –º–∏–Ω.', callback_data = f"90min_journey_{str(bd_user['settings']['dino_id'])}")

                            else:
                                text = "üå≥ How long to send a dinosaur on a journey?"

                                item_0 = types.InlineKeyboardButton( text = '10 min.', callback_data = f"10min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_1 = types.InlineKeyboardButton( text = '30 min.', callback_data = f"30min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_2 = types.InlineKeyboardButton( text = '60 min.', callback_data = f"60min_journey_{str(bd_user['settings']['dino_id'])}")

                                item_3 = types.InlineKeyboardButton( text = '90 min.', callback_data = f"90min_journey_{str(bd_user['settings']['dino_id'])}")

                            markup_inline.add(item_0, item_1, item_2, item_3)

                            bot.send_message(message.chat.id, text, reply_markup = markup_inline)

                        else:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('actions', user))
                            return


                if message.text in ['üéë –í–µ—Ä–Ω—É—Ç—å', 'üéë Call']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if dino['activ_status'] == 'journey' and dino != None:
                            if random.randint(1,2) == 1:

                                if bd_user['language_code'] == 'ru':
                                    text = f'ü¶ñ | –í—ã –≤–µ—Ä–Ω—É–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∏–∑ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è!\n–í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏:\n'

                                    if bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_log'] == []:
                                        text += '–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ!'
                                    else:
                                        n = 1
                                        for el in bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_log']:
                                            text += f'<b>{n}.</b> {el}\n\n'
                                            n += 1
                                else:
                                    text = f"ü¶ñ | Turned the dinosaur out of the journey!\nHere's what happened on his journey:\n"

                                    if bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_log'] == []:
                                        text += 'Nothing happened!'
                                    else:
                                        n = 1
                                        for el in bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_log']:
                                            text += f'<b>{n}.</b> {el}\n\n'
                                            n += 1


                                bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['activ_status'] = 'pass_active'
                                del bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_time']
                                del bd_user['dinos'][ list(bd_user['dinos'].keys())[0] ]['journey_log']

                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                                bot.send_message(message.chat.id, text, reply_markup = markup('actions', user), parse_mode = 'html')


                            else:
                                if bd_user['language_code'] == 'ru':
                                    text = f'üîá | –í—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...'
                                else:
                                    text = f"üîá | You tried to bring the dinosaur back, but something went wrong..."

                                bot.send_message(message.chat.id, text , reply_markup = markup('actions', user))
                        else:
                            bot.send_message(message.chat.id, f'‚ùå', reply_markup = markup('actions', user))
                            return


                if message.text[:11] in ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä:'] or message.text[:7] in [ 'ü¶ñ Dino:']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        if bd_user['language_code'] == 'ru':
                            did = int(message.text[12:])
                        else:
                            did = int(message.text[8:])

                        if did == int(bd_user['settings']['dino_id']):
                            ll = list(bd_user['dinos'].keys())
                            ind = list(bd_user['dinos'].keys()).index(str(did))

                            if ind + 1 == len(ll):
                                bd_user['settings']['dino_id'] = ll[0]
                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )
                            else:
                                bd_user['settings']['dino_id'] = list(bd_user['dinos'].keys())[int(ll[did-1])]
                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'settings': bd_user['settings'] }} )

                            if bd_user['language_code'] == 'ru':
                                text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ {bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['name']}"
                            else:
                                text = f"You have chosen a dinosaur {bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['name']}"

                            bot.send_message(message.chat.id, text , reply_markup = markup('actions', user))


                if message.text in ['üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üéÆ Entertainments']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]

                        if bd_user['language_code'] == 'ru':
                            text = f"üéÆ | –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π!"

                        else:
                            text = f"üéÆ | Redirecting to the entertainment menu!"

                        bot.send_message(message.chat.id, text, reply_markup = markup('games', user))

                if message.text in ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'ü™Å –ó–º–µ–π', 'üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèê –ú—è—á', 'üéÆ Console', 'ü™Å Snake', 'üèì Ping Pong', 'üèê Ball']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]
                        if dino['activ_status'] == 'pass_active':

                            markup_inline = types.InlineKeyboardMarkup(row_width=2)

                            if bd_user['language_code'] == 'ru':
                                text = ['25 - 60 –º–∏–Ω.', '60 - 90 –º–∏–Ω.', '90 - 120 –º–∏–Ω.']
                                m_text = 'üéÆ –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã > '
                            else:
                                text = ['25 - 60 min.', '60 - 90 min.', '90 - 120 min.']
                                m_text = 'üéÆ Specify the allowed game time >'

                            if message.text in ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'üéÆ Console']:
                                g = 'con'
                            elif message.text in ['ü™Å –ó–º–µ–π', 'ü™Å Snake']:
                                g = 'sna'
                            elif message.text in ['üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèì Ping Pong']:
                                g = 'pin'
                            elif message.text in ['üèê –ú—è—á', 'üèê Ball']:
                                g = 'bal'

                            item_1 = types.InlineKeyboardButton( text = text[0], callback_data = f"1_{g}_game_{str(bd_user['settings']['dino_id'])}")
                            item_2 = types.InlineKeyboardButton( text = text[1], callback_data = f"2_{g}_game_{str(bd_user['settings']['dino_id'])}")
                            item_3 = types.InlineKeyboardButton( text = text[2], callback_data = f"3_{g}_game_{str(bd_user['settings']['dino_id'])}")
                            markup_inline.add(item_1, item_2, item_3)

                            bot.send_message(message.chat.id, m_text, reply_markup = markup_inline)

                if message.text in ['‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', '‚ùå Stop the game']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:
                        dino = bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]
                        if dino['activ_status'] == 'game':

                            if dino['game_%'] == 1:
                                rt = random.randint(1,3)

                            if dino['game_%'] == 0.5:
                                rt = 1

                            if dino['game_%'] == 0.9:
                                rt = random.randint(1,2)

                            if rt == 1:

                                if dino['game_%'] == 1:
                                    bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['stats']['mood'] -= 20

                                    if bd_user['language_code'] == 'ru':
                                        text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å, –Ω–æ –≤—ã –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏, –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–æ –Ω–∞ 20%!"

                                    else:
                                        text = f"üéÆ | The dinosaur liked to play, but you stopped him, his mood is reduced by 20%!"

                                if dino['game_%'] == 0.5:

                                    if bd_user['language_code'] == 'ru':
                                        text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ –æ—Å–æ–±–æ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å, –æ–Ω –Ω–µ —Ç–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ..."

                                    else:
                                        text = f"üéÆ | The dinosaur didn't really like playing, he doesn't lose his mood..."

                                if dino['game_%'] == 0.9:
                                    bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['stats']['mood'] -= 5

                                    if bd_user['language_code'] == 'ru':
                                        text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω —á—Ç–æ –≤—ã –µ–≥–æ –æ—Ç–≤–ª–µ–∫–ª–∏, –æ–Ω —Ç–µ—Ä—è–µ—Ç 5% –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è..."

                                    else:
                                        text = f"üéÆ | The dinosaur is a little upset that you distracted him, he loses 5% of his mood..."

                                bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['activ_status'] = 'pass_active'
                                del bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['game_time']
                                del bd_user['dinos'][ str(bd_user['settings']['dino_id']) ]['game_%']


                                users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )
                                bot.send_message(message.chat.id, text, reply_markup = markup('games', user))

                            else:

                                if bd_user['language_code'] == 'ru':
                                    text = f"üéÆ | –î–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ—Ä–≤–∞—Ç—å –æ—Ç –∏–≥—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –ò–º–µ–π—Ç–µ –≤–≤–∏–¥—É, –¥–∏–Ω–æ–∑–∞–≤—Ä –±—É–¥–µ—Ç —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω."

                                else:
                                    text = f"üéÆ | It is impossible to tear the dinosaur away from the game, try again. Keep in mind, the dinosaur will be upset."

                                bot.send_message(message.chat.id, text, reply_markup = markup('games', user))

                if message.text in ['üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å', 'üç£ Feed']:
                    bd_user = users.find_one({"userid": user.id})
                    if bd_user != None:

                        if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'sleep':

                            if bd_user['language_code'] == 'ru':
                                text = '–í–æ –≤—Ä–µ–º—è —Å–Ω–∞ –Ω–µ–ª—å–∑—è –∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞.'
                            else:
                                text = 'During sleep, you can not feed the dinosaur.'

                            bot.send_message(message.chat.id, text)
                            return

                        def chunks(lst, n):
                            for i in range(0, len(lst), n):
                                yield lst[i:i + n]

                        nitems = bd_user['inventory']

                        if nitems == []:

                            if bd_user['language_code'] == 'ru':
                                text = '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.'
                            else:
                                text = 'Inventory is empty.'

                            bot.send_message(message.chat.id, text)
                            return

                        data_items = items_f['items']
                        items = []
                        items_id = {}
                        page = 1
                        items_names = []

                        for i in nitems:
                            if data_items[str(i)]['type'] == "+eat":
                                items.append(i)

                        if items == []:

                            if bd_user['language_code'] == 'ru':
                                text = 'ü•û | –í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è.'
                            else:
                                text = 'ü•û | There are no food items in the inventory.'

                            bot.send_message(message.chat.id, text)
                            return


                        if bd_user['language_code'] == 'ru':
                            lg = "nameru"
                        else:
                            lg = "nameen"

                        for i in items:
                            items_id[ items_f['items'][str(i)][lg] ] = i
                            items_names.append( items_f['items'][str(i)][lg] )

                        items_sort = []
                        d_it_sort = {}
                        ind_sort_it = {}

                        for i in items_names:
                            if i in list(d_it_sort.keys()):
                                d_it_sort[i] += 1
                            else:
                                d_it_sort[i] = 1

                        for n in list(d_it_sort.keys()):
                            col = d_it_sort[n]
                            name = n
                            items_sort.append(f'{n} x{col}')
                            ind_sort_it[f'{n} x{col}'] = n

                        pages = list(chunks(list(chunks(items_sort, 2)), 3))

                        for i in pages:
                            for ii in i:
                                if len(ii) == 1:
                                    ii.append(' ')

                            if len(i) != 3:
                                for iii in range(3 - len(i)):
                                    i.append([' ', ' '])

                        def work_pr(message, pages, page, items_id, ind_sort_it):
                            global l_pages, l_page, l_ind_sort_it
                            a = []
                            l_pages = pages
                            l_page = page
                            l_ind_sort_it = ind_sort_it

                            def ret(message):
                                global l_pages, l_page, l_ind_sort_it
                                if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                                    a.append(None)
                                    return False
                                else:
                                    if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂']:
                                        a.append(message.text)
                                    else:
                                        a.append(None)
                                    return False

                            rmk = types.ReplyKeyboardMarkup(resize_keyboard = True, row_width = 3)
                            for i in pages[page-1]:
                                rmk.add(i[0], i[1])

                            if len(pages) > 1:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = ['‚óÄ', '‚Ü© –ù–∞–∑–∞–¥', '‚ñ∂']
                                    textt = 'üçï | –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
                                else:
                                    com_buttons = ['‚óÄ', '‚Ü© Back', '‚ñ∂']
                                    textt = 'üçï | Choose what you want to feed the dinosaur >'

                                rmk.add(com_buttons[0], com_buttons[1], com_buttons[2])

                            else:
                                if bd_user['language_code'] == 'ru':
                                    com_buttons = '‚Ü© –ù–∞–∑–∞–¥'
                                    textt = 'üçï | –í—ã–±–µ—Ä–∏—Ç–µ —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ > '
                                else:
                                    textt = 'üçï | Choose what you want to feed the dinosaur >'
                                    com_buttons = '‚Ü© Back'

                                rmk.add(com_buttons)

                            def ret(message, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it):
                                if message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:
                                    res = None

                                else:
                                    if message.text in list(l_ind_sort_it.keys()) or message.text in ['‚óÄ', '‚ñ∂']:
                                        res = message.text
                                    else:
                                        res = None


                                if res == None:
                                    if bd_user['language_code'] == 'ru':
                                        text = "üë• | –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π!"
                                    else:
                                        text = "üë• | Return to the friends menu!"

                                    bot.send_message(message.chat.id, text, reply_markup = markup('actions', user))
                                    return '12'
                                else:
                                    if res == '‚óÄ':
                                        if page - 1 == 0:
                                            page = 1
                                        else:
                                            page -= 1

                                        work_pr(message, pages, page, items_id, ind_sort_it)

                                    elif res == '‚ñ∂':
                                        if page + 1 > len(l_pages):
                                            page = len(l_pages)
                                        else:
                                            page += 1

                                        work_pr(message, pages, page, items_id, ind_sort_it)

                                    else:
                                        item_id = items_id[ l_ind_sort_it[res] ]
                                        item = items_f['items'][item_id]
                                        bd_dino = bd_user['dinos'][ bd_user['settings']['dino_id'] ]
                                        d_dino = json_f['elements'][ str(bd_dino['dino_id']) ]

                                        if bd_user['language_code'] == 'ru':
                                            if item['class'] == 'ALL':
                                                text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {item['nameru']}!"
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act']

                                            elif item['class'] == d_dino['class']:
                                                text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å—ä–µ–ª {item['nameru']}!"
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act']

                                            else:
                                                eatr = random.randint( 0, int(item['act'] / 2) )
                                                moodr = random.randint( 1, 10 )
                                                text = f"üçï | –î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ –ø–æ –≤–∫—É—Å—É {item['nameru']}, –æ–Ω —Ç–µ—Ä—è–µ—Ç {eatr}% —Å—ã—Ç–æ—Å—Ç–∏ –∏ {moodr}% –Ω–∞—Å—Ç—Ä–æ—è–Ω–∏—è!"

                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] -= eatr
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= moodr

                                        else:
                                            if item['class'] == 'ALL':
                                                text = f"üçï | The dinosaur ate it with pleasure {item['nameen']}!"
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act']

                                            elif item['class'] == d_dino['class']:
                                                text = f"üçï | The dinosaur ate it with pleasure {item['nameen']}!"
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] += item['act']

                                            else:
                                                eatr = random.randint( 0, int(item['act'] / 2) )
                                                moodr = random.randint( 1, 10 )
                                                text = f"üçï | The dinosaur doesn't like {item['nameen']}, it loses {eatr}% satiety and {mood}% mood!"

                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['eat'] -= eatr
                                                bd_user['dinos'][ bd_user['settings']['dino_id'] ]['stats']['mood'] -= moodr

                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )

                                        bd_user['inventory'].remove(item_id)
                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'inventory': bd_user['inventory'] }} )

                                        bot.send_message(message.chat.id, text, reply_markup = markup('actions', user))

                            msg = bot.send_message(message.chat.id, textt, reply_markup = rmk)
                            bot.register_next_step_handler(msg, ret, l_pages, l_page, l_ind_sort_it, bd_user, user, pages, page, items_id, ind_sort_it)

                        work_pr(message, pages, page, items_id, ind_sort_it)

                if message.text in ['üçï –°–±–æ—Ä –ø–∏—â–∏', 'üçï Collecting food']:
                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'pass_active':

                        if bd_user['language_code'] == 'ru':
                            bbt = ['üåø | –°–æ–±–∏—Ä–∞—Ç–µ–ª—å—Å—Ç–≤–æ', 'üçñ | –û—Ö–æ—Ç–∞', 'üç§ | –†—ã–±–∞–ª–∫–∞', 'ü•ó | –í—Å–µ –≤–º–µ—Å—Ç–µ', '‚Ü© –ù–∞–∑–∞–¥']
                            text = 'üå¥ | –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±—ã—á–∏ –ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è >'
                        else:
                            bbt = ['üåø | Collecting', 'üçñ | Hunting', 'üç§ | Fishing', 'ü•ó | All together', '‚Ü© Back']
                            text = 'üå¥ | Choose a way to get food >'

                        rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                        rmk.add(bbt[0], bbt[1])
                        rmk.add(bbt[2], bbt[3])
                        rmk.add(bbt[4])

                        def ret(message, ans, bd_user):

                            if message.text not in ans or message.text == ans[4]:
                                res = None
                            else:
                                res = message.text

                            if res == None:
                                if bd_user['language_code'] == 'ru':
                                    text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                                else:
                                    text = '‚Ü© Return to the activity menu'

                                bot.send_message(message.chat.id, text, reply_markup = markup('actions', user))

                            else:

                                if bd_user['language_code'] == 'ru':
                                    ans = ['‚Ü© –ù–∞–∑–∞–¥']
                                    text = 'üçΩ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω —Å–æ–±—Ä–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä >'
                                else:
                                    ans = ['‚Ü© Back']
                                    text = 'üçΩ | Enter the number of products that the dinosaur must collect >'

                                rmk = types.ReplyKeyboardMarkup(resize_keyboard = True)
                                rmk.add(ans[0])

                                def ret2(message, ans, bd_user):
                                    number = message.text
                                    try:
                                        number = int(number)
                                        if number <= 0 or number >= 101:
                                            if bd_user['language_code'] == 'ru':
                                                text = '0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!'
                                            else:
                                                text = '0Ô∏è‚É£1Ô∏è‚É£0Ô∏è‚É£ | Enter a number from 1 to 100!'

                                            bot.send_message(message.chat.id, text)
                                            number = None
                                    except:
                                        number = None

                                    if number == None:
                                        if bd_user['language_code'] == 'ru':
                                            text = '‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π'
                                        else:
                                            text = '‚Ü© Return to the activity menu'

                                        bot.send_message(message.chat.id, text, reply_markup = markup('actions', user))

                                    else:
                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] = 'hunting'
                                        bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'] = [0, number]

                                        if res == bbt[0]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'collecting'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üåø | –°–±–æ—Ä —è–≥–æ–¥ –∏ —Ç—Ä–∞–≤ –Ω–∞—á–∞—Ç!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üåø | The gathering of berries and herbs has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        if res == bbt[1]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'hunting'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üçñ | –û—Ö–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üçñ | The hunt has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        if res == bbt[2]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'fishing'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üç£ | –†—ã–±–∞–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üç£ | Fishing has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        if res == bbt[3]:
                                            bd_user['dinos'][ bd_user['settings']['dino_id'] ]['h_type'] = 'all'

                                            if bd_user['language_code'] == 'ru':
                                                text = f'üç± | –û–±—â–∏–π —Å–±–æ—Ä –ø–∏—â–∏ –Ω–∞—á–∞—Ç!\n‚ôª | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%\nüé≤ | –¶–µ–ª—å: {number}'
                                            else:
                                                text = f'üç± | The general food collection has begun!\n‚ôª | Current progress: 0%\nüé≤ | Goal: {number}'

                                        users.update_one( {"userid": bd_user['userid']}, {"$set": {'dinos': bd_user['dinos'] }} )
                                        bot.send_message(message.chat.id, text, reply_markup = markup('actions', user))

                                msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                                bot.register_next_step_handler(msg, ret2, ans, bd_user)

                        msg = bot.send_message(message.chat.id, text, reply_markup = rmk)
                        bot.register_next_step_handler(msg, ret, bbt, bd_user)


                if message.text in ['üçï –ü—Ä–æ–≥—Ä–µ—Å—Å', 'üçï Progress']:
                    if bd_user['dinos'][ bd_user['settings']['dino_id'] ]['activ_status'] == 'hunting':
                        number = bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'][0]
                        tnumber = bd_user['dinos'][ bd_user['settings']['dino_id'] ]['target'][1]
                        prog = number / (tnumber / 100)

                        if bd_user['language_code'] == 'ru':
                            text = f'üç± | –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {int( prog )}%\nüé≤ | –¶–µ–ª—å: {tnumber}'
                        else:
                            text = f'üç± | Current progress: {int( prog )}%\nüé≤ | Goal: {tnumber}'

                        bot.send_message(message.chat.id, text)



@bot.callback_query_handler(func = lambda call: True)
def answer(call):
    user = call.from_user
    bd_user = users.find_one({"userid": user.id})

    if call.data == 'start':
        if bot.get_chat_member(-1001673242031, user.id).status != 'left' and bd_user == None:
            message = call
            try:
                message.chat = bot.get_chat(user.id)
            except:
                return

            if user.language_code == 'ru':
                text = f'üìú | –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!'
            else:
                text = f"üìú | Have a nice game!"

            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'Markdown')

            def trans_paste(fg_img,bg_img,alpha=10,box=(0,0)):
                fg_img_trans = Image.new("RGBA",fg_img.size)
                fg_img_trans = Image.blend(fg_img_trans,fg_img,alpha)
                bg_img.paste(fg_img_trans,box,fg_img_trans)
                return bg_img

            def photo():
                global json_f
                bg_p = Image.open(f"images/remain/{random.choice(['back', 'back2'])}.png")
                eg_l = []
                id_l = []

                for i in range(3):
                    rid = str(random.choice(list(json_f['data']['egg'])))
                    image = Image.open('images/'+str(json_f['elements'][rid]['image']))
                    eg_l.append(image)
                    id_l.append(rid)

                for i in range(3):
                    bg_img = bg_p
                    fg_img = eg_l[i]
                    img = trans_paste(fg_img, bg_img, 1.0, (i*512,0))

                img.save('eggs.png')
                photo = open(f"eggs.png", 'rb')

                return photo, id_l

            if user.language_code == 'ru':
                text = 'ü•ö | –í—ã–±–µ—Ä–∏—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º!'
            else:
                text = 'ü•ö | Choose a dinosaur egg!'

            if user.language_code == 'ru':
                lg = "ru"
            else:
                lg = 'en'

            users.insert_one({'userid': user.id, 'last_m': int(time.time()), 'dinos': {}, 'eggs': [], 'notifications': {}, 'settings': {'notifications': True, 'dino_id': '1'}, 'language_code': lg, 'inventory': [], 'coins': 0, 'lvl': [1, 0], 'activ_items': {'game': None, 'hunt': None, 'journey': None, 'unv': None}, 'friends': { 'friends_list': [], 'requests': [] } })

            markup_inline = types.InlineKeyboardMarkup()
            item_1 = types.InlineKeyboardButton( text = 'ü•ö 1', callback_data = 'egg_answer_1')
            item_2 = types.InlineKeyboardButton( text = 'ü•ö 2', callback_data = 'egg_answer_2')
            item_3 = types.InlineKeyboardButton( text = 'ü•ö 3', callback_data = 'egg_answer_3')
            markup_inline.add(item_1, item_2, item_3)

            photo, id_l = photo()
            bot.send_photo(message.chat.id, photo, text, reply_markup = markup_inline)
            users.update_one( {"userid": user.id}, {"$set": {'eggs': id_l}} )

    if call.data == 'checking_the_user_in_the_channel':
        if bot.get_chat_member(-1001673242031, user.id).status != 'left':

            if bd_user['language_code'] == 'ru':
                text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüü¢ | –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!'
            else:
                text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüü¢ | Thank you for understanding, enjoy using the bot!"

            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode = 'Markdown')


    if call.data in ['egg_answer_1', 'egg_answer_2', 'egg_answer_3']:

        if 'eggs' in list(bd_user.keys()):
            egg_n = call.data[11:]

            bd_user['dinos'][ user_dino_pn(bd_user) ] = {'status': 'incubation', 'incubation_time': time.time() + 10 * 60, 'egg_id': bd_user['eggs'][int(egg_n)-1]}

            users.update_one( {"userid": user.id}, {"$unset": {'eggs': None}} )
            users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

            if bd_user['language_code'] == 'ru':
                text = f'ü•ö | –í—ã–±–µ—Ä–∏—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º!\nü¶ñ | –í—ã –≤—ã–±—Ä–∞–ª–∏ —è–π—Ü–æ ü•ö{egg_n}!'
                text2 = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —É –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –¥–∏–Ω–æ–∑–∞–≤—Ä!\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è–π—Ü–æ –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è, –∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∏–∑ –Ω–µ–≥–æ –≤—ã–ª—É–ø–∏—Ç—Å—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫!\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–π—Ü–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä*!'
                text2 += "\n\n*–ù–æ–≤–∏—á–æ–∫!*\n\n–î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º –º–∏—Ä–µ –∏ –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç!\n"
            else:
                text = f'ü•ö | Choose a dinosaur egg!\nü¶ñ | You have chosen an egg ü•ö{egg_n}!'
                text2 = f'Congratulations, you have your first dinosaur!\n At the moment the egg is incubating, and in 10 minutes a dinosaur will hatch out of it!To view up-to-date information about the egg, click *ü¶ñ Dinosaur*!'
                text2 += '\n\n**Newbie!*\n\nlet me tell you a little about this world and how the bot works!\n'

            if bd_user['language_code'] == 'ru':
                text2 += "*‚îå* *–†–µ–¥–∫–æ—Å—Ç–∏ üéà*\n\n"
                text2 += "*‚îú* –°–æ–±—ã—Ç–∏—è –∏ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏.\n–ß–µ–º –±–æ–ª—å—à–µ —Ä–µ–¥–∫–æ—Å—Ç—å, —Ç–µ–º —Å–ª–∞—â–µ –Ω–∞–≥—Ä–∞–¥–∞.\n\n"
                text2 += "*‚îú*  1. –û–±—ã—á–Ω–∞—è - 50%\n*‚îú*  2. –ù–µ–æ–±—ã—á–Ω–∞—è - 25%\n*‚îú*  3. –†–µ–¥–∫–∞—è - 15%\n*‚îú*  4. –ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è - 9%\n*‚îî*  5. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è - 1%\n\n"
                text2 += "*‚îå* *–í–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏—è üïπ*\n\n"
                text2 += "*‚îú* –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∏–Ω–æ–∑–∞—Ä–≤–æ–º –ø–µ—Ä–µ–¥–∏—Ç–µ –≤ `üïπ –î–µ–π—Å—Ç–≤–∏—è`.\n\n"
                text2 += "*‚îú*  1. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±—ã—Ç—å –ø–∏—â—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üçï –°–±–æ—Ä –ø–∏—â–∏` –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
                text2 += "*‚îú*  2. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–∫–æ—Ä–º–∏—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å` –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–∏—â—É.\n\n"
                text2 += "*‚îú*  3. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ç—Ä–µ—É–±–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è` –∏ —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
                text2 += "*‚îú*  4. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–≥–æ —Å–ø–∞—Ç—å, `üïπ –î–µ–π—Å—Ç–≤–∏—è` > `üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å`\n\n"
                text2 += "*‚îî*  5. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ä–∂–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –µ–¥–µ, –∏–≥—Ä—ã, —Å–Ω–∞ –≤ –Ω–æ—Ä–º–µ.\n\n"
                text2 += "*‚îå* *–ü—Ä–æ—Ñ–∏–ª—å üéÆ*\n"
                text2 += "*‚îî*  –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ `üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å`\n\n"
                text2 += "*‚îå* *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ üîß*\n\n"
                text2 += "*‚îî*  –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫.\n\n"
            else:
                text2 += "*‚îå* *Rarities üéà*\n\n"
                text2 += "*‚îú* Events and dinosaurs are divided into rarities.The greater the rarity, the sweeter the reward.\n\n"
                text2 += "*‚îú* 1. Normal - 50%\n*‚îú* 2. Unusual - 25%\n*‚îú* 3. Rare - 15%\n*‚îú* 4. Mystical - 9%\n*‚îî* 5. Legendary - 1%\n\n"
                text2 += "*‚îå* *Interaction üïπ*\n\n"
                text2 += "*‚îú* To interact with dinozarv, pass in `üïπ Actions`.\n\n"
                text2 += "*‚îú* 1. In order to feed the dinosaur, you need to get food, click on `üïπ Actions` > `üçï Food Collection` and follow the instructions.\n\n"
                text2 += "*‚îú*  2. To feed the dinosaur, click on `üïπ Actions` > `üç£ Feed` and choose the appropriate food.\n\n"
                text2 += "*‚îú* 3. To improve the mood of the dinosaur, it is necessary to entertain the dinosaur from time to time. Go to `üïπ Actions` > `üéÆ Entertainment` and follow the instructions.\n\n"
                text2 += "*‚îú* 4. To renew the dinosaur's powers, send it to sleep, `üïπ Action` > `üåô Put to bed`\n\n"
                text2 += "*‚îî* 5. To improve mood, it is required to keep the need for iodine, games, sleep normal.\n\n"
                text2 += "*‚îå* *Profile üéÆ*\n"
                text2 += "*‚îî* To view inventory or find out your statistics, go to `üëÅ Profile`\n\n"
                text2 += "*‚îå* *Settings üîß*\n\n"
                text2 += "*‚îî*  In the settings, you can rename the dinosaur, disable notifications, or switch the language.\n\n"

            bot.edit_message_caption(text, call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, text2, parse_mode = 'Markdown', reply_markup = markup(1, user))

    if call.data[:13] in ['90min_journey', '60min_journey', '30min_journey', '10min_journey']:

        bd_user['dinos'][ call.data[14:] ]['activ_status'] = 'journey'
        bd_user['dinos'][ call.data[14:] ]['journey_time'] = time.time() + 60 * int(call.data[:2])
        bd_user['dinos'][ call.data[14:] ]['journey_log'] = []
        users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

        if bd_user['language_code'] == 'ru':
            text = f'üéà | –ï—Å–ª–∏ —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫–∏–µ —Ç–æ –≤–µ—â–∏.\n\nüß∂ | –í–æ –≤—Ä–µ–º—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –º–æ–≥—É—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Ä–∞–∑–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –æ—Ç –Ω–∏—Ö –∑–∞–≤–∏—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.'
            text2 = f'üå≥ | –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ {call.data[:2]} –º–∏–Ω—É—Ç.'

        else:
            text = f"üéà | If the dinosaur is in a good mood, he can bring back some things.\n\nüß∂ | During the trip, different situations may occur, the result of the trip depends on them."
            text2 = f"üå≥ | You sent a dinosaur on a journey for {call.data[:2]} minutes."

        bot.edit_message_text(text2, call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, text, parse_mode = 'html', reply_markup = markup("actions", user))

    if call.data[:10] in ['1_con_game', '2_con_game', '3_con_game', '1_sna_game', '2_sna_game', '3_sna_game', '1_pin_game', '2_pin_game', '3_pin_game', '1_bal_game', '2_bal_game', '3_bal_game']:
        user = call.from_user
        bd_user = users.find_one({"userid": user.id})
        n_s = int(call.data[:1])
        dino_id = call.data[11:]
        if n_s == 1:
            time_m = random.randint(25, 60) * 60
        if n_s == 2:
            time_m = random.randint(60, 90) * 60
        if n_s == 3:
            time_m = random.randint(90, 120) * 60

        if bd_user['dinos'][dino_id]['activ_status'] != 'pass_active':
            return

        game = call.data[:5][-3:]

        if game == 'con':
            game = 'console'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å...'], ['The dinosaur is tired of playing the console...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å...'], ['The dinosaur is a little tired of playing the console...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å!'], ['The dinosaur is quite playing the game console!'] ] ]

        elif game == 'sna':
            game = 'snake'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –∑–º–µ—è...'], ['The dinosaur is tired of playing kite...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –∑–º–µ—è...'], ['The dinosaur is a little tired of playing kite...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ –∑–º–µ—è!'], ['The dinosaur is pretty playing kite!'] ] ]

        elif game == 'pin':
            game = 'ping-pong'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –ø–∏–Ω–≥ –ø–æ–Ω–≥...'], ['The dinosaur is tired of playing ping pong...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –ø–∏–Ω–≥ –ø–æ–Ω–≥...'], ['The dinosaur is a little tired of playing ping pong...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –ø–∏–Ω–≥ –ø–æ–Ω–≥!'], ['Dinosaur is pretty playing ping pong!'] ] ]

        elif game == 'bal':
            game = 'ball'
            e_text = [ [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –º—è—á...'], ['The dinosaur is tired of playing ball...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–¥–æ–µ–ª–æ –∏–≥—Ä–∞—Ç—å –≤ –º—è—á...'], ['The dinosaur got a little tired of playing ball...'] ], [ ['–î–∏–Ω–æ–∑–∞–≤—Ä –¥–æ–≤–æ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç –≤ –º—è—á!'], ['The dinosaur is pretty playing ball!'] ] ]

        bd_user['dinos'][ dino_id ]['activ_status'] = 'game'
        if 'games' not in list(bd_user['dinos'][ dino_id ].keys()):
            bd_user['dinos'][ dino_id ]['games'] = []

        if len(bd_user['dinos'][ dino_id ]['games']) >= 3:
            bd_user['dinos'][ dino_id ]['games'].remove( bd_user['dinos'][ dino_id ]['games'][0] )

        bd_user['dinos'][ dino_id ]['games'].append(game)
        games = bd_user['dinos'][ dino_id ]['games'].copy()
        bd_user['dinos'][ dino_id ]['game_%'] = 1

        if len(games) == 1:
            bd_user['dinos'][ dino_id ]['game_%'] = 1

            if bd_user['language_code'] == 'ru':
                text2 = f'üéÆ | {e_text[2][0][0]}'

            else:
                text2 = f"üéÆ | {e_text[2][1][0]}"

        if len(games) == 2:

            if games[0] == games[1]:
                bd_user['dinos'][ dino_id ]['game_%'] = 0.5
                if bd_user['language_code'] == 'ru':
                    text2 = f"üéÆ | {e_text[0][0][0]}, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ {bd_user['dinos'][ dino_id ]['game_%']}% –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∏–≥—Ä—ã!"

                else:
                    text2 = f"üéÆ | {e_text[0][1][0]}, he gets a {bd_user['dinos'][ dino_id ]['game_%']}% penalty in enjoying the game!"

            if games[0] != games[1]:
                bd_user['dinos'][ dino_id ]['game_%'] = 1

                if bd_user['language_code'] == 'ru':
                    text2 = f'üéÆ | {e_text[2][0][0]}'

                else:
                    text2 = f"üéÆ | {e_text[2][1][0]}"


        if len(games) == 3:

            if games[0] == games[1] and games[1] == games[2]:
                bd_user['dinos'][ dino_id ]['game_%'] = 0.5

                if bd_user['language_code'] == 'ru':
                    text2 = f"üéÆ | {e_text[0][0][0]}, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ {bd_user['dinos'][ dino_id ]['game_%']}% –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∏–≥—Ä—ã!"

                else:
                    text2 = f"üéÆ | {e_text[0][1][0]}, he gets a {bd_user['dinos'][ dino_id ]['game_%']}% penalty in enjoying the game!"

            if games[0] == games[1] and games[1] != games[2] or games[0] == games[2] and games[0] != games[1] or games[0] != games[1] and games[1] == games[2]:
                bd_user['dinos'][ dino_id ]['game_%'] = 0.9

                if bd_user['language_code'] == 'ru':
                    text2 = f"üéÆ | {e_text[1][0][0]}, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç —à—Ç—Ä–∞—Ñ {bd_user['dinos'][ dino_id ]['game_%']}% –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∏–≥—Ä—ã!"

                else:
                    text2 = f"üéÆ | {e_text[1][1][0]}, he gets a {bd_user['dinos'][ dino_id ]['game_%']}% penalty in enjoying the game!"

            if games[0] != games[1] and games[1] != games[2] and games[0] != games[2]:
                bd_user['dinos'][ dino_id ]['game_%'] = 1

                if bd_user['language_code'] == 'ru':
                    text2 = f'üéÆ | {e_text[2][0][0]}'

                else:
                    text2 = f"üéÆ | {e_text[2][1][0]}"


        bd_user['dinos'][ dino_id ]['game_time'] = time.time() + time_m
        users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )

        if bd_user['language_code'] == 'ru':

            text = f'üéÆ | –ß–µ—Ä–µ–¥—É–π—Ç–µ –∏–≥—Ä—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —à—Ç—Ä–∞—Ñ–∞!'

        else:

            text = f"üéÆ | Alternate games to avoid a penalty!"

        bot.edit_message_text(text2, call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, text, parse_mode = 'html', reply_markup = markup("games", user))

    if call.data in ['dead_answer1', 'dead_answer2', 'dead_answer3', 'dead_answer4']:

        user = call.from_user
        bd_user = users.find_one({"userid": user.id})

        if bd_user['language_code'] == 'ru':
            text =  f"–ö –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç —á–µ–ª–æ–≤–µ–∫ –≤ —á—ë—Ä–Ω–æ–º –æ–¥–µ—è–Ω–∏–∏.\n\n"
            text += f"–í—ã –≤–∏–¥–∏—Ç–µ, —á—Ç–æ —É —á–µ–ª–æ–≤–µ–∫–∞ —á—ë—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã –∏ –∫–∞–∫–æ–π-—Ç–æ —à—Ä–∞–º –Ω–∞ —â–µ–∫–µ, –Ω–æ –µ–≥–æ –≥–ª–∞–∑–∞ –Ω–µ –≤–∏–¥–Ω—ã –≤ —Ç–µ–Ω–∏ —à–ª—è–ø—ã.\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç { random.choice( ['–º–∏—Å—Ç–µ—Ä', '–¥–æ–∫—Ç–æ—Ä'] ) } { random.choice( ['–î–∂–µ–π–º—Å', '–†–æ–±–µ—Ä—Ç', '–í–∏–Ω—Å–µ–Ω—Ç', '–ê–ª—å–±–µ—Ä—Ç'] ) }, –∞ –≤–∞—Å...\n\n"
            text += f"*–í—ã:* - ... {user.first_name}, {user.first_name} {user.last_name}, —Ç–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ {user.first_name}, –¥–∞–≤–Ω–æ –≤—ã –≤ –Ω–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ? _—É–ª—ã–±–∞–µ—Ç—Å—è_\n\n"
            text += f"*–í—ã:* - ...–ß—Ç–æ? –ë–∏–∑–Ω–µ—Å? –û —á–µ–º, –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ?!\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ü–æ–Ω—è—Ç–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ... –¢–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º. _–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –≤ –±–ª–æ–∫–Ω–æ—Ç_\n\n"
            text += f"*–í—ã:* - ...\n\n"
            text += f"*–õ–∏—á–Ω–æ—Å—Ç—å:* - –î–∞–≤–∞–π—Ç–µ –±–ª–∏–∂–µ –∫ –¥–µ–ª—É, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –∑–∞–∫–ª—é—á–∏—Ç—å —Å –Ω–∞–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –º—ã –ø–æ–ª—É—á–∞–µ–º –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —è–π—Ü–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–º.\n\n"
            text += f"*–í—ã:* - –Ø—è—è, —è –Ω–µ –∑–Ω–∞—é...\n\n"
            text += f"*–í—ã:* - "
            b1 = ['‚ùì | –ö—Ç–æ –≤—ã —Ç–∞–∫–æ–π?', '‚ùì | –≠—Ç–æ –∑–∞–∫–æ–Ω–Ω–æ?', '‚ùì | –ö—Ç–æ "–º—ã"?', 'üß© | –£ –º–µ–Ω—è –∂–µ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞, —Ç–∞–∫?']

        else:
            text = f"A man in a black robe approaches you.\n\n"
            text += f"You can see that the man has black hair and some kind of scar on his cheek, but his eyes are not visible in the shadow of the hat.\n\n"
            text += f"*Personality:* - Hello, my name is { random.choice(['mister', 'doctor'] ) } { random.choice( ['James', 'Robert', 'Vincent', 'Albert'] ) }, and you...\n\n"
            text += f"*You are:* - ... {user.first_name}, {user.first_name} {user.last_name}, that's my name\n\n"
            text += f"*Personality:* - Fine {user.first_name}, how long have you been in our business? _ulybaet_\n\n"
            text += f"*You are:* - ...What? Business? What are you talking about?!\n\n"
            text += f"*Personality:* - I see, I see... So we'll write it down. _ Writes something in notepad_\n\n"
            text += f"*You are:* - ...\n\n"
            text += f"*Personality:* - Let's get down to business, we offer you to sign a contract with us, we get your coins and resources, you get an egg with a dinosaur.\n\n"
            text += f"*You:* - I know, I don't know...\n\n"
            text += f"*You:* - "
            b1 = ['‚ùì | Who are you?', '‚ùì | Is it legal?', '‚ùì | Who are "we"?', "üß© | I don't have a choice, right?"]

        if call.data == 'dead_answer1':
            text += b1[0]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –ö—Ç–æ —è —Ç–∞–∫–æ–π –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –≤–∞–∂–Ω–æ –ª–∏—à—å —Ç–æ... —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –¥–∞—Ç—å...\n–í–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f'\n\n*Personality:* - Who I am does not matter, it only matters... what can I give you...\nHere is the contract, sign it'

        if call.data == 'dead_answer2':
            text += b1[1]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –•–∞, —Ö–∞, —Ö–∞, –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å...\n–í–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f'\n\n*Personality:* - Ha, ha, ha, how to say it...\nHere is the contract, sign it'

        if call.data == 'dead_answer3':
            text += b1[2]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–∞–∂–Ω–æ –ª–∏—à—å —Ç–æ... —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –¥–∞—Ç—å...\n–í–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f"\n\n*Personality:* - It doesn't matter, it just matters... what can I give you...\nHere is the contract, sign it"

        if call.data == 'dead_answer4':
            text += b1[3]
            if bd_user['language_code'] == 'ru':
                text += f'\n\n*–õ–∏—á–Ω–æ—Å—Ç—å:* - –í—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ø—Ä–∞–≤—ã, –≤–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø–æ–¥–ø–∏—à–∏—Ç–µ'
            else:
                text += f'\n\n*Personality:* - You are absolutely right, here is the contract, sign it'

        mn = bd_user['coins'] / 100 * 85
        markup_inline = types.InlineKeyboardMarkup()

        if bd_user['language_code'] == 'ru':
            text += "\n\n\n"
            text += "     *–ö–æ–Ω—Ç—Ä–∞–∫—Ç*\n"
            text += f"{user.first_name} –æ—Ç–¥–∞—ë—Ç: –≤–µ—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, {mn} –º–æ–Ω–µ—Ç\n"
            text += f"{user.first_name} –ø–æ–ª—É—á–∞–µ—Ç: 1—Ö —è–π—Ü–æ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞"
            markup_inline.add( types.InlineKeyboardButton(text= '‚úí –ü–æ–¥–ø–∏—Å–∞—Ç—å', callback_data = 'dead_restart') )
        else:
            text += "\n\n\n"
            text += "     *Contract*\n"
            text += f"{user.first_name} gives: all inventory, {mn} coins\n"
            text += f"{user.first_name} receives: 1x dinosaur egg"
            markup_inline.add( types.InlineKeyboardButton(text= '‚úí Sign', callback_data = 'dead_restart') )

        bd_user['notifications']['ans_dead'] = mn
        users.update_one( {"userid": user.id}, {"$set": {'notifications': bd_user['notifications']}} )

        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup = markup_inline, parse_mode = 'Markdown')

    if call.data == 'dead_restart':
        user = call.from_user
        bd_user = users.find_one({"userid": user.id})

        if bd_user != None and len(bd_user['dinos']) == 0 and 'dead' in bd_user['notifications'] and bd_user['notifications']['dead'] == True:
            egg_n = str(random.choice(list(json_f['data']['egg'])))

            bd_user['dinos'][ user_dino_pn(bd_user) ] = {'status': 'incubation', 'incubation_time': time.time() + 30 * 60, 'egg_id': egg_n}
            bd_user['notifications']['dead'] = False
            bd_user['coins'] -= int(bd_user['notifications']['ans_dead'])
            del bd_user['notifications']['ans_dead']

            users.update_one( {"userid": user.id}, {"$set": {'dinos': bd_user['dinos']}} )
            users.update_one( {"userid": user.id}, {"$set": {'notifications': bd_user['notifications']}} )
            users.update_one( {"userid": user.id}, {"$set": {'coins': bd_user['coins']}} )
            users.update_one( {"userid": user.id}, {"$set": {'inventory': [] }} )


            if bd_user['language_code'] == 'ru':
                text = '‚úí | –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ–¥–ø–∏—Å–∞–Ω, –¥–∏–Ω–æ–∑–∞–≤—Ä –∏–Ω–∫—É–±–∏—Ä—É–µ—Ç—Å—è.'
            else:
                text = '‚úí | The contract is signed, the dinosaur is incubating.'

            bot.send_message(user.id, text, parse_mode = 'Markdown', reply_markup = markup(1, user))

    # if call.data[:5] == 'item_':



print(f'–ë–æ—Ç {bot.get_me().first_name} –∑–∞–ø—É—â–µ–Ω!')
if bot.get_me().first_name == 'DinoGochi':
    thr1.start()
    thr_icub.start()
    thr_sleep.start()
    thr_game.start()
    thr_hunt.start()
    thr_journey.start()
# thr2.start()

bot.infinity_polling()
