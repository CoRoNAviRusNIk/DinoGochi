import telebot
from telebot import types
import random
import json
import pymongo
import time
import threading
import sys
from memory_profiler import memory_usage
import pprint
from fuzzywuzzy import fuzz

import config

sys.path.append("Cogs")
from commands import commands
from classes import Functions, Dungeon
from checks import Checks
from call_data import call_data


bot = telebot.TeleBot(config.TOKEN)

client = pymongo.MongoClient(config.CLUSTER_TOKEN)
users, referal_system, market, dungeons = client.bot.users, client.bot.referal_system, client.bot.market, client.bot.dungeons

with open('data/items.json', encoding='utf-8') as f:
    items_f = json.load(f)

with open('data/dino_data.json', encoding='utf-8') as f:
    json_f = json.load(f)

class SpamStop(telebot.custom_filters.AdvancedCustomFilter):
    key = 'spam_check'

    @staticmethod
    def check(message, text):
        user = message.from_user

        if Functions.spam_stop(user.id) == False:
            bot.delete_message(user.id, message.message_id)
            return False

        else:
            return True

class WC(telebot.custom_filters.AdvancedCustomFilter):
    key = 'wait_callback'

    @staticmethod
    def check(call, trt):
        return Functions.callback_spam_stop(call.from_user.id)

class Test_bot(telebot.custom_filters.AdvancedCustomFilter):
    key = 'test_bot'

    @staticmethod
    def check(message, text):
        user = message.from_user

        if bot.get_me().first_name != 'DinoGochi':
            print("–ü–æ–π–º–∞–ª", message.text, '–æ—Ç ', user.first_name)
            if user.id in [5279769615, 1191252229]:
                return True

            else:
                print('–û—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã')
                return False

class In_Dungeon(telebot.custom_filters.AdvancedCustomFilter):
    key = 'in_dungeon'

    @staticmethod
    def check(message, text):

        if message.chat.type == 'private':

            user = message.from_user
            bd_user = users.find_one({"userid": user.id})

            if bd_user != None:

                for dino_id in bd_user['dinos'].keys():
                    if bd_user['dinos'][str(dino_id)]['status'] == 'dino':
                        dino_st = bd_user['dinos'][str(dino_id)]['activ_status']

                        if dino_st == 'dungeon':

                            if bd_user['language_code'] == 'ru':
                                text = '‚ùå –í–æ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–∑–µ–º–µ–ª—å—è!'
                            else:
                                text = '‚ùå While in the dungeon, use the dungeon interface!'
                            bot.reply_to(message, text)

                            return False

        return True

class In_channel(telebot.custom_filters.AdvancedCustomFilter):
    key = 'in_channel'

    @staticmethod
    def check(message, text):
        user = message.from_user
        bd_user = users.find_one({"userid": user.id})

        r = bot.get_chat_member(-1001673242031, user.id)
        if bd_user != None and r.status == 'left':

            if bd_user['language_code'] == 'ru':
                text = f'üìú | –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n*‚Ä¢* –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≤–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –ø–æ–≤–æ–¥—É –±–æ—Ç–∞, –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –±–æ—Ç–∞!\n\nüî¥ | –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"* –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Å–ª–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"*, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!'
                b1 = "ü¶ñ | –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                b2 = "üîÑ | –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
            else:
                text = f"üìú | Dear user!\n\n*‚Ä¢* To receive news and important notifications about the bot, we ask you to subscribe to the bot's telegram channel!\n\nüî¥ | Click on the *'Subscribe'* button to go to the channel, and then on the *'Check'*, to continue working!"
                b1 = "ü¶ñ | Subscribe"
                b2 = "üîÑ | Check"

            markup_inline = types.InlineKeyboardMarkup()
            markup_inline.add( types.InlineKeyboardButton(text= b1, url="https://t.me/DinoGochi"))
            markup_inline.add( types.InlineKeyboardButton(text= b2, callback_data = 'checking_the_user_in_the_channel') )

            bot.reply_to(message, text, reply_markup = markup_inline, parse_mode="Markdown")
            return False

        else:
            return True

def check(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    def alpha(bot, members): Checks.main(bot, members)

    def beta(bot, members): Checks.main_hunting(bot, members)

    def beta2(bot, members): Checks.main_game(bot, members)

    def gamma(bot, members): Checks.main_sleep(bot, members)

    def gamma2(bot, members): Checks.main_pass(bot, members)

    def delta(bot, members): Checks.main_journey(bot, members)

    non_members = users.find({ })
    chunks_users = list(Functions.chunks( list(non_members), 20 ))
    Functions.check_data('col', None, int(len(chunks_users)) )

    while True:
        if int(memory_usage()[0]) < 1500:
            st_r_time = int(time.time())
            non_members = users.find({ })
            chunks_users = list(Functions.chunks( list(non_members), 20 ))
            sl_time = 10 - ( int(time.time()) - st_r_time )

            if sl_time < 0:
                sl_time = 0
                print(f'WARNING: sleep time: {sl_time}, time sleep skip to {sl_time}')

            for members in chunks_users:

                threading.Thread(target = alpha,  daemon=True, kwargs = {'bot': bot, 'members': members}).start()
                threading.Thread(target = beta,   daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = beta2,  daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = gamma,  daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = gamma2, daemon=True, kwargs = {'bot': bot, 'members': members} ).start()
                threading.Thread(target = delta,  daemon=True, kwargs = {'bot': bot, 'members': members}).start()

        else:
            print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {int(memory_usage()[0])}')

        time.sleep(sl_time)

main_checks = threading.Thread(target = check, daemon=True)

def check_notif(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    def alpha(bot, members): Checks.check_notif(bot, members)

    def beta(bot): Checks.check_incub(bot)

    def memory(): Checks.check_memory()

    while True:

        if int(memory_usage()[0]) < 1500:
            non_members = users.find({ })
            chunks_users = list(Functions.chunks( list(non_members), 25 ))

            for members in chunks_users:
                threading.Thread(target = alpha, daemon=True, kwargs = {'bot': bot, 'members': members}).start()

            threading.Thread(target = beta, daemon=True, kwargs = {'bot': bot}).start()

            threading.Thread(target = memory, daemon=True ).start()

        else:
            print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {int(memory_usage()[0])}')

        time.sleep(5)

thr_notif = threading.Thread(target = check_notif, daemon=True)

def min10_check(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω

    def alpha(users): Checks.rayt(users)

    def dead_users(bot): Checks.check_dead_users(bot)

    def dng_check(bot): Checks.dungeons_check(bot)

    while True:

        if int(memory_usage()[0]) < 1500:
            uss = users.find({ })
            threading.Thread(target = alpha, daemon=True, kwargs = {'users': uss}).start()

            if bot.get_me().first_name == 'DinoGochi':
                threading.Thread(target = dead_users, daemon=True, kwargs = {'bot': bot} ).start()
                threading.Thread(target = dng_check, daemon=True, kwargs = {'bot': bot}).start()

        else:
            print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {int(memory_usage()[0])}')

        time.sleep(600)

min10_thr = threading.Thread(target = min10_check, daemon=True)

def min1_check(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    def alpha(bot): Checks.quests(bot)

    while True:
        time.sleep(60)

        if int(memory_usage()[0]) < 1500:

            if bot.get_me().first_name == 'DinoGochi':
                threading.Thread(target = alpha, daemon = True, kwargs = {'bot': bot}).start()

        else:
            print(f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {int(memory_usage()[0])}')

min1_thr = threading.Thread(target = min1_check, daemon=True)

@bot.message_handler(commands=['stats'])
def command(message):
    user = message.from_user
    checks_data = Functions.check_data(m = 'check')

    def ttx(tm, lst):
        lgs = []
        for i in lst:
            lgs.append(f'{int(tm) - i}s')
        return ', '.join(lgs)


    text = 'STATS\n\n'
    text += f"Memory: {checks_data['memory'][0]}mb\nLast {int(time.time() - checks_data['memory'][1])}s\n\n"
    text += f"Incub check: {checks_data['incub'][0]}s\nLast {int(time.time() - checks_data['incub'][1])}s\nUsers: {checks_data['incub'][2]}\n\n"
    text += f"Notifications check: {'s, '.join(str(i) for i in checks_data['notif'][0])}\nLast { ttx(time.time(), checks_data['notif'][1]) }\n\n"

    for cls in ['main', 'main_hunt', 'main_game', 'main_sleep', 'main_pass', 'main_journey']:
        text += f"{cls} check: {'s, '.join(str(i) for i in checks_data[cls][0])}\nLast { ttx(time.time(), checks_data[cls][1]) }\nUsers: {str(checks_data[cls][2])}\n\n"


    text += f'Thr.count: {threading.active_count()}'
    bot.send_message(user.id, text)
#
# @bot.message_handler(commands=['dinos'])
# def command(message):
#     user = message.from_user
#     bd_user = users.find_one({"userid": user.id})
#     text = ''
#     for i in bd_user['dinos']:
#         if 'journey_log' in bd_user["dinos"][i].keys():
#             bd_user["dinos"][i]['journey_log'] = f"{len(bd_user['dinos'][i]['journey_log'])} - —Å–æ–±—ã—Ç–∏–π"
#
#         text = f'{bd_user["dinos"][i]}\n\n'
#     bot.send_message(user.id, text)
#
# @bot.message_handler(commands=['iam'])
# def command(message):
#     user = message.from_user
#     bd_user = users.find_one({"userid": user.id})
#     pprint.pprint(bd_user)
#
#
# @bot.message_handler(commands=['check_inv'])
# def command(message):
#     user = message.from_user
#     msg_args = message.text.split()
#     bd_user = users.find_one({"userid": int(msg_args[1])})
#     print('id', msg_args[2], type(msg_args[2]))
#     for i in bd_user['inventory']:
#
#         if i['item_id'] == msg_args[2]:
#             print(' #                 ============================================= #')
#             print(i)
#             print(bd_user['inventory'].index(i))
#
#     print('all')
#
# @bot.message_handler(commands=['delete_dinos'])
# def command(message):
#     user = message.from_user
#     if user.id in [5279769615, 1191252229]:
#         bd_user = users.find_one({"userid": user.id})
#         users.update_one( {"userid": user.id}, {"$set": {f'dinos': {} }} )
#         print("all")
#

# @bot.message_handler(commands=['sbros_lvl'])
# def command_n(message):
#     user = message.from_user
#     if user.id in [5279769615, 1191252229]:
#
#         def work(members, n):
#             for bd_user in members:
#
#                 if bd_user['lvl'][0] == 10 and bd_user['lvl'][1] == 0 and len(bd_user['dinos']) == 0:
#                     bd_user['lvl'][0] = 2
#                     print(bd_user['lvl'][0], bd_user['lvl'][1])
#
#                     users.update_one( {"userid": bd_user['userid']}, {"$set": {f'lvl': bd_user['lvl'] }} )
#
#             print(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Ññ{n} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.')
#
#         non_members = users.find({ })
#         chunks_users = list(Functions.chunks( list(non_members), 10 ))
#
#         n = 0
#         for members in chunks_users:
#             n += 1
#             print(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Ññ{n} –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É.')
#             main = threading.Thread(target = work, daemon=True, kwargs = { 'members': members, 'n': n}).start()


@bot.message_handler(commands=['add_item'])
def command(message):
    user = message.from_user
    if user.id in [5279769615, 1191252229]:
        msg_args = message.text.split()
        bd = users.find_one({"userid": int(msg_args[3])})

        tr = Functions.add_item_to_user(bd, msg_args[1], int(msg_args[2]))
        bot.send_message(user.id, str(msg_args))

@bot.message_handler(commands=['test_ad'])
def command(message):
    user = message.from_user
    if user.id in [5279769615, 1191252229]:
        msg_args = message.text.split()
        bd = users.find_one({"userid": user.id})

        for it_id in range(68, 110):
            tr = Functions.add_item_to_user(bd, str(it_id), 10, type = 'data')

            for i in tr:
                bd['inventory'].append(i)

        users.update_one( {"userid": bd['userid']}, {"$set": {f'inventory': bd['inventory'] }} )
        bot.send_message(user.id, '+')

@bot.message_handler(commands=['test_d'])
def command(message):
    user = message.from_user
    if user.id in [5279769615, 1191252229]:
        msg_args = message.text.split()
        bd = users.find_one({"userid": user.id})

        lt = list(range(68, 110))
        n = len(bd['inventory'])
        print('len', n)

        inv = bd['inventory'].copy()

        for item in inv:

            if int(item['item_id']) in lt:
                bd['inventory'].remove(item)

        print('len', len(bd['inventory']), 'l', n - len(bd['inventory']))
        print(len(lt) * 10)

        users.update_one( {"userid": bd['userid']}, {"$set": {f'inventory': bd['inventory'] }} )


# @bot.message_handler(commands=['quest'])
# def command(message):
#     user = message.from_user
#     if user.id in [5279769615, 1191252229]:
#         bd_user = users.find_one({"userid": user.id})
#
#         q = Dungeon.create_quest(bd_user)
#         print(q)
#
#         users.update_one( {"userid": user.id}, {"$push": {'user_dungeon.quests.activ_quests': q }} )


# @bot.message_handler(commands=['d_upd'])
# def command(message):
#     user = message.from_user
#     if user.id in [5279769615, 1191252229]:
#         inf =  Dungeon.message_upd(bot, userid = user.id, dungeonid = user.id, upd_type = 'all', image_update = True)
#         print(inf)
#

@bot.message_handler(commands=['dungeon_delete'])
def command(message):
    user = message.from_user
    if user.id in [5279769615, 1191252229]:
        inf =  Dungeon.message_upd(bot, dungeonid = user.id, type = 'delete_dungeon')
        print(inf)

        dng, inf =  Dungeon.base_upd(dungeonid = user.id, type = 'delete_dungeon')
        pprint.pprint(dng)
        print(inf)
#
@bot.message_handler(commands=['stats_100'])
def command(message):
    user = message.from_user
    if user.id in [5279769615, 1191252229]:
        bd_user = users.find_one({"userid": user.id})

        for dk in bd_user['dinos'].keys():
            dino = bd_user['dinos'][dk]
            ds = dino['stats'].copy()
            for st in ds:
                dino['stats'][st] = 100

        users.update_one( {"userid": user.id}, {"$set": {f"dinos": bd_user['dinos'] }} )
        print('ok')

# =========================================

@bot.message_handler(commands=['profile', '–ø—Ä–æ—Ñ–∏–ª—å'])
def command(message):
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    if bd_user != None:

        text = Functions.member_profile(bot, user.id, bd_user['language_code'])

        try:
            bot.reply_to(message, text, parse_mode = 'Markdown')
        except Exception as error:
            print(message.chat.id, 'ERROR –ü—Ä–æ—Ñ–∏–ª—å', '\n', error)
            bot.reply_to(message, text)

    else:

        if user.language_code == 'ru':
            text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.'
        else:
            text = 'You do not have a registered account in the bot, please go to the bot and register to get access to this command.'

        bot.reply_to(message, text, parse_mode = 'Markdown')

@bot.message_handler(commands=['message_update'])
def command(message):
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    if bd_user != None:

        if message.chat.type == 'private':

            dungs = dungeons.find({ })
            dungeonid = None

            for dng in dungs:
                if str(user.id) in dng['users'].keys():
                    dungeonid = dng['dungeonid']
                    break

            if dungeonid != None:
                image_way = 'images/dungeon/preparation/1.png'
                image = open(image_way, 'rb')
                text = '-'

                msg = bot.send_photo(int(user.id), image, text, parse_mode = 'Markdown')

                Dungeon.base_upd(userid = int(user.id), messageid = msg.id, dungeonid = dungeonid, type = 'edit_message')

                inf = Dungeon.message_upd(bot, userid = user.id, dungeonid = dungeonid, upd_type = 'one', image_update = True)

                try:
                    bot.delete_message(user.id, dng['users'][str(user.id)]['messageid'])
                except:
                    pass

@bot.message_handler(commands=['add_me', '–¥–æ–±–∞–≤—å_–º–µ–Ω—è'])
def command(message):
    user = message.from_user
    bd_user = users.find_one({"userid": user.id})
    if message.chat.type != 'private':
        if bd_user != None:

            if bd_user['language_code'] == 'ru':
                text = f"‚ù§ | –í—Å–µ –∂–µ–ª–∞—é—â–∏–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è <a href='tg://user?id={user.id}'>üåÄ {user.first_name}</a>, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
            else:
                text = f"‚ù§ | Everyone can send a request to friends <a href='tg://user?id={user.id}'>üåÄ{user.first_name}</a> by clicking on the button below!"

            bot.reply_to(message, text, parse_mode = 'HTML', reply_markup = Functions.inline_markup(bot, 'send_request', user.id, ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'Send a request']) )

        else:

            if user.language_code == 'ru':
                text = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.'
            else:
                text = 'You do not have a registered account in the bot, please go to the bot and register to get access to this command.'

            bot.reply_to(message, text, parse_mode = 'Markdown')

@bot.message_handler(commands=['start', 'main-menu'])
def on_start(message):
    user = message.from_user
    if message.chat.type == 'private':
        if users.find_one({"userid": user.id}) == None:
            if user.language_code == 'ru':
                text = f"üéã | –•–µ–π <b>{user.first_name}</b>, —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è!\n"+ f"<b>‚Ä¢</b> –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç –ø–æ —Ç–∏–ø—É —Ç–∞–º–∞–≥–æ—á–∏, —Ç–æ–ª—å–∫–æ —Å –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏!ü¶ñ\n\n"+f"<b>üïπ | –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∞–º–∞–≥–æ—á–∏?</b>\n"+f'<b>‚Ä¢</b> –¢–∞–º–∞–≥–æ—á–∏ - –∏–≥—Ä–∞ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –∫–æ—Ä–º–∏—Ç—å, —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ –Ω–∏–º, –∏–≥—Ä–∞—Ç—å –∏ —Ç–¥.ü•ö\n'+f"<b>‚Ä¢</b> –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ –ª—É—á—à–∏–º!\n\n"+f"<b>üéÆ | –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å?</b>\n"+f'<b>‚Ä¢</b> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–º–∫—É <b>üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å</b>!\n\n'+f'<b>‚ù§ | –ñ–¥—ë–º –≤ –∏–≥—Ä–µ!</b>\n'
            else:
                text = f"üéã | Hey <b>{user.first_name}</b>, I am glad to welcome you!\n" +f"<b>‚Ä¢</b> I'm a small tamagotchi-type game bot, only with dinosaurs!ü¶ñ\n\n"+f"<b>üïπ | What is tamagotchi?</b>\n"+ f'<b>‚Ä¢</b> Tamagotchi is a game with a virtual pet that needs to be fed, cared for, played, and so on.ü•ö\n'+ f"<b>‚Ä¢</b> Compete in the ranking and become the best!\n\n"+ f"<b>üéÆ | How to start playing?</b>\n" + f'<b>‚Ä¢</b> Press the button <b>üç°Start playing</b>!\n\n' + f'<b>‚ù§ | Waiting in the game!</b>\n' +f'<b>‚ùó | In some places, the bot may not be translated!</b>\n'

            bot.reply_to(message, text, reply_markup = Functions.markup(bot, user = user), parse_mode = 'html')
        else:
            bot.reply_to(message, 'üëã', reply_markup = Functions.markup(bot, user = user), parse_mode = 'html')

@bot.message_handler( content_types = ['text'], spam_check = True, in_channel = True, in_dungeon = True)
def on_message(message):
    user = message.from_user

    if message.chat.type == 'private':

        bd_user = users.find_one({"userid": user.id})

        if message.text in ['üç° –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å', 'üç° Start playing']:

            commands.start_game(bot, message, user, bd_user)

        if message.text in ["üß© –ü—Ä–æ–µ–∫—Ç: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ", 'üß© Project: Rebirth']:

            commands.project_reb(bot, message, user, bd_user)

        if message.text in ['‚Ü™ –ù–∞–∑–∞–¥', '‚Ü™ Back', '‚ùå Cancel', '‚ùå –û—Ç–º–µ–Ω–∞']:

            commands.back_open(bot, message, user, bd_user)

        if message.text in ['üëÅ‚Äçüó® –ü—Ä–æ—Ñ–∏–ª—å', 'üëÅ‚Äçüó® Profile']:

            commands.open_profile_menu(bot, message, user, bd_user)

        if message.text in ['üéÆ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'üéÆ Inventory']:

            Functions.user_inventory(bot, user, message)

        if message.text in ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä', 'ü¶ñ Dinosaur']:

            commands.dino_prof(bot, message, user)

        if message.text in ['üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîß Settings']:

            commands.open_settings(bot, message, user, bd_user)

        elif message.text in ['üë• –î—Ä—É–∑—å—è', 'üë• Friends']:

            commands.friends_open(bot, message, user, bd_user)

        if message.text in ['‚ùó FAQ']:

            commands.faq(bot, message, user, bd_user)

        if message.text in ['üç∫ –î–∏–Ω–æ-—Ç–∞–≤–µ—Ä–Ω–∞', 'üç∫ Dino-tavern'] and Functions.lst_m_f(bd_user) != 'dino-tavern':

            commands.open_dino_tavern(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üïπ –î–µ–π—Å—Ç–≤–∏—è', 'üïπ Actions']:

            commands.open_action_menu(bot, message, user, bd_user)

        if message.text in ['‚ùó Notifications', '‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']:

            commands.not_set(bot, message, user, bd_user)

        if message.text in ["üëÖ –Ø–∑—ã–∫", "üëÖ Language"]:

            commands.lang_set(bot, message, user, bd_user)

        if message.text in ['üéû –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', 'üéû Inventory']:

            commands.inv_set_pages(bot, message, user, bd_user)

        if message.text in ['‚Åâ –í–∏–¥–∏–º–æ—Å—Ç—å FAQ', '‚Åâ Visibility FAQ']:

            commands.settings_faq(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üí¨ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å', 'üí¨ Rename']:

            commands.rename_dino(bot, message, user, bd_user)

        if message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ûï Add"]:

            commands.add_friend(bot, message, user, bd_user)

        if message.text in ["üìú –°–ø–∏—Å–æ–∫", "üìú List"]:

            commands.friends_list(bot, message, user, bd_user)

        if message.text in ["üíå –ó–∞–ø—Ä–æ—Å—ã", "üíå Inquiries"]:

            Functions.user_requests(bot, user, message)

        if message.text in ['‚ûñ –£–¥–∞–ª–∏—Ç—å', '‚ûñ Delete']:

            commands.delete_friend(bot, message, user, bd_user)

        if message.text in ['ü§ç –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞', 'ü§ç Invite a friend']:

            commands.invite_friend(bot, message, user, bd_user)

        if message.text in ['üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', 'üé≤ Generate Code']:

            commands.generate_fr_code(bot, message, user, bd_user)

        if message.text in ['üéû –í–≤–µ—Å—Ç–∏ –∫–æ–¥', 'üéû Enter Code']:

            commands.enter_fr_code(bot, message, user, bd_user)

        if message.text in ['üë• –ú–µ–Ω—é –¥—Ä—É–∑–µ–π', 'üë• Friends Menu']:

            commands.friends_menu(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üåô –£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å', 'üåô Put to bed']:

            commands.dino_sleep_ac(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üåô –ü—Ä–æ–±—É–¥–∏—Ç—å', 'üåô Awaken']:

            commands.dino_unsleep_ac(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üéë –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üéë Journey']:

            commands.dino_journey(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üéë –í–µ—Ä–Ω—É—Ç—å', 'üéë Call']:

            commands.dino_unjourney(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üéÆ Entertainments']:

            commands.dino_entert(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üç£ –ü–æ–∫–æ—Ä–º–∏—Ç—å', 'üç£ Feed']:

            commands.dino_feed(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üçï –°–±–æ—Ä –ø–∏—â–∏', 'üçï Collecting food']:

            commands.collecting_food(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üçï –ü—Ä–æ–≥—Ä–µ—Å—Å', 'üçï Progress']:

            commands.coll_progress(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and (message.text[:11] in ['ü¶ñ –î–∏–Ω–æ–∑–∞–≤—Ä:'] or message.text[:7] in [ 'ü¶ñ Dino:']):

            commands.dino_action_ans(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['‚Ü© –ù–∞–∑–∞–¥', '‚Ü© Back']:

            commands.action_back(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['üéÆ –ö–æ–Ω—Å–æ–ª—å', 'ü™Å –ó–º–µ–π', 'üèì –ü–∏–Ω–≥-–ø–æ–Ω–≥', 'üèê –ú—è—á', 'üéÆ Console', 'ü™Å Snake', 'üèì Ping Pong', 'üèê Ball', 'üß© –ü–∞–∑–ª—ã', '‚ôü –®–∞—Ö–º–∞—Ç—ã', 'üß± –î–∂–µ–Ω–≥–∞', 'üé≤ D&D', 'üß© Puzzles', '‚ôü Chess', 'üß± Jenga']:

            commands.dino_entert_games(bot, message, user, bd_user)

        if Functions.tr_c_f(bd_user) and message.text in ['‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É', '‚ùå Stop the game']:

            commands.dino_stop_games(bot, message, user, bd_user)

        if message.text in ['üé¢ –†–µ–π—Ç–∏–Ω–≥', 'üé¢ Rating']:

            commands.rayting(bot, message, user, bd_user)

        if message.text in ['üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üìú Information']:

            commands.open_information(bot, message, user, bd_user)

        if message.text in ['üõí –†—ã–Ω–æ–∫', 'üõí Market']:

            commands.open_market_menu(bot, message, user, bd_user)

        if message.text in ['üíç –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 'üíç Accessories']:

            commands.acss(bot, message, user, bd_user)

        if message.text in ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûï Add Product']:

            Functions.user_inventory(bot, user, message, 'add_product')

        if message.text in ['üìú –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã', 'üìú My products']:

            commands.my_products(bot, message, user, bd_user)

        if message.text in ['‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûñ Delete Product']:

            commands.delete_product(bot, message, user, bd_user)

        if message.text in [ 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞', 'üîç Product Search']:

            commands.search_pr(bot, message, user, bd_user)

        if message.text in [ 'üõí –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', 'üõí Random Products']:

            commands.random_search(bot, message, user, bd_user)

        if message.text in ['‚õì –ö–≤–µ—Å—Ç—ã', '‚õì Quests']:

            commands.quests(bot, message, user, bd_user)

        if message.text in ['üé≠ –ù–∞–≤—ã–∫–∏', 'üé≠ Skills']:

            bot.send_message(user.id, '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –¥–∞–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nThis feature is under development, follow the news in order to find out when the team will work!')

        if message.text in ['ü¶ñ –ë–ò–û', 'ü¶ñ BIO']:

            bot.send_message(user.id, '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –¥–∞–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nThis feature is under development, follow the news in order to find out when the team will work!')

        if message.text in [ 'üëÅ‚Äçüó® –î–∏–Ω–æ–∑–∞–≤—Ä—ã –≤ —Ç–∞–≤–µ—Ä–Ω–µ', 'üëÅ‚Äçüó® Dinosaurs in the Tavern']:

            bot.send_message(user.id, '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –¥–∞–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nThis feature is under development, follow the news in order to find out when the team will work!')

        if message.text in [ '‚ôª Change Dinosaur', '‚ôª –ò–∑–º–µ–Ω–µ–Ω–∏–µ –î–∏–Ω–æ–∑–∞–≤—Ä–∞']:

            commands.rarity_change(bot, message, user, bd_user)

        if message.text in [ 'ü•è –î—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞', 'ü•è Training']:

            bot.send_message(user.id, '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –¥–∞–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nThis feature is under development, follow the news in order to find out when the team will work!')

        if message.text in [ "üí° –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "üí° Research"]:

            bot.send_message(user.id, '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, –¥–∞–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nThis feature is under development, follow the news in order to find out when the team will work!')

        if message.text in [ "üóª –ü–æ–¥–∑–µ–º–µ–ª—å—è", "üóª Dungeons"]:

            commands.dungeon_menu(bot, message, user, bd_user)

        if message.text in [ "üóª –°–æ–∑–¥–∞—Ç—å", "üóª Create"]:

            commands.dungeon_create(bot, message, user, bd_user)

        if message.text in [ 'üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'üö™ Join']:

            commands.dungeon_join(bot, message, user, bd_user)

        if message.text in [ '‚öî –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞', '‚öî Equip']:

            commands.dungeon_equipment(bot, message, user, bd_user)

        if message.text in [ 'üìï –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è', 'üìï Dungeon Rules' ]:

            commands.dungeon_rules(bot, message, user, bd_user)

        if message.text in [ 'üéÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üéÆ Statistics' ]:

            commands.dungeon_statist(bot, message, user, bd_user)

        if bd_user != None:
            # –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            users.update_one( {"userid": bd_user['userid']}, {"$set": {'last_m': int(time.time()) }} )


@bot.callback_query_handler(wait_callback = True, func = lambda call: True)
def answer(call):
    user = call.from_user
    bd_user = users.find_one({"userid": user.id})

    if call.data == 'start':

        call_data.start(bot, bd_user, call, user)

    if call.data == 'checking_the_user_in_the_channel':

        call_data.checking_the_user_in_the_channel(bot, bd_user, call, user)

    if call.data in ['egg_answer_1', 'egg_answer_2', 'egg_answer_3']:

        call_data.egg_answer(bot, bd_user, call, user)

    if call.data[:13] in ['90min_journey', '60min_journey', '30min_journey', '10min_journey', '12min_journey', '24min_journey']:

        call_data.journey(bot, bd_user, call, user)

    if call.data[:10] in ['1_con_game', '2_con_game', '3_con_game', '1_sna_game', '2_sna_game', '3_sna_game', '1_pin_game', '2_pin_game', '3_pin_game', '1_bal_game', '2_bal_game', '3_bal_game', '1_puz_game', '2_puz_game', '3_puz_game', '1_che_game', '2_che_game', '3_che_game', '1_jen_game', '2_jen_game', '3_jen_game', '1_ddd_game', '2_ddd_game', '3_ddd_game']:

        call_data.game(bot, bd_user, call, user)

    if call.data in ['dead_answer1', 'dead_answer2', 'dead_answer3', 'dead_answer4']:

        call_data.dead_answer(bot, bd_user, call, user)

    if call.data == 'dead_restart':

        call_data.dead_restart(bot, bd_user, call, user)

    if call.data[:5] == 'item_':

        call_data.item_use(bot, bd_user, call, user)

    if call.data[:12] == 'remove_item_':

        call_data.remove_item(bot, bd_user, call, user)

    if call.data[:7] == 'remove_':

        call_data.remove(bot, bd_user, call, user)

    if call.data == "cancel_remove":

        bot.delete_message(user.id, call.message.message_id)

    if call.data[:9] == 'exchange_':

        call_data.exchange(bot, bd_user, call, user)

    if call.data[:11] == 'market_buy_':

        call_data.market_buy(bot, bd_user, call, user)

    if call.data[:7] == 'market_':

        call_data.market_inf(bot, bd_user, call, user)

    if call.data[:9] == 'iteminfo_':

        call_data.iteminfo(bot, bd_user, call, user)

    if call.data == 'inventory':

        Functions.user_inventory(bot, user, call.message)

    if call.data == 'requests':

        Functions.user_requests(bot, user, call.message)

    if call.data == 'send_request':

        call_data.send_request(bot, bd_user, call, user)

    if call.data[:18] == 'open_dino_profile_':

        did = call.data[18:]
        if did in bd_user['dinos'].keys():
            bd_dino = bd_user['dinos'][did]
            Functions.p_profile(bot, call.message, bd_dino, user, bd_user, did)

    if call.data[:8] == 'ns_craft':

        call_data.ns_craft(bot, bd_user, call, user)

    if call.data[:13] == 'change_rarity':

        call_data.change_rarity_call_data(bot, bd_user, call, user)

    if call.data.split()[0] == 'cancel_progress':

        call_data.cancel_progress(bot, bd_user, call, user)

    if call.data.split()[0] == 'message_delete':

        show_text = "‚úâ > üóë"
        bot.answer_callback_query(call.id, show_text)

        try:
            bot.delete_message(user.id, call.message.message_id)
        except:
            pass

    if call.data.split()[0] == 'dungeon.settings':

        call_data.dungeon_settings(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.to_lobby':

        call_data.dungeon_to_lobby(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.settings_lang':

        call_data.dungeon_settings_lang(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.settings_batnotf':

        call_data.dungeon_settings_batnotf(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.leave':

        call_data.dungeon_leave(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.leave_True':

        call_data.dungeon_leave_True(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.leave_False':

        call_data.dungeon_leave_False(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.remove':

        call_data.dungeon_remove(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.remove_True':

        call_data.dungeon_remove_True(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.remove_False':

        call_data.dungeon_remove_False(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.menu.add_dino':

        call_data.dungeon_add_dino_menu(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.menu.remove_dino':

        call_data.dungeon_remove_dino_menu(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.action.add_dino':

        call_data.dungeon_add_dino(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.action.remove_dino':

        call_data.dungeon_remove_dino(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.ready':

        call_data.dungeon_ready(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.invite':

        call_data.dungeon_invite(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.supplies':

        call_data.dungeon_supplies(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.action.set_coins':

        call_data.dungeon_set_coins(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.action.add_item':

        call_data.dungeon_add_item_action(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.action.remove_item':

        call_data.dungeon_remove_item_action(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon_add_item':

        call_data.dungeon_add_item(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon_remove_item':

        call_data.dungeon_remove_item(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.start':

        call_data.dungeon_start_game(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.next_room':

        call_data.dungeon_next_room(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.action.battle_action':

        call_data.dungeon_battle_action(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.battle_action_attack':

        call_data.dungeon_battle_attack(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.battle_action_defend':

        call_data.dungeon_battle_defend(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.battle_action_idle':

        call_data.dungeon_battle_idle(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.next_room_ready':

        call_data.dungeon_next_room_ready(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.end_move':

        call_data.dungeon_end_move(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.dinos_stats':

        call_data.dungeon_dinos_stats(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.collect_reward':

        call_data.dungeon_collect_reward(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.item_from_reward':

        call_data.item_from_reward(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.inventory':

        call_data.dungeon_inventory(bot, bd_user, call, user)

    if call.data.split()[0] == '-' or call.data.split()[0] == ' ':
        pass

    if call.data.split()[0] == 'dungeon_use_item_info':

        call_data.dungeon_use_item_info(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon_use_item':

        call_data.dungeon_use_item(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon_use_item':

        call_data.dungeon_use_item(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon_delete_item':

        call_data.dungeon_delete_item(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.kick_member':

        call_data.dungeon_kick_member(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon_kick':

        call_data.dungeon_kick(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.leave_in_game':

        call_data.dungeon_leave_in_game(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.leave_in_game_answer':

        call_data.dungeon_leave_in_game_answer(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.fork_answer':

        call_data.dungeon_fork_answer(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.safe_exit':

        call_data.dungeon_safe_exit(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.mine':

        call_data.dungeon_mine(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.shop_menu':

        call_data.dungeon_shop_menu(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.shop_buy':

        call_data.dungeon_shop_buy(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.settings_start_floor':

        call_data.dungeon_settings_start_floor(bot, bd_user, call, user)

    if call.data.split()[0] == 'dungeon.start_floor':

        call_data.dungeon_start_floor(bot, bd_user, call, user)

    if call.data.split()[0] == 'rayt_lvl':

        call_data.rayt_lvl(bot, bd_user, call, user)

    if call.data.split()[0] == 'rayt_money':

        call_data.rayt_money(bot, bd_user, call, user)

    if call.data.split()[0] == 'rayt_dungeon':

        call_data.rayt_dungeon(bot, bd_user, call, user)

    if call.data.split()[0] == 'complete_quest':

        call_data.complete_quest(bot, bd_user, call, user)

    if call.data.split()[0] == 'delete_quest':

        call_data.delete_quest(bot, bd_user, call, user)


def start_all(bot):

    if bot.get_me().first_name == 'DinoGochi' or False:
        main_checks.start() # –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        thr_notif.start() # –∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        min10_thr.start() # –¥–µ—Å—è—Ç–∏-–º–∏–Ω—É—Ç–Ω—ã–π —á–µ–∫
        min1_thr.start() # 1-–º–∏–Ω —á–µ–∫

    bot.add_custom_filter(SpamStop())
    bot.add_custom_filter(Test_bot())
    bot.add_custom_filter(In_channel())
    bot.add_custom_filter(WC())
    bot.add_custom_filter(In_Dungeon())

    try:
        Functions.clean_tmp()
    except:
        print('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.')

    print(f'–ë–æ—Ç {bot.get_me().first_name} –∑–∞–ø—É—â–µ–Ω!')
    bot.infinity_polling(skip_pending = False)

start_all(bot)
